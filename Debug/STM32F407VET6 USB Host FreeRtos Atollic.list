
STM32F407VET6 USB Host FreeRtos Atollic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000857c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          000081c0  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00008000  20008254  20008254  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003258d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000058b6  00000000  00000000  00052651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012f98  00000000  00000000  00057f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  0006aea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001930  00000000  00000000  0006c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a57  00000000  00000000  0006e010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017076  00000000  00000000  00095a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8089  00000000  00000000  000acadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00184b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb0  00000000  00000000  00184be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086f4 	.word	0x080086f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080086f4 	.word	0x080086f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x30>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800058a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000592:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f82f 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f006 fdfe 	bl	80071a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f006 fdba 	bl	8007120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005ac:	2000      	movs	r0, #0
 80005ae:	bd08      	pop	{r3, pc}
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005b4:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <HAL_IncTick+0x10>)
 80005b6:	6811      	ldr	r1, [r2, #0]
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_IncTick+0x14>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	440b      	add	r3, r1
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200073bc 	.word	0x200073bc
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTick+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200073bc 	.word	0x200073bc

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d8:	b538      	push	{r3, r4, r5, lr}
 80005da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff fff6 	bl	80005cc <HAL_GetTick>
 80005e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80005e6:	d002      	beq.n	80005ee <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_Delay+0x24>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ee:	f7ff ffed 	bl	80005cc <HAL_GetTick>
 80005f2:	1b40      	subs	r0, r0, r5
 80005f4:	4284      	cmp	r4, r0
 80005f6:	d8fa      	bhi.n	80005ee <HAL_Delay+0x16>
  {
  }
}
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	20000000 	.word	0x20000000

08000600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b510      	push	{r4, lr}
 8000602:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000604:	1ec3      	subs	r3, r0, #3
 8000606:	2b04      	cmp	r3, #4
 8000608:	d80f      	bhi.n	800062a <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800060c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000612:	041b      	lsls	r3, r3, #16
 8000614:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000616:	0224      	lsls	r4, r4, #8
 8000618:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 800061e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000626:	60d3      	str	r3, [r2, #12]
 8000628:	bd10      	pop	{r4, pc}
 800062a:	2192      	movs	r1, #146	; 0x92
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800062e:	f006 fd76 	bl	800711e <assert_failed>
 8000632:	e7ea      	b.n	800060a <HAL_NVIC_SetPriorityGrouping+0xa>
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	0800870c 	.word	0x0800870c

0800063c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4605      	mov	r5, r0
 8000640:	460c      	mov	r4, r1
 8000642:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000644:	2a0f      	cmp	r2, #15
 8000646:	d824      	bhi.n	8000692 <HAL_NVIC_SetPriority+0x56>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000648:	2c0f      	cmp	r4, #15
 800064a:	d827      	bhi.n	800069c <HAL_NVIC_SetPriority+0x60>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <HAL_NVIC_SetPriority+0x7c>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	f1c3 0207 	rsb	r2, r3, #7
 8000658:	2a04      	cmp	r2, #4
 800065a:	bf28      	it	cs
 800065c:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065e:	1d19      	adds	r1, r3, #4
 8000660:	2906      	cmp	r1, #6
 8000662:	d920      	bls.n	80006a6 <HAL_NVIC_SetPriority+0x6a>
 8000664:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	2101      	movs	r1, #1
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	3a01      	subs	r2, #1
 800066e:	4014      	ands	r4, r2
 8000670:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	3b01      	subs	r3, #1
 8000678:	4033      	ands	r3, r6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067a:	431c      	orrs	r4, r3
  if ((int32_t)(IRQn) >= 0)
 800067c:	2d00      	cmp	r5, #0
 800067e:	db14      	blt.n	80006aa <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	0124      	lsls	r4, r4, #4
 8000682:	b2e4      	uxtb	r4, r4
 8000684:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000688:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800068c:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
 8000690:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000692:	21aa      	movs	r1, #170	; 0xaa
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <HAL_NVIC_SetPriority+0x80>)
 8000696:	f006 fd42 	bl	800711e <assert_failed>
 800069a:	e7d5      	b.n	8000648 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800069c:	21ab      	movs	r1, #171	; 0xab
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <HAL_NVIC_SetPriority+0x80>)
 80006a0:	f006 fd3d 	bl	800711e <assert_failed>
 80006a4:	e7d2      	b.n	800064c <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	2300      	movs	r3, #0
 80006a8:	e7dd      	b.n	8000666 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f005 050f 	and.w	r5, r5, #15
 80006ae:	0124      	lsls	r4, r4, #4
 80006b0:	b2e4      	uxtb	r4, r4
 80006b2:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_NVIC_SetPriority+0x84>)
 80006b4:	555c      	strb	r4, [r3, r5]
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	0800870c 	.word	0x0800870c
 80006c0:	e000ed14 	.word	0xe000ed14

080006c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80006c6:	1e04      	subs	r4, r0, #0
 80006c8:	db0b      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x1e>
  if ((int32_t)(IRQn) >= 0)
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	db08      	blt.n	80006e0 <HAL_NVIC_EnableIRQ+0x1c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	0962      	lsrs	r2, r4, #5
 80006d0:	f004 041f 	and.w	r4, r4, #31
 80006d4:	2301      	movs	r3, #1
 80006d6:	fa03 f404 	lsl.w	r4, r3, r4
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <HAL_NVIC_EnableIRQ+0x28>)
 80006dc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	21be      	movs	r1, #190	; 0xbe
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <HAL_NVIC_EnableIRQ+0x2c>)
 80006e6:	f006 fd1a 	bl	800711e <assert_failed>
 80006ea:	e7ee      	b.n	80006ca <HAL_NVIC_EnableIRQ+0x6>
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	0800870c 	.word	0x0800870c

080006f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006f8:	b083      	sub	sp, #12
 80006fa:	4680      	mov	r8, r0
 80006fc:	460f      	mov	r7, r1
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80006fe:	4bb6      	ldr	r3, [pc, #728]	; (80009d8 <HAL_GPIO_Init+0x2e4>)
 8000700:	4298      	cmp	r0, r3
 8000702:	d023      	beq.n	800074c <HAL_GPIO_Init+0x58>
 8000704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000708:	4298      	cmp	r0, r3
 800070a:	d01f      	beq.n	800074c <HAL_GPIO_Init+0x58>
 800070c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000710:	4298      	cmp	r0, r3
 8000712:	d01b      	beq.n	800074c <HAL_GPIO_Init+0x58>
 8000714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000718:	4298      	cmp	r0, r3
 800071a:	d017      	beq.n	800074c <HAL_GPIO_Init+0x58>
 800071c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000720:	4298      	cmp	r0, r3
 8000722:	d013      	beq.n	800074c <HAL_GPIO_Init+0x58>
 8000724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000728:	4298      	cmp	r0, r3
 800072a:	d00f      	beq.n	800074c <HAL_GPIO_Init+0x58>
 800072c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000730:	4298      	cmp	r0, r3
 8000732:	d00b      	beq.n	800074c <HAL_GPIO_Init+0x58>
 8000734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000738:	4298      	cmp	r0, r3
 800073a:	d007      	beq.n	800074c <HAL_GPIO_Init+0x58>
 800073c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000740:	4298      	cmp	r0, r3
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x58>
 8000744:	21b3      	movs	r1, #179	; 0xb3
 8000746:	48a5      	ldr	r0, [pc, #660]	; (80009dc <HAL_GPIO_Init+0x2e8>)
 8000748:	f006 fce9 	bl	800711e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b29a      	uxth	r2, r3
 8000750:	b112      	cbz	r2, 8000758 <HAL_GPIO_Init+0x64>
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	041b      	lsls	r3, r3, #16
 8000756:	b11b      	cbz	r3, 8000760 <HAL_GPIO_Init+0x6c>
 8000758:	21b4      	movs	r1, #180	; 0xb4
 800075a:	48a0      	ldr	r0, [pc, #640]	; (80009dc <HAL_GPIO_Init+0x2e8>)
 800075c:	f006 fcdf 	bl	800711e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d922      	bls.n	80007ac <HAL_GPIO_Init+0xb8>
 8000766:	2b11      	cmp	r3, #17
 8000768:	d020      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 800076a:	2b02      	cmp	r3, #2
 800076c:	d01e      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 800076e:	2b12      	cmp	r3, #18
 8000770:	d01c      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 8000772:	4a9b      	ldr	r2, [pc, #620]	; (80009e0 <HAL_GPIO_Init+0x2ec>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d019      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 8000778:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800077c:	4293      	cmp	r3, r2
 800077e:	d015      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 8000780:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000784:	4293      	cmp	r3, r2
 8000786:	d011      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 8000788:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 800078c:	4293      	cmp	r3, r2
 800078e:	d00d      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 8000790:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8000794:	4293      	cmp	r3, r2
 8000796:	d009      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 8000798:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 800079c:	4293      	cmp	r3, r2
 800079e:	d005      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d003      	beq.n	80007ac <HAL_GPIO_Init+0xb8>
 80007a4:	21b5      	movs	r1, #181	; 0xb5
 80007a6:	488d      	ldr	r0, [pc, #564]	; (80009dc <HAL_GPIO_Init+0x2e8>)
 80007a8:	f006 fcb9 	bl	800711e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d801      	bhi.n	80007b6 <HAL_GPIO_Init+0xc2>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b2:	2400      	movs	r4, #0
 80007b4:	e074      	b.n	80008a0 <HAL_GPIO_Init+0x1ac>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80007b6:	21b6      	movs	r1, #182	; 0xb6
 80007b8:	4888      	ldr	r0, [pc, #544]	; (80009dc <HAL_GPIO_Init+0x2e8>)
 80007ba:	f006 fcb0 	bl	800711e <assert_failed>
 80007be:	e7f8      	b.n	80007b2 <HAL_GPIO_Init+0xbe>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80007c0:	21c8      	movs	r1, #200	; 0xc8
 80007c2:	4886      	ldr	r0, [pc, #536]	; (80009dc <HAL_GPIO_Init+0x2e8>)
 80007c4:	f006 fcab 	bl	800711e <assert_failed>
 80007c8:	e080      	b.n	80008cc <HAL_GPIO_Init+0x1d8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	b1fb      	cbz	r3, 800080e <HAL_GPIO_Init+0x11a>
 80007ce:	2b09      	cmp	r3, #9
 80007d0:	d01d      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d01b      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d019      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d017      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d015      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	d013      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d011      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d00f      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007ee:	2b08      	cmp	r3, #8
 80007f0:	d00d      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	d00b      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007f6:	2b0b      	cmp	r3, #11
 80007f8:	d009      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007fa:	2b0c      	cmp	r3, #12
 80007fc:	d007      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 80007fe:	2b0d      	cmp	r3, #13
 8000800:	d005      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 8000802:	2b0f      	cmp	r3, #15
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x11a>
 8000806:	21e0      	movs	r1, #224	; 0xe0
 8000808:	4874      	ldr	r0, [pc, #464]	; (80009dc <HAL_GPIO_Init+0x2e8>)
 800080a:	f006 fc88 	bl	800711e <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 800080e:	08e1      	lsrs	r1, r4, #3
 8000810:	3108      	adds	r1, #8
 8000812:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000816:	f004 0207 	and.w	r2, r4, #7
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	200f      	movs	r0, #15
 800081e:	4090      	lsls	r0, r2
 8000820:	ea23 0300 	bic.w	r3, r3, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000824:	6938      	ldr	r0, [r7, #16]
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	4313      	orrs	r3, r2
        GPIOx->AFR[position >> 3U] = temp;
 800082c:	f848 3021 	str.w	r3, [r8, r1, lsl #2]
 8000830:	e079      	b.n	8000926 <HAL_GPIO_Init+0x232>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000832:	2107      	movs	r1, #7
 8000834:	e000      	b.n	8000838 <HAL_GPIO_Init+0x144>
 8000836:	2100      	movs	r1, #0
 8000838:	40a9      	lsls	r1, r5
 800083a:	430a      	orrs	r2, r1
        SYSCFG->EXTICR[position >> 2U] = temp;
 800083c:	3302      	adds	r3, #2
 800083e:	4969      	ldr	r1, [pc, #420]	; (80009e4 <HAL_GPIO_Init+0x2f0>)
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000844:	4b68      	ldr	r3, [pc, #416]	; (80009e8 <HAL_GPIO_Init+0x2f4>)
 8000846:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000848:	43f3      	mvns	r3, r6
 800084a:	ea02 0103 	and.w	r1, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8000854:	d001      	beq.n	800085a <HAL_GPIO_Init+0x166>
        {
          temp |= iocurrent;
 8000856:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->IMR = temp;
 800085a:	4a63      	ldr	r2, [pc, #396]	; (80009e8 <HAL_GPIO_Init+0x2f4>)
 800085c:	6011      	str	r1, [r2, #0]

        temp = EXTI->EMR;
 800085e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000860:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800086a:	d001      	beq.n	8000870 <HAL_GPIO_Init+0x17c>
        {
          temp |= iocurrent;
 800086c:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->EMR = temp;
 8000870:	4a5d      	ldr	r2, [pc, #372]	; (80009e8 <HAL_GPIO_Init+0x2f4>)
 8000872:	6051      	str	r1, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000874:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000876:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8000880:	d001      	beq.n	8000886 <HAL_GPIO_Init+0x192>
        {
          temp |= iocurrent;
 8000882:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR = temp;
 8000886:	4a58      	ldr	r2, [pc, #352]	; (80009e8 <HAL_GPIO_Init+0x2f4>)
 8000888:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 800088a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800088c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8000894:	d001      	beq.n	800089a <HAL_GPIO_Init+0x1a6>
        {
          temp |= iocurrent;
 8000896:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->FTSR = temp;
 800089a:	4a53      	ldr	r2, [pc, #332]	; (80009e8 <HAL_GPIO_Init+0x2f4>)
 800089c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089e:	3401      	adds	r4, #1
 80008a0:	2c0f      	cmp	r4, #15
 80008a2:	f200 8095 	bhi.w	80009d0 <HAL_GPIO_Init+0x2dc>
    ioposition = 0x01U << position;
 80008a6:	2501      	movs	r5, #1
 80008a8:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	ea05 0603 	and.w	r6, r5, r3
    if(iocurrent == ioposition)
 80008b0:	42b5      	cmp	r5, r6
 80008b2:	d1f4      	bne.n	800089e <HAL_GPIO_Init+0x1aa>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d903      	bls.n	80008c4 <HAL_GPIO_Init+0x1d0>
 80008bc:	2b11      	cmp	r3, #17
 80008be:	d001      	beq.n	80008c4 <HAL_GPIO_Init+0x1d0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c0:	2b12      	cmp	r3, #18
 80008c2:	d11a      	bne.n	80008fa <HAL_GPIO_Init+0x206>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	f63f af7a 	bhi.w	80007c0 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR; 
 80008cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d0:	0060      	lsls	r0, r4, #1
 80008d2:	2103      	movs	r1, #3
 80008d4:	4081      	lsls	r1, r0
 80008d6:	ea23 0301 	bic.w	r3, r3, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4082      	lsls	r2, r0
 80008de:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 80008e0:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 80008e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e8:	ea23 0505 	bic.w	r5, r3, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008f2:	40a3      	lsls	r3, r4
 80008f4:	431d      	orrs	r5, r3
        GPIOx->OTYPER = temp;
 80008f6:	f8c8 5004 	str.w	r5, [r8, #4]
      temp = GPIOx->PUPDR;
 80008fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008fe:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8000902:	2503      	movs	r5, #3
 8000904:	fa05 f509 	lsl.w	r5, r5, r9
 8000908:	43ed      	mvns	r5, r5
 800090a:	402b      	ands	r3, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	fa02 f209 	lsl.w	r2, r2, r9
 8000912:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8000914:	f8c8 300c 	str.w	r3, [r8, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b02      	cmp	r3, #2
 800091c:	f43f af55 	beq.w	80007ca <HAL_GPIO_Init+0xd6>
 8000920:	2b12      	cmp	r3, #18
 8000922:	f43f af52 	beq.w	80007ca <HAL_GPIO_Init+0xd6>
      temp = GPIOx->MODER;
 8000926:	f8d8 3000 	ldr.w	r3, [r8]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800092a:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	fa03 f309 	lsl.w	r3, r3, r9
 8000936:	431d      	orrs	r5, r3
      GPIOx->MODER = temp;
 8000938:	f8c8 5000 	str.w	r5, [r8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000942:	d0ac      	beq.n	800089e <HAL_GPIO_Init+0x1aa>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <HAL_GPIO_Init+0x2f8>)
 800094a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800094c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000950:	645a      	str	r2, [r3, #68]	; 0x44
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800095c:	08a3      	lsrs	r3, r4, #2
 800095e:	1c99      	adds	r1, r3, #2
 8000960:	4a20      	ldr	r2, [pc, #128]	; (80009e4 <HAL_GPIO_Init+0x2f0>)
 8000962:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000966:	f004 0103 	and.w	r1, r4, #3
 800096a:	008d      	lsls	r5, r1, #2
 800096c:	210f      	movs	r1, #15
 800096e:	40a9      	lsls	r1, r5
 8000970:	ea22 0201 	bic.w	r2, r2, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000974:	4818      	ldr	r0, [pc, #96]	; (80009d8 <HAL_GPIO_Init+0x2e4>)
 8000976:	4580      	cmp	r8, r0
 8000978:	f43f af5d 	beq.w	8000836 <HAL_GPIO_Init+0x142>
 800097c:	491c      	ldr	r1, [pc, #112]	; (80009f0 <HAL_GPIO_Init+0x2fc>)
 800097e:	4588      	cmp	r8, r1
 8000980:	d01a      	beq.n	80009b8 <HAL_GPIO_Init+0x2c4>
 8000982:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000986:	4588      	cmp	r8, r1
 8000988:	d018      	beq.n	80009bc <HAL_GPIO_Init+0x2c8>
 800098a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800098e:	4588      	cmp	r8, r1
 8000990:	d016      	beq.n	80009c0 <HAL_GPIO_Init+0x2cc>
 8000992:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000996:	4588      	cmp	r8, r1
 8000998:	d014      	beq.n	80009c4 <HAL_GPIO_Init+0x2d0>
 800099a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800099e:	4588      	cmp	r8, r1
 80009a0:	d012      	beq.n	80009c8 <HAL_GPIO_Init+0x2d4>
 80009a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80009a6:	4588      	cmp	r8, r1
 80009a8:	d010      	beq.n	80009cc <HAL_GPIO_Init+0x2d8>
 80009aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80009ae:	4588      	cmp	r8, r1
 80009b0:	f43f af3f 	beq.w	8000832 <HAL_GPIO_Init+0x13e>
 80009b4:	2108      	movs	r1, #8
 80009b6:	e73f      	b.n	8000838 <HAL_GPIO_Init+0x144>
 80009b8:	2101      	movs	r1, #1
 80009ba:	e73d      	b.n	8000838 <HAL_GPIO_Init+0x144>
 80009bc:	2102      	movs	r1, #2
 80009be:	e73b      	b.n	8000838 <HAL_GPIO_Init+0x144>
 80009c0:	2103      	movs	r1, #3
 80009c2:	e739      	b.n	8000838 <HAL_GPIO_Init+0x144>
 80009c4:	2104      	movs	r1, #4
 80009c6:	e737      	b.n	8000838 <HAL_GPIO_Init+0x144>
 80009c8:	2105      	movs	r1, #5
 80009ca:	e735      	b.n	8000838 <HAL_GPIO_Init+0x144>
 80009cc:	2106      	movs	r1, #6
 80009ce:	e733      	b.n	8000838 <HAL_GPIO_Init+0x144>
      }
    }
  }
}
 80009d0:	b003      	add	sp, #12
 80009d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009d6:	bf00      	nop
 80009d8:	40020000 	.word	0x40020000
 80009dc:	08008748 	.word	0x08008748
 80009e0:	10110000 	.word	0x10110000
 80009e4:	40013800 	.word	0x40013800
 80009e8:	40013c00 	.word	0x40013c00
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400

080009f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	4606      	mov	r6, r0
 80009f8:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80009fa:	460c      	mov	r4, r1
 80009fc:	b151      	cbz	r1, 8000a14 <HAL_GPIO_WritePin+0x20>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80009fe:	2d01      	cmp	r5, #1
 8000a00:	d904      	bls.n	8000a0c <HAL_GPIO_WritePin+0x18>
 8000a02:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <HAL_GPIO_WritePin+0x30>)
 8000a08:	f006 fb89 	bl	800711e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000a0c:	b945      	cbnz	r5, 8000a20 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a0e:	0424      	lsls	r4, r4, #16
 8000a10:	61b4      	str	r4, [r6, #24]
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a14:	f240 119f 	movw	r1, #415	; 0x19f
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <HAL_GPIO_WritePin+0x30>)
 8000a1a:	f006 fb80 	bl	800711e <assert_failed>
 8000a1e:	e7ee      	b.n	80009fe <HAL_GPIO_WritePin+0xa>
    GPIOx->BSRR = GPIO_Pin;
 8000a20:	61b4      	str	r4, [r6, #24]
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	08008748 	.word	0x08008748

08000a28 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a2a:	6806      	ldr	r6, [r0, #0]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8000a2c:	6a34      	ldr	r4, [r6, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8000a2e:	f004 070f 	and.w	r7, r4, #15
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000a32:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000a36:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d12e      	bne.n	8000a9c <HCD_RXQLVL_IRQHandler+0x74>
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000a3e:	b36c      	cbz	r4, 8000a9c <HCD_RXQLVL_IRQHandler+0x74>
 8000a40:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8000a44:	00d3      	lsls	r3, r2, #3
 8000a46:	4403      	add	r3, r0
 8000a48:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a4a:	b339      	cbz	r1, 8000a9c <HCD_RXQLVL_IRQHandler+0x74>
 8000a4c:	4605      	mov	r5, r0
      {
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8000a4e:	4622      	mov	r2, r4
 8000a50:	4630      	mov	r0, r6
 8000a52:	f002 fa69 	bl	8002f28 <USB_ReadPacket>

        /*manage multiple Xfer */
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8000a56:	00ba      	lsls	r2, r7, #2
 8000a58:	443a      	add	r2, r7
 8000a5a:	00d3      	lsls	r3, r2, #3
 8000a5c:	442b      	add	r3, r5
 8000a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a60:	4422      	add	r2, r4
 8000a62:	645a      	str	r2, [r3, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8000a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a66:	4422      	add	r2, r4
 8000a68:	64da      	str	r2, [r3, #76]	; 0x4c

        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8000a6a:	eb06 1347 	add.w	r3, r6, r7, lsl #5
 8000a6e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HCD_RXQLVL_IRQHandler+0x78>)
 8000a74:	400a      	ands	r2, r1
 8000a76:	b18a      	cbz	r2, 8000a9c <HCD_RXQLVL_IRQHandler+0x74>
        {
          /* re-activate the channel when more packets are expected */
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000a78:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000a7c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000a80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000a84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8000a88:	00bb      	lsls	r3, r7, #2
 8000a8a:	19d9      	adds	r1, r3, r7
 8000a8c:	00ca      	lsls	r2, r1, #3
 8000a8e:	442a      	add	r2, r5
 8000a90:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	1ff80000 	.word	0x1ff80000

08000aa4 <HAL_HCD_HC_Init>:
{
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8000aac:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8000ab0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8000ab4:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
 8000ab8:	2c01      	cmp	r4, #1
 8000aba:	d041      	beq.n	8000b40 <HAL_HCD_HC_Init+0x9c>
 8000abc:	2401      	movs	r4, #1
 8000abe:	f880 42b8 	strb.w	r4, [r0, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000ac2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8000ac6:	448e      	add	lr, r1
 8000ac8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8000acc:	4404      	add	r4, r0
 8000ace:	f04f 0e00 	mov.w	lr, #0
 8000ad2:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ad6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8000ada:	f8a4 7040 	strh.w	r7, [r4, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8000ade:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000ae2:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000ae6:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 8000aea:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 8000aee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000af2:	d11b      	bne.n	8000b2c <HAL_HCD_HC_Init+0x88>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000af4:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 8000af8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8000afc:	4404      	add	r4, r0
 8000afe:	f04f 0e00 	mov.w	lr, #0
 8000b02:	f884 e03b 	strb.w	lr, [r4, #59]	; 0x3b
 8000b06:	4604      	mov	r4, r0
  hhcd->hc[ch_num].speed = speed;
 8000b08:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 8000b0c:	ea4f 00ce 	mov.w	r0, lr, lsl #3
 8000b10:	4420      	add	r0, r4
 8000b12:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8000b16:	9702      	str	r7, [sp, #8]
 8000b18:	9601      	str	r6, [sp, #4]
 8000b1a:	9500      	str	r5, [sp, #0]
 8000b1c:	6820      	ldr	r0, [r4, #0]
 8000b1e:	f002 fb0f 	bl	8003140 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8000b22:	2300      	movs	r3, #0
 8000b24:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 8000b28:	b005      	add	sp, #20
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000b2c:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 8000b30:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8000b34:	4404      	add	r4, r0
 8000b36:	f04f 0e01 	mov.w	lr, #1
 8000b3a:	f884 e03b 	strb.w	lr, [r4, #59]	; 0x3b
 8000b3e:	e7e2      	b.n	8000b06 <HAL_HCD_HC_Init+0x62>
  __HAL_LOCK(hhcd);
 8000b40:	2002      	movs	r0, #2
 8000b42:	e7f1      	b.n	8000b28 <HAL_HCD_HC_Init+0x84>

08000b44 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8000b44:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d101      	bne.n	8000b50 <HAL_HCD_HC_Halt+0xc>
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	4770      	bx	lr
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000b54:	2301      	movs	r3, #1
 8000b56:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000b5a:	6800      	ldr	r0, [r0, #0]
 8000b5c:	f002 fb77 	bl	800324e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return status;
 8000b66:	bd10      	pop	{r4, pc}

08000b68 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d051      	beq.n	8000c10 <HAL_HCD_Init+0xa8>
{
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	4606      	mov	r6, r0
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8000b72:	6803      	ldr	r3, [r0, #0]
 8000b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b78:	d006      	beq.n	8000b88 <HAL_HCD_Init+0x20>
 8000b7a:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_HCD_Init+0xac>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d003      	beq.n	8000b88 <HAL_HCD_Init+0x20>
 8000b80:	217a      	movs	r1, #122	; 0x7a
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <HAL_HCD_Init+0xb0>)
 8000b84:	f006 facb 	bl	800711e <assert_failed>
  USBx = hhcd->Instance;
 8000b88:	6834      	ldr	r4, [r6, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b8a:	f896 32b9 	ldrb.w	r3, [r6, #697]	; 0x2b9
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d038      	beq.n	8000c04 <HAL_HCD_Init+0x9c>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b9e:	d101      	bne.n	8000ba4 <HAL_HCD_Init+0x3c>
    hhcd->Init.dma_enable = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	6133      	str	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000ba4:	6830      	ldr	r0, [r6, #0]
 8000ba6:	f002 f966 	bl	8002e76 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000baa:	4634      	mov	r4, r6
 8000bac:	f854 eb10 	ldr.w	lr, [r4], #16
 8000bb0:	466d      	mov	r5, sp
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bc2:	1d37      	adds	r7, r6, #4
 8000bc4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000bc8:	4670      	mov	r0, lr
 8000bca:	f002 f909 	bl	8002de0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bce:	2101      	movs	r1, #1
 8000bd0:	6830      	ldr	r0, [r6, #0]
 8000bd2:	f002 f956 	bl	8002e82 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000bd6:	4634      	mov	r4, r6
 8000bd8:	f854 eb10 	ldr.w	lr, [r4], #16
 8000bdc:	466d      	mov	r5, sp
 8000bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bee:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000bf2:	4670      	mov	r0, lr
 8000bf4:	f002 fa16 	bl	8003024 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  return HAL_OK;
 8000bfe:	2000      	movs	r0, #0
}
 8000c00:	b00b      	add	sp, #44	; 0x2c
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8000c04:	f886 32b8 	strb.w	r3, [r6, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f006 fc31 	bl	8007470 <HAL_HCD_MspInit>
 8000c0e:	e7c0      	b.n	8000b92 <HAL_HCD_Init+0x2a>
    return HAL_ERROR;
 8000c10:	2001      	movs	r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	40040000 	.word	0x40040000
 8000c18:	08008784 	.word	0x08008784

08000c1c <HAL_HCD_HC_SubmitRequest>:
{
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8000c22:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000c26:	008d      	lsls	r5, r1, #2
 8000c28:	440d      	add	r5, r1
 8000c2a:	00ec      	lsls	r4, r5, #3
 8000c2c:	4404      	add	r4, r0
 8000c2e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000c32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  if (token == 0U)
 8000c36:	b96f      	cbnz	r7, 8000c54 <HAL_HCD_HC_SubmitRequest+0x38>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000c38:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000c3c:	00ec      	lsls	r4, r5, #3
 8000c3e:	4404      	add	r4, r0
 8000c40:	2503      	movs	r5, #3
 8000c42:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  switch (ep_type)
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	f200 8096 	bhi.w	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
 8000c4c:	e8df f003 	tbb	[pc, r3]
 8000c50:	5e2f8d0a 	.word	0x5e2f8d0a
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000c54:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000c58:	00ec      	lsls	r4, r5, #3
 8000c5a:	4404      	add	r4, r0
 8000c5c:	2502      	movs	r5, #2
 8000c5e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
 8000c62:	e7f0      	b.n	8000c46 <HAL_HCD_HC_SubmitRequest+0x2a>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000c64:	2f01      	cmp	r7, #1
 8000c66:	f040 8087 	bne.w	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	f040 8084 	bne.w	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
        if (length == 0U)
 8000c70:	b936      	cbnz	r6, 8000c80 <HAL_HCD_HC_SubmitRequest+0x64>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000c72:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000c76:	00d3      	lsls	r3, r2, #3
 8000c78:	4403      	add	r3, r0
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000c80:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000c84:	00d3      	lsls	r3, r2, #3
 8000c86:	4403      	add	r3, r0
 8000c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c8c:	b93b      	cbnz	r3, 8000c9e <HAL_HCD_HC_SubmitRequest+0x82>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000c8e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000c92:	00d3      	lsls	r3, r2, #3
 8000c94:	4403      	add	r3, r0
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000c9c:	e06c      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000c9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000ca2:	00d3      	lsls	r3, r2, #3
 8000ca4:	4403      	add	r3, r0
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000cac:	e064      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
      if (direction == 0U)
 8000cae:	b9b2      	cbnz	r2, 8000cde <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000cb0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000cb4:	00d3      	lsls	r3, r2, #3
 8000cb6:	4403      	add	r3, r0
 8000cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000cbc:	b93b      	cbnz	r3, 8000cce <HAL_HCD_HC_SubmitRequest+0xb2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000cbe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000cc2:	00d3      	lsls	r3, r2, #3
 8000cc4:	4403      	add	r3, r0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ccc:	e054      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000cce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000cd2:	00d3      	lsls	r3, r2, #3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000cdc:	e04c      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000cde:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000ce2:	00d3      	lsls	r3, r2, #3
 8000ce4:	4403      	add	r3, r0
 8000ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000cea:	b93b      	cbnz	r3, 8000cfc <HAL_HCD_HC_SubmitRequest+0xe0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000cec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000cf0:	00d3      	lsls	r3, r2, #3
 8000cf2:	4403      	add	r3, r0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000cfa:	e03d      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000cfc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d00:	00d3      	lsls	r3, r2, #3
 8000d02:	4403      	add	r3, r0
 8000d04:	2202      	movs	r2, #2
 8000d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d0a:	e035      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
      if (direction == 0U)
 8000d0c:	b9b2      	cbnz	r2, 8000d3c <HAL_HCD_HC_SubmitRequest+0x120>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000d0e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d12:	00d3      	lsls	r3, r2, #3
 8000d14:	4403      	add	r3, r0
 8000d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000d1a:	b93b      	cbnz	r3, 8000d2c <HAL_HCD_HC_SubmitRequest+0x110>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000d1c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d20:	00d3      	lsls	r3, r2, #3
 8000d22:	4403      	add	r3, r0
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d2a:	e025      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000d2c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d30:	00d3      	lsls	r3, r2, #3
 8000d32:	4403      	add	r3, r0
 8000d34:	2202      	movs	r2, #2
 8000d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d3a:	e01d      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000d3c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d40:	00d3      	lsls	r3, r2, #3
 8000d42:	4403      	add	r3, r0
 8000d44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d48:	b93b      	cbnz	r3, 8000d5a <HAL_HCD_HC_SubmitRequest+0x13e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000d4a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d4e:	00d3      	lsls	r3, r2, #3
 8000d50:	4403      	add	r3, r0
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d58:	e00e      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000d5a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d5e:	00d3      	lsls	r3, r2, #3
 8000d60:	4403      	add	r3, r0
 8000d62:	2202      	movs	r2, #2
 8000d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000d68:	e006      	b.n	8000d78 <HAL_HCD_HC_SubmitRequest+0x15c>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000d6a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000d6e:	00d3      	lsls	r3, r2, #3
 8000d70:	4403      	add	r3, r0
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000d78:	008a      	lsls	r2, r1, #2
 8000d7a:	1854      	adds	r4, r2, r1
 8000d7c:	00e3      	lsls	r3, r4, #3
 8000d7e:	4403      	add	r3, r0
 8000d80:	9c07      	ldr	r4, [sp, #28]
 8000d82:	645c      	str	r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000d84:	649e      	str	r6, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000d86:	2400      	movs	r4, #0
 8000d88:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8000d8c:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d8e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8000d92:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000d96:	4411      	add	r1, r2
 8000d98:	00cb      	lsls	r3, r1, #3
 8000d9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000d9e:	7c02      	ldrb	r2, [r0, #16]
 8000da0:	4401      	add	r1, r0
 8000da2:	6800      	ldr	r0, [r0, #0]
 8000da4:	f002 face 	bl	8003344 <USB_HC_StartXfer>
}
 8000da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000daa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000daa:	b530      	push	{r4, r5, lr}
 8000dac:	b083      	sub	sp, #12
 8000dae:	4605      	mov	r5, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000db0:	6804      	ldr	r4, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000db2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000db6:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000db8:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000dbc:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000dbe:	9b00      	ldr	r3, [sp, #0]
 8000dc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000dc4:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000dc6:	9b01      	ldr	r3, [sp, #4]
 8000dc8:	f013 0f02 	tst.w	r3, #2
 8000dcc:	d007      	beq.n	8000dde <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000dce:	9b01      	ldr	r3, [sp, #4]
 8000dd0:	f013 0f01 	tst.w	r3, #1
 8000dd4:	d128      	bne.n	8000e28 <HCD_Port_IRQHandler+0x7e>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000dde:	9b01      	ldr	r3, [sp, #4]
 8000de0:	f013 0f08 	tst.w	r3, #8
 8000de4:	d013      	beq.n	8000e0e <HCD_Port_IRQHandler+0x64>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000de6:	9b00      	ldr	r3, [sp, #0]
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	f013 0f04 	tst.w	r3, #4
 8000df4:	d034      	beq.n	8000e60 <HCD_Port_IRQHandler+0xb6>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000df6:	69ab      	ldr	r3, [r5, #24]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d01c      	beq.n	8000e36 <HCD_Port_IRQHandler+0x8c>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000dfc:	68eb      	ldr	r3, [r5, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d029      	beq.n	8000e56 <HCD_Port_IRQHandler+0xac>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000e02:	4628      	mov	r0, r5
 8000e04:	f006 fb8e 	bl	8007524 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f006 fb79 	bl	8007500 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000e0e:	9b01      	ldr	r3, [sp, #4]
 8000e10:	f013 0f20 	tst.w	r3, #32
 8000e14:	d003      	beq.n	8000e1e <HCD_Port_IRQHandler+0x74>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000e16:	9b00      	ldr	r3, [sp, #0]
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000e1e:	9b00      	ldr	r3, [sp, #0]
 8000e20:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8000e24:	b003      	add	sp, #12
 8000e26:	bd30      	pop	{r4, r5, pc}
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000e28:	69a3      	ldr	r3, [r4, #24]
 8000e2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000e2e:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000e30:	f006 fb66 	bl	8007500 <HAL_HCD_Connect_Callback>
 8000e34:	e7cf      	b.n	8000dd6 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e40:	d004      	beq.n	8000e4c <HCD_Port_IRQHandler+0xa2>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000e42:	2101      	movs	r1, #1
 8000e44:	6828      	ldr	r0, [r5, #0]
 8000e46:	f002 f88b 	bl	8002f60 <USB_InitFSLSPClkSel>
 8000e4a:	e7da      	b.n	8000e02 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	6828      	ldr	r0, [r5, #0]
 8000e50:	f002 f886 	bl	8002f60 <USB_InitFSLSPClkSel>
 8000e54:	e7d5      	b.n	8000e02 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8000e56:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e5a:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 8000e5e:	e7d0      	b.n	8000e02 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000e60:	4628      	mov	r0, r5
 8000e62:	f006 fb65 	bl	8007530 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000e66:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000e6a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000e6e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000e72:	682a      	ldr	r2, [r5, #0]
 8000e74:	6993      	ldr	r3, [r2, #24]
 8000e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	e7c7      	b.n	8000e0e <HCD_Port_IRQHandler+0x64>

08000e7e <HCD_HC_IN_IRQHandler>:
{
 8000e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e80:	4606      	mov	r6, r0
 8000e82:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e84:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e86:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8000e8a:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8000e8e:	68a3      	ldr	r3, [r4, #8]
 8000e90:	f013 0f04 	tst.w	r3, #4
 8000e94:	d03e      	beq.n	8000f14 <HCD_HC_IN_IRQHandler+0x96>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e96:	2304      	movs	r3, #4
 8000e98:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e9a:	68e3      	ldr	r3, [r4, #12]
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000ea2:	68a3      	ldr	r3, [r4, #8]
 8000ea4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000ea8:	d16a      	bne.n	8000f80 <HCD_HC_IN_IRQHandler+0x102>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000eaa:	68a3      	ldr	r3, [r4, #8]
 8000eac:	f013 0f01 	tst.w	r3, #1
 8000eb0:	f000 8087 	beq.w	8000fc2 <HCD_HC_IN_IRQHandler+0x144>
    if (hhcd->Init.dma_enable != 0U)
 8000eb4:	6933      	ldr	r3, [r6, #16]
 8000eb6:	b14b      	cbz	r3, 8000ecc <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000eb8:	00aa      	lsls	r2, r5, #2
 8000eba:	442a      	add	r2, r5
 8000ebc:	00d3      	lsls	r3, r2, #3
 8000ebe:	4433      	add	r3, r6
 8000ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000ec2:	6921      	ldr	r1, [r4, #16]
 8000ec4:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000ec8:	1a52      	subs	r2, r2, r1
 8000eca:	64da      	str	r2, [r3, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8000ecc:	00aa      	lsls	r2, r5, #2
 8000ece:	442a      	add	r2, r5
 8000ed0:	00d3      	lsls	r3, r2, #3
 8000ed2:	4433      	add	r3, r6
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000eda:	2100      	movs	r1, #0
 8000edc:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000ede:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d057      	beq.n	8000f98 <HCD_HC_IN_IRQHandler+0x11a>
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d055      	beq.n	8000f98 <HCD_HC_IN_IRQHandler+0x11a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d15d      	bne.n	8000fac <HCD_HC_IN_IRQHandler+0x12e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000ef0:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8000ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ef8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000efc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f00:	00d3      	lsls	r3, r2, #3
 8000f02:	4433      	add	r3, r6
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f006 fb03 	bl	8007518 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000f12:	e04b      	b.n	8000fac <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000f14:	68a3      	ldr	r3, [r4, #8]
 8000f16:	f013 0f20 	tst.w	r3, #32
 8000f1a:	d002      	beq.n	8000f22 <HCD_HC_IN_IRQHandler+0xa4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	60a3      	str	r3, [r4, #8]
 8000f20:	e7bf      	b.n	8000ea2 <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000f22:	68a3      	ldr	r3, [r4, #8]
 8000f24:	f013 0f08 	tst.w	r3, #8
 8000f28:	d117      	bne.n	8000f5a <HCD_HC_IN_IRQHandler+0xdc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f2a:	68a3      	ldr	r3, [r4, #8]
 8000f2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f30:	d0b7      	beq.n	8000ea2 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f32:	68e3      	ldr	r3, [r4, #12]
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f3a:	6800      	ldr	r0, [r0, #0]
 8000f3c:	f002 f987 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f40:	2310      	movs	r3, #16
 8000f42:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f44:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f48:	00d3      	lsls	r3, r2, #3
 8000f4a:	4433      	add	r3, r6
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	60a3      	str	r3, [r4, #8]
 8000f58:	e7a3      	b.n	8000ea2 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f5a:	68e3      	ldr	r3, [r4, #12]
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000f62:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000f66:	00d3      	lsls	r3, r2, #3
 8000f68:	4403      	add	r3, r0
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f70:	2310      	movs	r3, #16
 8000f72:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000f74:	2308      	movs	r3, #8
 8000f76:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f78:	6800      	ldr	r0, [r0, #0]
 8000f7a:	f002 f968 	bl	800324e <USB_HC_Halt>
 8000f7e:	e790      	b.n	8000ea2 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f80:	68e3      	ldr	r3, [r4, #12]
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f88:	4629      	mov	r1, r5
 8000f8a:	6830      	ldr	r0, [r6, #0]
 8000f8c:	f002 f95f 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f94:	60a3      	str	r3, [r4, #8]
 8000f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f98:	68e3      	ldr	r3, [r4, #12]
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	6830      	ldr	r0, [r6, #0]
 8000fa4:	f002 f953 	bl	800324e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000fa8:	2310      	movs	r3, #16
 8000faa:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8000fac:	00ab      	lsls	r3, r5, #2
 8000fae:	1959      	adds	r1, r3, r5
 8000fb0:	00ca      	lsls	r2, r1, #3
 8000fb2:	4432      	add	r2, r6
 8000fb4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8000fb8:	f083 0301 	eor.w	r3, r3, #1
 8000fbc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000fc2:	68a3      	ldr	r3, [r4, #8]
 8000fc4:	f013 0f02 	tst.w	r3, #2
 8000fc8:	d062      	beq.n	8001090 <HCD_HC_IN_IRQHandler+0x212>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000fca:	68e3      	ldr	r3, [r4, #12]
 8000fcc:	f023 0302 	bic.w	r3, r3, #2
 8000fd0:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000fd2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000fd6:	00d3      	lsls	r3, r2, #3
 8000fd8:	4433      	add	r3, r6
 8000fda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d017      	beq.n	8001012 <HCD_HC_IN_IRQHandler+0x194>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000fe2:	2b05      	cmp	r3, #5
 8000fe4:	d029      	beq.n	800103a <HCD_HC_IN_IRQHandler+0x1bc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d02f      	beq.n	800104a <HCD_HC_IN_IRQHandler+0x1cc>
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d02d      	beq.n	800104a <HCD_HC_IN_IRQHandler+0x1cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d116      	bne.n	8001020 <HCD_HC_IN_IRQHandler+0x1a2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000ff2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000ff6:	00d3      	lsls	r3, r2, #3
 8000ff8:	4433      	add	r3, r6
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001000:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800100c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001010:	e006      	b.n	8001020 <HCD_HC_IN_IRQHandler+0x1a2>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001012:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001016:	00d3      	lsls	r3, r2, #3
 8001018:	4433      	add	r3, r6
 800101a:	2201      	movs	r2, #1
 800101c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001020:	2302      	movs	r3, #2
 8001022:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001024:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001028:	00d3      	lsls	r3, r2, #3
 800102a:	4433      	add	r3, r6
 800102c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001030:	4629      	mov	r1, r5
 8001032:	4630      	mov	r0, r6
 8001034:	f006 fa70 	bl	8007518 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800103a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800103e:	00d3      	lsls	r3, r2, #3
 8001040:	4433      	add	r3, r6
 8001042:	2205      	movs	r2, #5
 8001044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001048:	e7ea      	b.n	8001020 <HCD_HC_IN_IRQHandler+0x1a2>
      hhcd->hc[ch_num].ErrCnt++;
 800104a:	00aa      	lsls	r2, r5, #2
 800104c:	442a      	add	r2, r5
 800104e:	00d3      	lsls	r3, r2, #3
 8001050:	4433      	add	r3, r6
 8001052:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001054:	3201      	adds	r2, #1
 8001056:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001058:	2a03      	cmp	r2, #3
 800105a:	d911      	bls.n	8001080 <HCD_HC_IN_IRQHandler+0x202>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800105c:	00aa      	lsls	r2, r5, #2
 800105e:	442a      	add	r2, r5
 8001060:	00d3      	lsls	r3, r2, #3
 8001062:	4433      	add	r3, r6
 8001064:	2200      	movs	r2, #0
 8001066:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001068:	2204      	movs	r2, #4
 800106a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800106e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001072:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800107a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 800107e:	e7cf      	b.n	8001020 <HCD_HC_IN_IRQHandler+0x1a2>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001080:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001084:	00d3      	lsls	r3, r2, #3
 8001086:	4433      	add	r3, r6
 8001088:	2202      	movs	r2, #2
 800108a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800108e:	e7ee      	b.n	800106e <HCD_HC_IN_IRQHandler+0x1f0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001090:	68a3      	ldr	r3, [r4, #8]
 8001092:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001096:	d119      	bne.n	80010cc <HCD_HC_IN_IRQHandler+0x24e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001098:	68a3      	ldr	r3, [r4, #8]
 800109a:	f013 0f10 	tst.w	r3, #16
 800109e:	d014      	beq.n	80010ca <HCD_HC_IN_IRQHandler+0x24c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80010a0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80010a4:	00d3      	lsls	r3, r2, #3
 80010a6:	4433      	add	r3, r6
 80010a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d025      	beq.n	80010fc <HCD_HC_IN_IRQHandler+0x27e>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80010b0:	b10b      	cbz	r3, 80010b6 <HCD_HC_IN_IRQHandler+0x238>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d107      	bne.n	80010c6 <HCD_HC_IN_IRQHandler+0x248>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80010b6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80010ba:	00d3      	lsls	r3, r2, #3
 80010bc:	4433      	add	r3, r6
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80010c2:	6933      	ldr	r3, [r6, #16]
 80010c4:	b34b      	cbz	r3, 800111a <HCD_HC_IN_IRQHandler+0x29c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010c6:	2310      	movs	r3, #16
 80010c8:	60a3      	str	r3, [r4, #8]
 80010ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010cc:	68e3      	ldr	r3, [r4, #12]
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80010d4:	00ab      	lsls	r3, r5, #2
 80010d6:	1959      	adds	r1, r3, r5
 80010d8:	00ca      	lsls	r2, r1, #3
 80010da:	4432      	add	r2, r6
 80010dc:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80010de:	3101      	adds	r1, #1
 80010e0:	6591      	str	r1, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 80010e2:	442b      	add	r3, r5
 80010e4:	00da      	lsls	r2, r3, #3
 80010e6:	4432      	add	r2, r6
 80010e8:	2306      	movs	r3, #6
 80010ea:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010ee:	4629      	mov	r1, r5
 80010f0:	6830      	ldr	r0, [r6, #0]
 80010f2:	f002 f8ac 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	60a3      	str	r3, [r4, #8]
 80010fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[ch_num].ErrCnt = 0U;
 80010fc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001100:	00d3      	lsls	r3, r2, #3
 8001102:	4433      	add	r3, r6
 8001104:	2200      	movs	r2, #0
 8001106:	659a      	str	r2, [r3, #88]	; 0x58
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001108:	68e3      	ldr	r3, [r4, #12]
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001110:	4629      	mov	r1, r5
 8001112:	6830      	ldr	r0, [r6, #0]
 8001114:	f002 f89b 	bl	800324e <USB_HC_Halt>
 8001118:	e7d5      	b.n	80010c6 <HCD_HC_IN_IRQHandler+0x248>
        hhcd->hc[ch_num].state = HC_NAK;
 800111a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800111e:	00d3      	lsls	r3, r2, #3
 8001120:	4433      	add	r3, r6
 8001122:	2203      	movs	r2, #3
 8001124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001128:	68e3      	ldr	r3, [r4, #12]
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001130:	4629      	mov	r1, r5
 8001132:	6830      	ldr	r0, [r6, #0]
 8001134:	f002 f88b 	bl	800324e <USB_HC_Halt>
 8001138:	e7c5      	b.n	80010c6 <HCD_HC_IN_IRQHandler+0x248>

0800113a <HCD_HC_OUT_IRQHandler>:
{
 800113a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800113c:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800113e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001142:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8001146:	68a2      	ldr	r2, [r4, #8]
 8001148:	f012 0f04 	tst.w	r2, #4
 800114c:	d111      	bne.n	8001172 <HCD_HC_OUT_IRQHandler+0x38>
 800114e:	460e      	mov	r6, r1
 8001150:	4605      	mov	r5, r0
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001152:	68a2      	ldr	r2, [r4, #8]
 8001154:	f012 0f20 	tst.w	r2, #32
 8001158:	d026      	beq.n	80011a8 <HCD_HC_OUT_IRQHandler+0x6e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800115a:	2320      	movs	r3, #32
 800115c:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800115e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001162:	00d3      	lsls	r3, r2, #3
 8001164:	461a      	mov	r2, r3
 8001166:	4403      	add	r3, r0
 8001168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116c:	2b01      	cmp	r3, #1
 800116e:	d007      	beq.n	8001180 <HCD_HC_OUT_IRQHandler+0x46>
 8001170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001172:	2304      	movs	r3, #4
 8001174:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001176:	68e3      	ldr	r3, [r4, #12]
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	60e3      	str	r3, [r4, #12]
 800117e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[ch_num].do_ping = 0U;
 8001180:	008b      	lsls	r3, r1, #2
 8001182:	4402      	add	r2, r0
 8001184:	2100      	movs	r1, #0
 8001186:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800118a:	4433      	add	r3, r6
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	4402      	add	r2, r0
 8001190:	2302      	movs	r3, #2
 8001192:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001196:	68e3      	ldr	r3, [r4, #12]
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800119e:	4631      	mov	r1, r6
 80011a0:	6800      	ldr	r0, [r0, #0]
 80011a2:	f002 f854 	bl	800324e <USB_HC_Halt>
 80011a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80011a8:	68a2      	ldr	r2, [r4, #8]
 80011aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80011ae:	d134      	bne.n	800121a <HCD_HC_OUT_IRQHandler+0xe0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80011b0:	68a2      	ldr	r2, [r4, #8]
 80011b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80011b6:	d14a      	bne.n	800124e <HCD_HC_OUT_IRQHandler+0x114>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80011b8:	68a2      	ldr	r2, [r4, #8]
 80011ba:	f012 0f01 	tst.w	r2, #1
 80011be:	d151      	bne.n	8001264 <HCD_HC_OUT_IRQHandler+0x12a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80011c0:	68a2      	ldr	r2, [r4, #8]
 80011c2:	f012 0f08 	tst.w	r2, #8
 80011c6:	d162      	bne.n	800128e <HCD_HC_OUT_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80011c8:	68a2      	ldr	r2, [r4, #8]
 80011ca:	f012 0f10 	tst.w	r2, #16
 80011ce:	d06f      	beq.n	80012b0 <HCD_HC_OUT_IRQHandler+0x176>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80011d0:	008a      	lsls	r2, r1, #2
 80011d2:	440a      	add	r2, r1
 80011d4:	00d3      	lsls	r3, r2, #3
 80011d6:	4403      	add	r3, r0
 80011d8:	2200      	movs	r2, #0
 80011da:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 80011dc:	2203      	movs	r2, #3
 80011de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80011e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e6:	b96b      	cbnz	r3, 8001204 <HCD_HC_OUT_IRQHandler+0xca>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80011e8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80011ec:	00d3      	lsls	r3, r2, #3
 80011ee:	4403      	add	r3, r0
 80011f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f4:	b933      	cbnz	r3, 8001204 <HCD_HC_OUT_IRQHandler+0xca>
        hhcd->hc[ch_num].do_ping = 1U;
 80011f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80011fa:	00d3      	lsls	r3, r2, #3
 80011fc:	4403      	add	r3, r0
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001204:	68e3      	ldr	r3, [r4, #12]
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800120c:	4631      	mov	r1, r6
 800120e:	6828      	ldr	r0, [r5, #0]
 8001210:	f002 f81d 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001214:	2310      	movs	r3, #16
 8001216:	60a3      	str	r3, [r4, #8]
 8001218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].state = HC_NYET;
 800121a:	008b      	lsls	r3, r1, #2
 800121c:	1859      	adds	r1, r3, r1
 800121e:	00ca      	lsls	r2, r1, #3
 8001220:	4402      	add	r2, r0
 8001222:	2104      	movs	r1, #4
 8001224:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001228:	2101      	movs	r1, #1
 800122a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800122e:	4433      	add	r3, r6
 8001230:	00da      	lsls	r2, r3, #3
 8001232:	4402      	add	r2, r0
 8001234:	2300      	movs	r3, #0
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001238:	68e3      	ldr	r3, [r4, #12]
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001240:	4631      	mov	r1, r6
 8001242:	6800      	ldr	r0, [r0, #0]
 8001244:	f002 f803 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	60a3      	str	r3, [r4, #8]
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800124e:	68e3      	ldr	r3, [r4, #12]
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001256:	6800      	ldr	r0, [r0, #0]
 8001258:	f001 fff9 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001260:	60a3      	str	r3, [r4, #8]
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001264:	008f      	lsls	r7, r1, #2
 8001266:	187a      	adds	r2, r7, r1
 8001268:	00d3      	lsls	r3, r2, #3
 800126a:	4403      	add	r3, r0
 800126c:	2200      	movs	r2, #0
 800126e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001270:	68e3      	ldr	r3, [r4, #12]
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001278:	6800      	ldr	r0, [r0, #0]
 800127a:	f001 ffe8 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800127e:	2301      	movs	r3, #1
 8001280:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001282:	19b9      	adds	r1, r7, r6
 8001284:	00c8      	lsls	r0, r1, #3
 8001286:	4428      	add	r0, r5
 8001288:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 800128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800128e:	2308      	movs	r3, #8
 8001290:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001292:	68e3      	ldr	r3, [r4, #12]
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	f001 ffd7 	bl	800324e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80012a0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 80012a4:	00c8      	lsls	r0, r1, #3
 80012a6:	4428      	add	r0, r5
 80012a8:	2305      	movs	r3, #5
 80012aa:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80012b0:	68a2      	ldr	r2, [r4, #8]
 80012b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80012b6:	d13a      	bne.n	800132e <HCD_HC_OUT_IRQHandler+0x1f4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80012b8:	68a2      	ldr	r2, [r4, #8]
 80012ba:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80012be:	d147      	bne.n	8001350 <HCD_HC_OUT_IRQHandler+0x216>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80012c0:	68a2      	ldr	r2, [r4, #8]
 80012c2:	f012 0f02 	tst.w	r2, #2
 80012c6:	f43f af53 	beq.w	8001170 <HCD_HC_OUT_IRQHandler+0x36>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80012ca:	68e2      	ldr	r2, [r4, #12]
 80012cc:	f022 0202 	bic.w	r2, r2, #2
 80012d0:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80012d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80012d6:	00ca      	lsls	r2, r1, #3
 80012d8:	4611      	mov	r1, r2
 80012da:	4402      	add	r2, r0
 80012dc:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 80012e0:	2a01      	cmp	r2, #1
 80012e2:	d049      	beq.n	8001378 <HCD_HC_OUT_IRQHandler+0x23e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80012e4:	2a03      	cmp	r2, #3
 80012e6:	d068      	beq.n	80013ba <HCD_HC_OUT_IRQHandler+0x280>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80012e8:	2a04      	cmp	r2, #4
 80012ea:	d06e      	beq.n	80013ca <HCD_HC_OUT_IRQHandler+0x290>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80012ec:	2a05      	cmp	r2, #5
 80012ee:	d074      	beq.n	80013da <HCD_HC_OUT_IRQHandler+0x2a0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80012f0:	2a06      	cmp	r2, #6
 80012f2:	d001      	beq.n	80012f8 <HCD_HC_OUT_IRQHandler+0x1be>
 80012f4:	2a08      	cmp	r2, #8
 80012f6:	d14a      	bne.n	800138e <HCD_HC_OUT_IRQHandler+0x254>
      hhcd->hc[ch_num].ErrCnt++;
 80012f8:	00b1      	lsls	r1, r6, #2
 80012fa:	4431      	add	r1, r6
 80012fc:	00ca      	lsls	r2, r1, #3
 80012fe:	442a      	add	r2, r5
 8001300:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001302:	3101      	adds	r1, #1
 8001304:	6591      	str	r1, [r2, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001306:	2903      	cmp	r1, #3
 8001308:	d96f      	bls.n	80013ea <HCD_HC_OUT_IRQHandler+0x2b0>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800130a:	00b1      	lsls	r1, r6, #2
 800130c:	4431      	add	r1, r6
 800130e:	00ca      	lsls	r2, r1, #3
 8001310:	442a      	add	r2, r5
 8001312:	2100      	movs	r1, #0
 8001314:	6591      	str	r1, [r2, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001316:	2104      	movs	r1, #4
 8001318:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800131c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001320:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001324:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001328:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800132c:	e02f      	b.n	800138e <HCD_HC_OUT_IRQHandler+0x254>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800132e:	68e3      	ldr	r3, [r4, #12]
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001336:	6800      	ldr	r0, [r0, #0]
 8001338:	f001 ff89 	bl	800324e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800133c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001340:	00cb      	lsls	r3, r1, #3
 8001342:	442b      	add	r3, r5
 8001344:	2206      	movs	r2, #6
 8001346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	60a3      	str	r3, [r4, #8]
 800134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001350:	68e3      	ldr	r3, [r4, #12]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001358:	6800      	ldr	r0, [r0, #0]
 800135a:	f001 ff78 	bl	800324e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800135e:	2310      	movs	r3, #16
 8001360:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001368:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800136c:	00cb      	lsls	r3, r1, #3
 800136e:	442b      	add	r3, r5
 8001370:	2208      	movs	r2, #8
 8001372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001378:	460b      	mov	r3, r1
 800137a:	4403      	add	r3, r0
 800137c:	2201      	movs	r2, #1
 800137e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001382:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001386:	3b02      	subs	r3, #2
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4293      	cmp	r3, r2
 800138c:	d90c      	bls.n	80013a8 <HCD_HC_OUT_IRQHandler+0x26e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800138e:	2302      	movs	r3, #2
 8001390:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001392:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8001396:	00d3      	lsls	r3, r2, #3
 8001398:	442b      	add	r3, r5
 800139a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800139e:	4631      	mov	r1, r6
 80013a0:	4628      	mov	r0, r5
 80013a2:	f006 f8b9 	bl	8007518 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80013a6:	e6e3      	b.n	8001170 <HCD_HC_OUT_IRQHandler+0x36>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80013a8:	460b      	mov	r3, r1
 80013aa:	4403      	add	r3, r0
 80013ac:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80013b0:	f082 0201 	eor.w	r2, r2, #1
 80013b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80013b8:	e7e9      	b.n	800138e <HCD_HC_OUT_IRQHandler+0x254>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80013ba:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80013be:	00d3      	lsls	r3, r2, #3
 80013c0:	4403      	add	r3, r0
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80013c8:	e7e1      	b.n	800138e <HCD_HC_OUT_IRQHandler+0x254>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80013ca:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80013ce:	00d3      	lsls	r3, r2, #3
 80013d0:	4403      	add	r3, r0
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80013d8:	e7d9      	b.n	800138e <HCD_HC_OUT_IRQHandler+0x254>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80013da:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80013de:	00d3      	lsls	r3, r2, #3
 80013e0:	4403      	add	r3, r0
 80013e2:	2205      	movs	r2, #5
 80013e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80013e8:	e7d1      	b.n	800138e <HCD_HC_OUT_IRQHandler+0x254>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80013ea:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 80013ee:	00ca      	lsls	r2, r1, #3
 80013f0:	442a      	add	r2, r5
 80013f2:	2102      	movs	r1, #2
 80013f4:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 80013f8:	e790      	b.n	800131c <HCD_HC_OUT_IRQHandler+0x1e2>

080013fa <HAL_HCD_IRQHandler>:
{
 80013fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013fe:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001400:	4628      	mov	r0, r5
 8001402:	f001 fda9 	bl	8002f58 <USB_GetMode>
 8001406:	2801      	cmp	r0, #1
 8001408:	d000      	beq.n	800140c <HAL_HCD_IRQHandler+0x12>
 800140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800140c:	6820      	ldr	r0, [r4, #0]
 800140e:	f001 fd9f 	bl	8002f50 <USB_ReadInterrupts>
 8001412:	2800      	cmp	r0, #0
 8001414:	d0f9      	beq.n	800140a <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001416:	6820      	ldr	r0, [r4, #0]
 8001418:	f001 fd9a 	bl	8002f50 <USB_ReadInterrupts>
 800141c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001420:	d003      	beq.n	800142a <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001428:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	f001 fd90 	bl	8002f50 <USB_ReadInterrupts>
 8001430:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001434:	d003      	beq.n	800143e <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800143c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800143e:	6820      	ldr	r0, [r4, #0]
 8001440:	f001 fd86 	bl	8002f50 <USB_ReadInterrupts>
 8001444:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001448:	d003      	beq.n	8001452 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001450:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001452:	6820      	ldr	r0, [r4, #0]
 8001454:	f001 fd7c 	bl	8002f50 <USB_ReadInterrupts>
 8001458:	f010 0f02 	tst.w	r0, #2
 800145c:	d002      	beq.n	8001464 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001464:	6820      	ldr	r0, [r4, #0]
 8001466:	f001 fd73 	bl	8002f50 <USB_ReadInterrupts>
 800146a:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800146e:	d128      	bne.n	80014c2 <HAL_HCD_IRQHandler+0xc8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	f001 fd6d 	bl	8002f50 <USB_ReadInterrupts>
 8001476:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800147a:	d134      	bne.n	80014e6 <HAL_HCD_IRQHandler+0xec>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	f001 fd67 	bl	8002f50 <USB_ReadInterrupts>
 8001482:	f010 0f08 	tst.w	r0, #8
 8001486:	d132      	bne.n	80014ee <HAL_HCD_IRQHandler+0xf4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	f001 fd61 	bl	8002f50 <USB_ReadInterrupts>
 800148e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001492:	d133      	bne.n	80014fc <HAL_HCD_IRQHandler+0x102>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	f001 fd5b 	bl	8002f50 <USB_ReadInterrupts>
 800149a:	f010 0f10 	tst.w	r0, #16
 800149e:	d053      	beq.n	8001548 <HAL_HCD_IRQHandler+0x14e>
 80014a0:	2301      	movs	r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0b1      	beq.n	800140a <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	6993      	ldr	r3, [r2, #24]
 80014aa:	f023 0310 	bic.w	r3, r3, #16
 80014ae:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fab9 	bl	8000a28 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	6993      	ldr	r3, [r2, #24]
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	e7a3      	b.n	800140a <HAL_HCD_IRQHandler+0x10>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80014c2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80014c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80014ca:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 80014ce:	4620      	mov	r0, r4
 80014d0:	f006 f81c 	bl	800750c <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80014d4:	2101      	movs	r1, #1
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	f001 fd42 	bl	8002f60 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	e7c4      	b.n	8001470 <HAL_HCD_IRQHandler+0x76>
      HCD_Port_IRQHandler(hhcd);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fc5f 	bl	8000daa <HCD_Port_IRQHandler>
 80014ec:	e7c6      	b.n	800147c <HAL_HCD_IRQHandler+0x82>
      HAL_HCD_SOF_Callback(hhcd);
 80014ee:	4620      	mov	r0, r4
 80014f0:	f006 f800 	bl	80074f4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	2208      	movs	r2, #8
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	e7c5      	b.n	8001488 <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80014fc:	6820      	ldr	r0, [r4, #0]
 80014fe:	f001 fea1 	bl	8003244 <USB_HC_ReadInterrupt>
 8001502:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001504:	2600      	movs	r6, #0
 8001506:	e004      	b.n	8001512 <HAL_HCD_IRQHandler+0x118>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001508:	b2f1      	uxtb	r1, r6
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff fe15 	bl	800113a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001510:	3601      	adds	r6, #1
 8001512:	68a3      	ldr	r3, [r4, #8]
 8001514:	429e      	cmp	r6, r3
 8001516:	d212      	bcs.n	800153e <HAL_HCD_IRQHandler+0x144>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001518:	f006 030f 	and.w	r3, r6, #15
 800151c:	fa27 f303 	lsr.w	r3, r7, r3
 8001520:	f013 0f01 	tst.w	r3, #1
 8001524:	d0f4      	beq.n	8001510 <HAL_HCD_IRQHandler+0x116>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001526:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800152a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800152e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001532:	d0e9      	beq.n	8001508 <HAL_HCD_IRQHandler+0x10e>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001534:	b2f1      	uxtb	r1, r6
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fca1 	bl	8000e7e <HCD_HC_IN_IRQHandler>
 800153c:	e7e8      	b.n	8001510 <HAL_HCD_IRQHandler+0x116>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	e7a5      	b.n	8001494 <HAL_HCD_IRQHandler+0x9a>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001548:	2300      	movs	r3, #0
 800154a:	e7aa      	b.n	80014a2 <HAL_HCD_IRQHandler+0xa8>

0800154c <HAL_HCD_Start>:
{
 800154c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800154e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_HCD_Start+0xe>
 8001556:	2002      	movs	r0, #2
}
 8001558:	bd38      	pop	{r3, r4, r5, pc}
 800155a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800155c:	2501      	movs	r5, #1
 800155e:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001562:	6800      	ldr	r0, [r0, #0]
 8001564:	f001 fc81 	bl	8002e6a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001568:	4629      	mov	r1, r5
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	f001 fd37 	bl	8002fde <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001570:	2000      	movs	r0, #0
 8001572:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001576:	bd38      	pop	{r3, r4, r5, pc}

08001578 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001578:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_HCD_Stop+0xc>
 8001580:	2002      	movs	r0, #2
 8001582:	4770      	bx	lr
{
 8001584:	b510      	push	{r4, lr}
 8001586:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001588:	2301      	movs	r3, #1
 800158a:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800158e:	6800      	ldr	r0, [r0, #0]
 8001590:	f001 ff84 	bl	800349c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001594:	2000      	movs	r0, #0
 8001596:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800159a:	bd10      	pop	{r4, pc}

0800159c <HAL_HCD_ResetPort>:
{
 800159c:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 800159e:	6800      	ldr	r0, [r0, #0]
 80015a0:	f001 fcfe 	bl	8002fa0 <USB_ResetPort>
}
 80015a4:	bd08      	pop	{r3, pc}

080015a6 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80015a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80015aa:	00cb      	lsls	r3, r1, #3
 80015ac:	4418      	add	r0, r3
}
 80015ae:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80015b2:	4770      	bx	lr

080015b4 <HAL_HCD_GetCurrentFrame>:
{
 80015b4:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 80015b6:	6800      	ldr	r0, [r0, #0]
 80015b8:	f001 fdbd 	bl	8003136 <USB_GetCurrentFrame>
}
 80015bc:	bd08      	pop	{r3, pc}

080015be <HAL_HCD_GetCurrentSpeed>:
{
 80015be:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 80015c0:	6800      	ldr	r0, [r0, #0]
 80015c2:	f001 fdad 	bl	8003120 <USB_GetHostSpeed>
}
 80015c6:	bd08      	pop	{r3, pc}

080015c8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f000 825d 	beq.w	8001a88 <HAL_RCC_OscConfig+0x4c0>
{
 80015ce:	b570      	push	{r4, r5, r6, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80015d4:	6803      	ldr	r3, [r0, #0]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	d83d      	bhi.n	8001656 <HAL_RCC_OscConfig+0x8e>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	f013 0f01 	tst.w	r3, #1
 80015e0:	d04c      	beq.n	800167c <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80015e2:	6863      	ldr	r3, [r4, #4]
 80015e4:	b14b      	cbz	r3, 80015fa <HAL_RCC_OscConfig+0x32>
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ea:	d006      	beq.n	80015fa <HAL_RCC_OscConfig+0x32>
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_OscConfig+0x32>
 80015f2:	21ed      	movs	r1, #237	; 0xed
 80015f4:	48a2      	ldr	r0, [pc, #648]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 80015f6:	f005 fd92 	bl	800711e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fa:	4ba2      	ldr	r3, [pc, #648]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d031      	beq.n	800166a <HAL_RCC_OscConfig+0xa2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	4b9f      	ldr	r3, [pc, #636]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	2b08      	cmp	r3, #8
 8001610:	d026      	beq.n	8001660 <HAL_RCC_OscConfig+0x98>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	6863      	ldr	r3, [r4, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d05f      	beq.n	80016da <HAL_RCC_OscConfig+0x112>
 800161a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161e:	d062      	beq.n	80016e6 <HAL_RCC_OscConfig+0x11e>
 8001620:	4b98      	ldr	r3, [pc, #608]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001630:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d060      	beq.n	80016fa <HAL_RCC_OscConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7fe ffc8 	bl	80005cc <HAL_GetTick>
 800163c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001646:	d119      	bne.n	800167c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7fe ffc0 	bl	80005cc <HAL_GetTick>
 800164c:	1b40      	subs	r0, r0, r5
 800164e:	2864      	cmp	r0, #100	; 0x64
 8001650:	d9f5      	bls.n	800163e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_TIMEOUT;
 8001652:	2003      	movs	r0, #3
 8001654:	e21d      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001656:	21e8      	movs	r1, #232	; 0xe8
 8001658:	4889      	ldr	r0, [pc, #548]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 800165a:	f005 fd60 	bl	800711e <assert_failed>
 800165e:	e7bc      	b.n	80015da <HAL_RCC_OscConfig+0x12>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001660:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001668:	d0d3      	beq.n	8001612 <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b86      	ldr	r3, [pc, #536]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001672:	d003      	beq.n	800167c <HAL_RCC_OscConfig+0xb4>
 8001674:	6863      	ldr	r3, [r4, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8208 	beq.w	8001a8c <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	f013 0f02 	tst.w	r3, #2
 8001682:	d066      	beq.n	8001752 <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001684:	68e3      	ldr	r3, [r4, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d904      	bls.n	8001694 <HAL_RCC_OscConfig+0xcc>
 800168a:	f240 111f 	movw	r1, #287	; 0x11f
 800168e:	487c      	ldr	r0, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 8001690:	f005 fd45 	bl	800711e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001694:	6923      	ldr	r3, [r4, #16]
 8001696:	2b1f      	cmp	r3, #31
 8001698:	d83e      	bhi.n	8001718 <HAL_RCC_OscConfig+0x150>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f013 0f0c 	tst.w	r3, #12
 80016a2:	d044      	beq.n	800172e <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a4:	4b77      	ldr	r3, [pc, #476]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d039      	beq.n	8001724 <HAL_RCC_OscConfig+0x15c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b0:	68e3      	ldr	r3, [r4, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d076      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b6:	2201      	movs	r2, #1
 80016b8:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_RCC_OscConfig+0x2c0>)
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7fe ff86 	bl	80005cc <HAL_GetTick>
 80016c0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b70      	ldr	r3, [pc, #448]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f013 0f02 	tst.w	r3, #2
 80016ca:	d162      	bne.n	8001792 <HAL_RCC_OscConfig+0x1ca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016cc:	f7fe ff7e 	bl	80005cc <HAL_GetTick>
 80016d0:	1b40      	subs	r0, r0, r5
 80016d2:	2802      	cmp	r0, #2
 80016d4:	d9f5      	bls.n	80016c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d6:	2003      	movs	r0, #3
 80016d8:	e1db      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	4a6a      	ldr	r2, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e7a5      	b.n	8001632 <HAL_RCC_OscConfig+0x6a>
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e79b      	b.n	8001632 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80016fa:	f7fe ff67 	bl	80005cc <HAL_GetTick>
 80016fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001700:	4b60      	ldr	r3, [pc, #384]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001708:	d0b8      	beq.n	800167c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170a:	f7fe ff5f 	bl	80005cc <HAL_GetTick>
 800170e:	1b40      	subs	r0, r0, r5
 8001710:	2864      	cmp	r0, #100	; 0x64
 8001712:	d9f5      	bls.n	8001700 <HAL_RCC_OscConfig+0x138>
            return HAL_TIMEOUT;
 8001714:	2003      	movs	r0, #3
 8001716:	e1bc      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001718:	f44f 7190 	mov.w	r1, #288	; 0x120
 800171c:	4858      	ldr	r0, [pc, #352]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 800171e:	f005 fcfe 	bl	800711e <assert_failed>
 8001722:	e7ba      	b.n	800169a <HAL_RCC_OscConfig+0xd2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001724:	4b57      	ldr	r3, [pc, #348]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800172c:	d1c0      	bne.n	80016b0 <HAL_RCC_OscConfig+0xe8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b55      	ldr	r3, [pc, #340]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f013 0f02 	tst.w	r3, #2
 8001736:	d004      	beq.n	8001742 <HAL_RCC_OscConfig+0x17a>
 8001738:	68e3      	ldr	r3, [r4, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x17a>
        return HAL_ERROR;
 800173e:	2001      	movs	r0, #1
 8001740:	e1a7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800174a:	6921      	ldr	r1, [r4, #16]
 800174c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001750:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	f013 0f08 	tst.w	r3, #8
 8001758:	d048      	beq.n	80017ec <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800175a:	6963      	ldr	r3, [r4, #20]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d904      	bls.n	800176a <HAL_RCC_OscConfig+0x1a2>
 8001760:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001764:	4846      	ldr	r0, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 8001766:	f005 fcda 	bl	800711e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176a:	6963      	ldr	r3, [r4, #20]
 800176c:	b363      	cbz	r3, 80017c8 <HAL_RCC_OscConfig+0x200>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	2201      	movs	r2, #1
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_RCC_OscConfig+0x2c4>)
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7fe ff2a 	bl	80005cc <HAL_GetTick>
 8001778:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b42      	ldr	r3, [pc, #264]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	f013 0f02 	tst.w	r3, #2
 8001782:	d133      	bne.n	80017ec <HAL_RCC_OscConfig+0x224>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7fe ff22 	bl	80005cc <HAL_GetTick>
 8001788:	1b40      	subs	r0, r0, r5
 800178a:	2802      	cmp	r0, #2
 800178c:	d9f5      	bls.n	800177a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e17f      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4a3c      	ldr	r2, [pc, #240]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001794:	6813      	ldr	r3, [r2, #0]
 8001796:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800179a:	6921      	ldr	r1, [r4, #16]
 800179c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e7d6      	b.n	8001752 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80017a4:	2200      	movs	r2, #0
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_RCC_OscConfig+0x2c0>)
 80017a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017aa:	f7fe ff0f 	bl	80005cc <HAL_GetTick>
 80017ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b0:	4b34      	ldr	r3, [pc, #208]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f013 0f02 	tst.w	r3, #2
 80017b8:	d0cb      	beq.n	8001752 <HAL_RCC_OscConfig+0x18a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ba:	f7fe ff07 	bl	80005cc <HAL_GetTick>
 80017be:	1b40      	subs	r0, r0, r5
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f5      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1e8>
            return HAL_TIMEOUT;
 80017c4:	2003      	movs	r0, #3
 80017c6:	e164      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	2200      	movs	r2, #0
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x2c4>)
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7fe fefd 	bl	80005cc <HAL_GetTick>
 80017d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	f013 0f02 	tst.w	r3, #2
 80017dc:	d006      	beq.n	80017ec <HAL_RCC_OscConfig+0x224>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7fe fef5 	bl	80005cc <HAL_GetTick>
 80017e2:	1b40      	subs	r0, r0, r5
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9f5      	bls.n	80017d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80017e8:	2003      	movs	r0, #3
 80017ea:	e152      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	f013 0f04 	tst.w	r3, #4
 80017f2:	f000 8085 	beq.w	8001900 <HAL_RCC_OscConfig+0x338>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80017f6:	68a3      	ldr	r3, [r4, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d906      	bls.n	800180a <HAL_RCC_OscConfig+0x242>
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d004      	beq.n	800180a <HAL_RCC_OscConfig+0x242>
 8001800:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001804:	481e      	ldr	r0, [pc, #120]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 8001806:	f005 fc8a 	bl	800711e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001812:	d133      	bne.n	800187c <HAL_RCC_OscConfig+0x2b4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 800181a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800182c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_RCC_OscConfig+0x2c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001836:	d02d      	beq.n	8001894 <HAL_RCC_OscConfig+0x2cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	68a3      	ldr	r3, [r4, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d03e      	beq.n	80018bc <HAL_RCC_OscConfig+0x2f4>
 800183e:	2b05      	cmp	r3, #5
 8001840:	d042      	beq.n	80018c8 <HAL_RCC_OscConfig+0x300>
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001844:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	671a      	str	r2, [r3, #112]	; 0x70
 800184c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800184e:	f022 0204 	bic.w	r2, r2, #4
 8001852:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001854:	68a3      	ldr	r3, [r4, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d040      	beq.n	80018dc <HAL_RCC_OscConfig+0x314>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7fe feb7 	bl	80005cc <HAL_GetTick>
 800185e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_RCC_OscConfig+0x2bc>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	f013 0f02 	tst.w	r3, #2
 8001868:	d149      	bne.n	80018fe <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7fe feaf 	bl	80005cc <HAL_GetTick>
 800186e:	1b80      	subs	r0, r0, r6
 8001870:	f241 3388 	movw	r3, #5000	; 0x1388
 8001874:	4298      	cmp	r0, r3
 8001876:	d9f3      	bls.n	8001860 <HAL_RCC_OscConfig+0x298>
        {
          return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	e10a      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 800187c:	2500      	movs	r5, #0
 800187e:	e7d6      	b.n	800182e <HAL_RCC_OscConfig+0x266>
 8001880:	080087bc 	.word	0x080087bc
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
 8001890:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001894:	4a82      	ldr	r2, [pc, #520]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800189e:	f7fe fe95 	bl	80005cc <HAL_GetTick>
 80018a2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b7e      	ldr	r3, [pc, #504]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018ac:	d1c4      	bne.n	8001838 <HAL_RCC_OscConfig+0x270>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7fe fe8d 	bl	80005cc <HAL_GetTick>
 80018b2:	1b80      	subs	r0, r0, r6
 80018b4:	2802      	cmp	r0, #2
 80018b6:	d9f5      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2dc>
          return HAL_TIMEOUT;
 80018b8:	2003      	movs	r0, #3
 80018ba:	e0ea      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	4a79      	ldr	r2, [pc, #484]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 80018be:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	e7c5      	b.n	8001854 <HAL_RCC_OscConfig+0x28c>
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 80018ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018cc:	f042 0204 	orr.w	r2, r2, #4
 80018d0:	671a      	str	r2, [r3, #112]	; 0x70
 80018d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	671a      	str	r2, [r3, #112]	; 0x70
 80018da:	e7bb      	b.n	8001854 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7fe fe76 	bl	80005cc <HAL_GetTick>
 80018e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	f013 0f02 	tst.w	r3, #2
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7fe fe6e 	bl	80005cc <HAL_GetTick>
 80018f0:	1b80      	subs	r0, r0, r6
 80018f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80018f6:	4298      	cmp	r0, r3
 80018f8:	d9f3      	bls.n	80018e2 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 80018fa:	2003      	movs	r0, #3
 80018fc:	e0c9      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fe:	bb0d      	cbnz	r5, 8001944 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001900:	69a3      	ldr	r3, [r4, #24]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d824      	bhi.n	8001950 <HAL_RCC_OscConfig+0x388>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001906:	69a3      	ldr	r3, [r4, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80c1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190e:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001910:	6892      	ldr	r2, [r2, #8]
 8001912:	f002 020c 	and.w	r2, r2, #12
 8001916:	2a08      	cmp	r2, #8
 8001918:	f000 808e 	beq.w	8001a38 <HAL_RCC_OscConfig+0x470>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	2b02      	cmp	r3, #2
 800191e:	d01d      	beq.n	800195c <HAL_RCC_OscConfig+0x394>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	2200      	movs	r2, #0
 8001922:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x4e0>)
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7fe fe51 	bl	80005cc <HAL_GetTick>
 800192a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001934:	d07e      	beq.n	8001a34 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7fe fe49 	bl	80005cc <HAL_GetTick>
 800193a:	1b00      	subs	r0, r0, r4
 800193c:	2802      	cmp	r0, #2
 800193e:	d9f5      	bls.n	800192c <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 8001940:	2003      	movs	r0, #3
 8001942:	e0a6      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001946:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	e7d7      	b.n	8001900 <HAL_RCC_OscConfig+0x338>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001950:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001954:	4855      	ldr	r0, [pc, #340]	; (8001aac <HAL_RCC_OscConfig+0x4e4>)
 8001956:	f005 fbe2 	bl	800711e <assert_failed>
 800195a:	e7d4      	b.n	8001906 <HAL_RCC_OscConfig+0x33e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800195c:	69e3      	ldr	r3, [r4, #28]
 800195e:	b13b      	cbz	r3, 8001970 <HAL_RCC_OscConfig+0x3a8>
 8001960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001964:	d004      	beq.n	8001970 <HAL_RCC_OscConfig+0x3a8>
 8001966:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800196a:	4850      	ldr	r0, [pc, #320]	; (8001aac <HAL_RCC_OscConfig+0x4e4>)
 800196c:	f005 fbd7 	bl	800711e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001970:	6a23      	ldr	r3, [r4, #32]
 8001972:	2b3f      	cmp	r3, #63	; 0x3f
 8001974:	d828      	bhi.n	80019c8 <HAL_RCC_OscConfig+0x400>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001978:	3b32      	subs	r3, #50	; 0x32
 800197a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800197e:	d829      	bhi.n	80019d4 <HAL_RCC_OscConfig+0x40c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001982:	2b02      	cmp	r3, #2
 8001984:	d00a      	beq.n	800199c <HAL_RCC_OscConfig+0x3d4>
 8001986:	2b04      	cmp	r3, #4
 8001988:	d008      	beq.n	800199c <HAL_RCC_OscConfig+0x3d4>
 800198a:	2b06      	cmp	r3, #6
 800198c:	d006      	beq.n	800199c <HAL_RCC_OscConfig+0x3d4>
 800198e:	2b08      	cmp	r3, #8
 8001990:	d004      	beq.n	800199c <HAL_RCC_OscConfig+0x3d4>
 8001992:	f240 11db 	movw	r1, #475	; 0x1db
 8001996:	4845      	ldr	r0, [pc, #276]	; (8001aac <HAL_RCC_OscConfig+0x4e4>)
 8001998:	f005 fbc1 	bl	800711e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800199c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800199e:	3b02      	subs	r3, #2
 80019a0:	2b0d      	cmp	r3, #13
 80019a2:	d81d      	bhi.n	80019e0 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_DISABLE();
 80019a4:	2200      	movs	r2, #0
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x4e0>)
 80019a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019aa:	f7fe fe0f 	bl	80005cc <HAL_GetTick>
 80019ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019b8:	d018      	beq.n	80019ec <HAL_RCC_OscConfig+0x424>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7fe fe07 	bl	80005cc <HAL_GetTick>
 80019be:	1b40      	subs	r0, r0, r5
 80019c0:	2802      	cmp	r0, #2
 80019c2:	d9f5      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3e8>
            return HAL_TIMEOUT;
 80019c4:	2003      	movs	r0, #3
 80019c6:	e064      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80019c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80019cc:	4837      	ldr	r0, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x4e4>)
 80019ce:	f005 fba6 	bl	800711e <assert_failed>
 80019d2:	e7d0      	b.n	8001976 <HAL_RCC_OscConfig+0x3ae>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80019d4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80019d8:	4834      	ldr	r0, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x4e4>)
 80019da:	f005 fba0 	bl	800711e <assert_failed>
 80019de:	e7cf      	b.n	8001980 <HAL_RCC_OscConfig+0x3b8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80019e0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80019e4:	4831      	ldr	r0, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x4e4>)
 80019e6:	f005 fb9a 	bl	800711e <assert_failed>
 80019ea:	e7db      	b.n	80019a4 <HAL_RCC_OscConfig+0x3dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ec:	69e3      	ldr	r3, [r4, #28]
 80019ee:	6a22      	ldr	r2, [r4, #32]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019fa:	0852      	lsrs	r2, r2, #1
 80019fc:	3a01      	subs	r2, #1
 80019fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001a0a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_RCC_OscConfig+0x4e0>)
 8001a10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a12:	f7fe fddb 	bl	80005cc <HAL_GetTick>
 8001a16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a20:	d106      	bne.n	8001a30 <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7fe fdd3 	bl	80005cc <HAL_GetTick>
 8001a26:	1b00      	subs	r0, r0, r4
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d9f5      	bls.n	8001a18 <HAL_RCC_OscConfig+0x450>
            return HAL_TIMEOUT;
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	e030      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	e02e      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
 8001a34:	2000      	movs	r0, #0
 8001a36:	e02c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d02c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x4ce>
        pll_config = RCC->CFGR;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001a44:	69e2      	ldr	r2, [r4, #28]
 8001a46:	4291      	cmp	r1, r2
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x486>
          return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	e021      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a52:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x494>
          return HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
 8001a5a:	e01a      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a5e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001a62:	401a      	ands	r2, r3
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4a4>
          return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
 8001a6a:	e012      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a72:	428a      	cmp	r2, r1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4b2>
          return HAL_ERROR;
 8001a76:	2001      	movs	r0, #1
 8001a78:	e00b      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a7a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001a7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00a      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4d2>
          return HAL_ERROR;
 8001a84:	2001      	movs	r0, #1
 8001a86:	e004      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
 8001a8a:	4770      	bx	lr
        return HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
}
 8001a92:	b002      	add	sp, #8
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
 8001a98:	e7fb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e7f9      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470060 	.word	0x42470060
 8001aac:	080087bc 	.word	0x080087bc

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d059      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0xc2>
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac2:	482e      	ldr	r0, [pc, #184]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ad4:	d02a      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ade:	461e      	mov	r6, r3
 8001ae0:	2700      	movs	r7, #0
 8001ae2:	015c      	lsls	r4, r3, #5
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	1ae4      	subs	r4, r4, r3
 8001ae8:	eb65 0507 	sbc.w	r5, r5, r7
 8001aec:	01a9      	lsls	r1, r5, #6
 8001aee:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001af2:	01a0      	lsls	r0, r4, #6
 8001af4:	1b00      	subs	r0, r0, r4
 8001af6:	eb61 0105 	sbc.w	r1, r1, r5
 8001afa:	00cb      	lsls	r3, r1, #3
 8001afc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b00:	00c4      	lsls	r4, r0, #3
 8001b02:	19a0      	adds	r0, r4, r6
 8001b04:	eb43 0107 	adc.w	r1, r3, r7
 8001b08:	024b      	lsls	r3, r1, #9
 8001b0a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001b0e:	0244      	lsls	r4, r0, #9
 8001b10:	4620      	mov	r0, r4
 8001b12:	4619      	mov	r1, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	f7fe fbab 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001b26:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001b34:	461e      	mov	r6, r3
 8001b36:	2700      	movs	r7, #0
 8001b38:	015c      	lsls	r4, r3, #5
 8001b3a:	2500      	movs	r5, #0
 8001b3c:	1ae4      	subs	r4, r4, r3
 8001b3e:	eb65 0507 	sbc.w	r5, r5, r7
 8001b42:	01a9      	lsls	r1, r5, #6
 8001b44:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001b48:	01a0      	lsls	r0, r4, #6
 8001b4a:	1b00      	subs	r0, r0, r4
 8001b4c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b50:	00cb      	lsls	r3, r1, #3
 8001b52:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b56:	00c4      	lsls	r4, r0, #3
 8001b58:	19a0      	adds	r0, r4, r6
 8001b5a:	eb43 0107 	adc.w	r1, r3, r7
 8001b5e:	028b      	lsls	r3, r1, #10
 8001b60:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001b64:	0284      	lsls	r4, r0, #10
 8001b66:	4620      	mov	r0, r4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f7fe fb80 	bl	8000270 <__aeabi_uldivmod>
 8001b70:	e7d3      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001b84:	2800      	cmp	r0, #0
 8001b86:	f000 80f7 	beq.w	8001d78 <HAL_RCC_ClockConfig+0x1f4>
{
 8001b8a:	b570      	push	{r4, r5, r6, lr}
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001b90:	6803      	ldr	r3, [r0, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	2b0e      	cmp	r3, #14
 8001b96:	d811      	bhi.n	8001bbc <HAL_RCC_ClockConfig+0x38>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001b98:	2d07      	cmp	r5, #7
 8001b9a:	d815      	bhi.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <HAL_RCC_ClockConfig+0x1fc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	429d      	cmp	r5, r3
 8001ba6:	d915      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x50>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba8:	b2eb      	uxtb	r3, r5
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_ClockConfig+0x1fc>)
 8001bac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	429d      	cmp	r5, r3
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x50>
      return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001bbc:	f240 2151 	movw	r1, #593	; 0x251
 8001bc0:	4870      	ldr	r0, [pc, #448]	; (8001d84 <HAL_RCC_ClockConfig+0x200>)
 8001bc2:	f005 faac 	bl	800711e <assert_failed>
 8001bc6:	e7e7      	b.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001bc8:	f240 2152 	movw	r1, #594	; 0x252
 8001bcc:	486d      	ldr	r0, [pc, #436]	; (8001d84 <HAL_RCC_ClockConfig+0x200>)
 8001bce:	f005 faa6 	bl	800711e <assert_failed>
 8001bd2:	e7e3      	b.n	8001b9c <HAL_RCC_ClockConfig+0x18>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f013 0f02 	tst.w	r3, #2
 8001bda:	d02e      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	f013 0f04 	tst.w	r3, #4
 8001be0:	d004      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be2:	4a69      	ldr	r2, [pc, #420]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001be4:	6893      	ldr	r3, [r2, #8]
 8001be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bea:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	f013 0f08 	tst.w	r3, #8
 8001bf2:	d004      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4a64      	ldr	r2, [pc, #400]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001bf6:	6893      	ldr	r3, [r2, #8]
 8001bf8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bfc:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001bfe:	68a3      	ldr	r3, [r4, #8]
 8001c00:	b1a3      	cbz	r3, 8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c02:	2b80      	cmp	r3, #128	; 0x80
 8001c04:	d012      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c06:	2b90      	cmp	r3, #144	; 0x90
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c0a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c0c:	d00e      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c0e:	2bb0      	cmp	r3, #176	; 0xb0
 8001c10:	d00c      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c12:	2bc0      	cmp	r3, #192	; 0xc0
 8001c14:	d00a      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c16:	2bd0      	cmp	r3, #208	; 0xd0
 8001c18:	d008      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c1a:	2be0      	cmp	r3, #224	; 0xe0
 8001c1c:	d006      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c1e:	2bf0      	cmp	r3, #240	; 0xf0
 8001c20:	d004      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
 8001c22:	f240 2175 	movw	r1, #629	; 0x275
 8001c26:	4857      	ldr	r0, [pc, #348]	; (8001d84 <HAL_RCC_ClockConfig+0x200>)
 8001c28:	f005 fa79 	bl	800711e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001c2e:	6893      	ldr	r3, [r2, #8]
 8001c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c34:	68a1      	ldr	r1, [r4, #8]
 8001c36:	430b      	orrs	r3, r1
 8001c38:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f013 0f01 	tst.w	r3, #1
 8001c40:	d03c      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001c42:	6863      	ldr	r3, [r4, #4]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d825      	bhi.n	8001c94 <HAL_RCC_ClockConfig+0x110>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	6863      	ldr	r3, [r4, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d028      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x11c>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	1e9a      	subs	r2, r3, #2
 8001c50:	2a01      	cmp	r2, #1
 8001c52:	d92c      	bls.n	8001cae <HAL_RCC_ClockConfig+0x12a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	f012 0f02 	tst.w	r2, #2
 8001c5c:	f000 808e 	beq.w	8001d7c <HAL_RCC_ClockConfig+0x1f8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c60:	4949      	ldr	r1, [pc, #292]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001c62:	688a      	ldr	r2, [r1, #8]
 8001c64:	f022 0203 	bic.w	r2, r2, #3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001c6c:	f7fe fcae 	bl	80005cc <HAL_GetTick>
 8001c70:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	6862      	ldr	r2, [r4, #4]
 8001c7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c80:	d01c      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x138>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7fe fca3 	bl	80005cc <HAL_GetTick>
 8001c86:	1b80      	subs	r0, r0, r6
 8001c88:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c8c:	4298      	cmp	r0, r3
 8001c8e:	d9f0      	bls.n	8001c72 <HAL_RCC_ClockConfig+0xee>
        return HAL_TIMEOUT;
 8001c90:	2003      	movs	r0, #3
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001c94:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8001c98:	483a      	ldr	r0, [pc, #232]	; (8001d84 <HAL_RCC_ClockConfig+0x200>)
 8001c9a:	f005 fa40 	bl	800711e <assert_failed>
 8001c9e:	e7d3      	b.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca0:	4a39      	ldr	r2, [pc, #228]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001ca8:	d1da      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xdc>
        return HAL_ERROR;
 8001caa:	2001      	movs	r0, #1
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4a36      	ldr	r2, [pc, #216]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001cb6:	d1d3      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xdc>
        return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_ClockConfig+0x1fc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	429d      	cmp	r5, r3
 8001cc6:	d209      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc8:	b2ea      	uxtb	r2, r5
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_ClockConfig+0x1fc>)
 8001ccc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	429d      	cmp	r5, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x158>
      return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
}
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f013 0f04 	tst.w	r3, #4
 8001ce2:	d019      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x194>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ce4:	68e3      	ldr	r3, [r4, #12]
 8001ce6:	b183      	cbz	r3, 8001d0a <HAL_RCC_ClockConfig+0x186>
 8001ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cec:	d00d      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x186>
 8001cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x186>
 8001cf4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001cf8:	d007      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x186>
 8001cfa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001cfe:	d004      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x186>
 8001d00:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001d04:	481f      	ldr	r0, [pc, #124]	; (8001d84 <HAL_RCC_ClockConfig+0x200>)
 8001d06:	f005 fa0a 	bl	800711e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001d0c:	6893      	ldr	r3, [r2, #8]
 8001d0e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d12:	68e1      	ldr	r1, [r4, #12]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	f013 0f08 	tst.w	r3, #8
 8001d1e:	d01a      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x1d2>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001d20:	6923      	ldr	r3, [r4, #16]
 8001d22:	b183      	cbz	r3, 8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d28:	d00d      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d30:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d34:	d007      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d36:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001d3a:	d004      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d3c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8001d40:	4810      	ldr	r0, [pc, #64]	; (8001d84 <HAL_RCC_ClockConfig+0x200>)
 8001d42:	f005 f9ec 	bl	800711e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001d48:	6893      	ldr	r3, [r2, #8]
 8001d4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d4e:	6921      	ldr	r1, [r4, #16]
 8001d50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d54:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d56:	f7ff feab 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_ClockConfig+0x204>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x208>)
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
 8001d66:	40d8      	lsrs	r0, r3
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x20c>)
 8001d6a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x210>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	f005 fa18 	bl	80071a4 <HAL_InitTick>
  return HAL_OK;
 8001d74:	2000      	movs	r0, #0
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	4770      	bx	lr
        return HAL_ERROR;
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	40023c00 	.word	0x40023c00
 8001d84:	080087bc 	.word	0x080087bc
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08009008 	.word	0x08009008
 8001d90:	2000002c 	.word	0x2000002c
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	2000002c 	.word	0x2000002c

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da6:	f7ff fff7 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001db2:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001db6:	40d8      	lsrs	r0, r3
 8001db8:	bd08      	pop	{r3, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08009018 	.word	0x08009018

08001dc4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_GetClockConfig+0x34>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001dd8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001de0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001dea:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetClockConfig+0x38>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	600b      	str	r3, [r1, #0]
 8001df6:	4770      	bx	lr
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e00:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e02:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e04:	6a04      	ldr	r4, [r0, #32]
 8001e06:	f024 0401 	bic.w	r4, r4, #1
 8001e0a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e0c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e0e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e12:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e16:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001e1a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e1c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e1e:	6203      	str	r3, [r0, #32]
}
 8001e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e26:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e28:	6a03      	ldr	r3, [r0, #32]
 8001e2a:	f023 0310 	bic.w	r3, r3, #16
 8001e2e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e30:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e32:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e34:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e38:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e40:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e44:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e46:	6203      	str	r3, [r0, #32]
}
 8001e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e4e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e54:	4319      	orrs	r1, r3
 8001e56:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e5a:	6081      	str	r1, [r0, #8]
 8001e5c:	4770      	bx	lr
	...

08001e60 <TIM_OC1_SetConfig>:
{
 8001e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e64:	4604      	mov	r4, r0
 8001e66:	460f      	mov	r7, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e68:	6a03      	ldr	r3, [r0, #32]
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e70:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e72:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e76:	6986      	ldr	r6, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e78:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e7c:	680b      	ldr	r3, [r1, #0]
 8001e7e:	431e      	orrs	r6, r3
  tmpccer &= ~TIM_CCER_CC1P;
 8001e80:	f025 0502 	bic.w	r5, r5, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e84:	688b      	ldr	r3, [r1, #8]
 8001e86:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TIM_OC1_SetConfig+0xb4>)
 8001e8a:	4298      	cmp	r0, r3
 8001e8c:	d012      	beq.n	8001eb4 <TIM_OC1_SetConfig+0x54>
 8001e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e92:	4298      	cmp	r0, r3
 8001e94:	d00e      	beq.n	8001eb4 <TIM_OC1_SetConfig+0x54>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <TIM_OC1_SetConfig+0xb4>)
 8001e98:	429c      	cmp	r4, r3
 8001e9a:	d01b      	beq.n	8001ed4 <TIM_OC1_SetConfig+0x74>
 8001e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea0:	429c      	cmp	r4, r3
 8001ea2:	d017      	beq.n	8001ed4 <TIM_OC1_SetConfig+0x74>
  TIMx->CR2 = tmpcr2;
 8001ea4:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ea8:	61a6      	str	r6, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001eae:	6225      	str	r5, [r4, #32]
 8001eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	b133      	cbz	r3, 8001ec6 <TIM_OC1_SetConfig+0x66>
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d004      	beq.n	8001ec6 <TIM_OC1_SetConfig+0x66>
 8001ebc:	f241 7102 	movw	r1, #5890	; 0x1702
 8001ec0:	4815      	ldr	r0, [pc, #84]	; (8001f18 <TIM_OC1_SetConfig+0xb8>)
 8001ec2:	f005 f92c 	bl	800711e <assert_failed>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ec6:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	431d      	orrs	r5, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ece:	f025 0504 	bic.w	r5, r5, #4
 8001ed2:	e7e0      	b.n	8001e96 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eda:	d000      	beq.n	8001ede <TIM_OC1_SetConfig+0x7e>
 8001edc:	b96b      	cbnz	r3, 8001efa <TIM_OC1_SetConfig+0x9a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee4:	d000      	beq.n	8001ee8 <TIM_OC1_SetConfig+0x88>
 8001ee6:	b973      	cbnz	r3, 8001f06 <TIM_OC1_SetConfig+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ee8:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	ea48 0803 	orr.w	r8, r8, r3
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	ea48 0803 	orr.w	r8, r8, r3
 8001ef8:	e7d4      	b.n	8001ea4 <TIM_OC1_SetConfig+0x44>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8001efa:	f241 710f 	movw	r1, #5903	; 0x170f
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <TIM_OC1_SetConfig+0xb8>)
 8001f00:	f005 f90d 	bl	800711e <assert_failed>
 8001f04:	e7eb      	b.n	8001ede <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8001f06:	f241 7110 	movw	r1, #5904	; 0x1710
 8001f0a:	4803      	ldr	r0, [pc, #12]	; (8001f18 <TIM_OC1_SetConfig+0xb8>)
 8001f0c:	f005 f907 	bl	800711e <assert_failed>
 8001f10:	e7ea      	b.n	8001ee8 <TIM_OC1_SetConfig+0x88>
 8001f12:	bf00      	nop
 8001f14:	40010000 	.word	0x40010000
 8001f18:	080087f4 	.word	0x080087f4

08001f1c <TIM_OC3_SetConfig>:
{
 8001f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f20:	4604      	mov	r4, r0
 8001f22:	460f      	mov	r7, r1
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f24:	6a03      	ldr	r3, [r0, #32]
 8001f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001f2c:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001f2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001f32:	69c6      	ldr	r6, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f34:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f38:	680b      	ldr	r3, [r1, #0]
 8001f3a:	431e      	orrs	r6, r3
  tmpccer &= ~TIM_CCER_CC3P;
 8001f3c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f40:	688b      	ldr	r3, [r1, #8]
 8001f42:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <TIM_OC3_SetConfig+0xb8>)
 8001f48:	4298      	cmp	r0, r3
 8001f4a:	d012      	beq.n	8001f72 <TIM_OC3_SetConfig+0x56>
 8001f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f50:	4298      	cmp	r0, r3
 8001f52:	d00e      	beq.n	8001f72 <TIM_OC3_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <TIM_OC3_SetConfig+0xb8>)
 8001f56:	429c      	cmp	r4, r3
 8001f58:	d01c      	beq.n	8001f94 <TIM_OC3_SetConfig+0x78>
 8001f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5e:	429c      	cmp	r4, r3
 8001f60:	d018      	beq.n	8001f94 <TIM_OC3_SetConfig+0x78>
  TIMx->CR2 = tmpcr2;
 8001f62:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f66:	61e6      	str	r6, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001f6c:	6225      	str	r5, [r4, #32]
 8001f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	b133      	cbz	r3, 8001f84 <TIM_OC3_SetConfig+0x68>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d004      	beq.n	8001f84 <TIM_OC3_SetConfig+0x68>
 8001f7a:	f241 7198 	movw	r1, #6040	; 0x1798
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <TIM_OC3_SetConfig+0xbc>)
 8001f80:	f005 f8cd 	bl	800711e <assert_failed>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f84:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f8e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8001f92:	e7df      	b.n	8001f54 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9a:	d000      	beq.n	8001f9e <TIM_OC3_SetConfig+0x82>
 8001f9c:	b96b      	cbnz	r3, 8001fba <TIM_OC3_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa4:	d000      	beq.n	8001fa8 <TIM_OC3_SetConfig+0x8c>
 8001fa6:	b973      	cbnz	r3, 8001fc6 <TIM_OC3_SetConfig+0xaa>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fa8:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 8001fb8:	e7d3      	b.n	8001f62 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8001fba:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <TIM_OC3_SetConfig+0xbc>)
 8001fc0:	f005 f8ad 	bl	800711e <assert_failed>
 8001fc4:	e7eb      	b.n	8001f9e <TIM_OC3_SetConfig+0x82>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8001fc6:	f241 71a6 	movw	r1, #6054	; 0x17a6
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <TIM_OC3_SetConfig+0xbc>)
 8001fcc:	f005 f8a7 	bl	800711e <assert_failed>
 8001fd0:	e7ea      	b.n	8001fa8 <TIM_OC3_SetConfig+0x8c>
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	080087f4 	.word	0x080087f4

08001fdc <TIM_OC4_SetConfig>:
{
 8001fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	460f      	mov	r7, r1
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fe4:	6a03      	ldr	r3, [r0, #32]
 8001fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fea:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001fec:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001fee:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001ff2:	69c6      	ldr	r6, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ff4:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff8:	680b      	ldr	r3, [r1, #0]
 8001ffa:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 8001ffe:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002002:	688b      	ldr	r3, [r1, #8]
 8002004:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <TIM_OC4_SetConfig+0x6c>)
 800200a:	4298      	cmp	r0, r3
 800200c:	d00b      	beq.n	8002026 <TIM_OC4_SetConfig+0x4a>
 800200e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002012:	4298      	cmp	r0, r3
 8002014:	d007      	beq.n	8002026 <TIM_OC4_SetConfig+0x4a>
  TIMx->CR2 = tmpcr2;
 8002016:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800201a:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002020:	6225      	str	r5, [r4, #32]
 8002022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202c:	d000      	beq.n	8002030 <TIM_OC4_SetConfig+0x54>
 800202e:	b92b      	cbnz	r3, 800203c <TIM_OC4_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002030:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
 800203a:	e7ec      	b.n	8002016 <TIM_OC4_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800203c:	f241 71e4 	movw	r1, #6116	; 0x17e4
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM_OC4_SetConfig+0x70>)
 8002042:	f005 f86c 	bl	800711e <assert_failed>
 8002046:	e7f3      	b.n	8002030 <TIM_OC4_SetConfig+0x54>
 8002048:	40010000 	.word	0x40010000
 800204c:	080087f4 	.word	0x080087f4

08002050 <HAL_TIM_Base_Start_IT>:
{
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002054:	6803      	ldr	r3, [r0, #0]
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d037      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d034      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 8002062:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002066:	4293      	cmp	r3, r2
 8002068:	d030      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 800206a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800206e:	4293      	cmp	r3, r2
 8002070:	d02c      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 8002072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002076:	4293      	cmp	r3, r2
 8002078:	d028      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 800207a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800207e:	4293      	cmp	r3, r2
 8002080:	d024      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 8002082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002086:	4293      	cmp	r3, r2
 8002088:	d020      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 800208a:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800208e:	4293      	cmp	r3, r2
 8002090:	d01c      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 8002092:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002096:	4293      	cmp	r3, r2
 8002098:	d018      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 800209a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209e:	4293      	cmp	r3, r2
 80020a0:	d014      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 80020a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d010      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 80020aa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 80020ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x7c>
 80020c2:	f240 11b9 	movw	r1, #441	; 0x1b9
 80020c6:	480b      	ldr	r0, [pc, #44]	; (80020f4 <HAL_TIM_Base_Start_IT+0xa4>)
 80020c8:	f005 f829 	bl	800711e <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	68d3      	ldr	r3, [r2, #12]
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	6893      	ldr	r3, [r2, #8]
 80020da:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_Base_Start_IT+0x9a>
    __HAL_TIM_ENABLE(htim);
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	2000      	movs	r0, #0
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000
 80020f4:	080087f4 	.word	0x080087f4

080020f8 <HAL_TIM_OC_MspInit>:
{
 80020f8:	4770      	bx	lr

080020fa <HAL_TIM_OC_DelayElapsedCallback>:
{
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_IC_CaptureCallback>:
{
 80020fc:	4770      	bx	lr

080020fe <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_TriggerCallback>:
{
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_IRQHandler>:
{
 8002102:	b510      	push	{r4, lr}
 8002104:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002106:	6803      	ldr	r3, [r0, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	f012 0f02 	tst.w	r2, #2
 800210e:	d011      	beq.n	8002134 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	f012 0f02 	tst.w	r2, #2
 8002116:	d00d      	beq.n	8002134 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002118:	f06f 0202 	mvn.w	r2, #2
 800211c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	2301      	movs	r3, #1
 8002120:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f013 0f03 	tst.w	r3, #3
 800212a:	d070      	beq.n	800220e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800212c:	f7ff ffe6 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002130:	2300      	movs	r3, #0
 8002132:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	f012 0f04 	tst.w	r2, #4
 800213c:	d012      	beq.n	8002164 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	f012 0f04 	tst.w	r2, #4
 8002144:	d00e      	beq.n	8002164 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002146:	f06f 0204 	mvn.w	r2, #4
 800214a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214c:	2302      	movs	r3, #2
 800214e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002158:	d05f      	beq.n	800221a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ffce 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002160:	2300      	movs	r3, #0
 8002162:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	f012 0f08 	tst.w	r2, #8
 800216c:	d012      	beq.n	8002194 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	f012 0f08 	tst.w	r2, #8
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002176:	f06f 0208 	mvn.w	r2, #8
 800217a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800217c:	2304      	movs	r3, #4
 800217e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f013 0f03 	tst.w	r3, #3
 8002188:	d04e      	beq.n	8002228 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff ffb6 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002190:	2300      	movs	r3, #0
 8002192:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	f012 0f10 	tst.w	r2, #16
 800219c:	d012      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	f012 0f10 	tst.w	r2, #16
 80021a4:	d00e      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a6:	f06f 0210 	mvn.w	r2, #16
 80021aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ac:	2308      	movs	r3, #8
 80021ae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021b8:	d03d      	beq.n	8002236 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7ff ff9e 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c0:	2300      	movs	r3, #0
 80021c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	f012 0f01 	tst.w	r2, #1
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	f012 0f01 	tst.w	r2, #1
 80021d4:	d136      	bne.n	8002244 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80021de:	d003      	beq.n	80021e8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80021e6:	d134      	bne.n	8002252 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80021f8:	d132      	bne.n	8002260 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	f012 0f20 	tst.w	r2, #32
 8002202:	d003      	beq.n	800220c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	f012 0f20 	tst.w	r2, #32
 800220a:	d130      	bne.n	800226e <HAL_TIM_IRQHandler+0x16c>
 800220c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	f7ff ff74 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff ff73 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
 8002218:	e78a      	b.n	8002130 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff ff6d 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ff6c 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
 8002226:	e79b      	b.n	8002160 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002228:	4620      	mov	r0, r4
 800222a:	f7ff ff66 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff65 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
 8002234:	e7ac      	b.n	8002190 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff5f 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff ff5e 	bl	80020fe <HAL_TIM_PWM_PulseFinishedCallback>
 8002242:	e7bd      	b.n	80021c0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002244:	f06f 0201 	mvn.w	r2, #1
 8002248:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800224a:	4620      	mov	r0, r4
 800224c:	f004 ff4e 	bl	80070ec <HAL_TIM_PeriodElapsedCallback>
 8002250:	e7c1      	b.n	80021d6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002252:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002256:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002258:	4620      	mov	r0, r4
 800225a:	f000 fda2 	bl	8002da2 <HAL_TIMEx_BreakCallback>
 800225e:	e7c3      	b.n	80021e8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002264:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff ff4a 	bl	8002100 <HAL_TIM_TriggerCallback>
 800226c:	e7c5      	b.n	80021fa <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800226e:	f06f 0220 	mvn.w	r2, #32
 8002272:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002274:	4620      	mov	r0, r4
 8002276:	f000 fd93 	bl	8002da0 <HAL_TIMEx_CommutCallback>
}
 800227a:	e7c7      	b.n	800220c <HAL_TIM_IRQHandler+0x10a>

0800227c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800227c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <TIM_Base_SetConfig+0xc8>)
 8002280:	4290      	cmp	r0, r2
 8002282:	d012      	beq.n	80022aa <TIM_Base_SetConfig+0x2e>
 8002284:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002288:	d00f      	beq.n	80022aa <TIM_Base_SetConfig+0x2e>
 800228a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800228e:	4290      	cmp	r0, r2
 8002290:	d00b      	beq.n	80022aa <TIM_Base_SetConfig+0x2e>
 8002292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002296:	4290      	cmp	r0, r2
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0x2e>
 800229a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800229e:	4290      	cmp	r0, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0x2e>
 80022a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022a6:	4290      	cmp	r0, r2
 80022a8:	d103      	bne.n	80022b2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022ae:	684a      	ldr	r2, [r1, #4]
 80022b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	4a24      	ldr	r2, [pc, #144]	; (8002344 <TIM_Base_SetConfig+0xc8>)
 80022b4:	4290      	cmp	r0, r2
 80022b6:	d02a      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022bc:	d027      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80022c2:	4290      	cmp	r0, r2
 80022c4:	d023      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ca:	4290      	cmp	r0, r2
 80022cc:	d01f      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d2:	4290      	cmp	r0, r2
 80022d4:	d01b      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022da:	4290      	cmp	r0, r2
 80022dc:	d017      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022de:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80022e2:	4290      	cmp	r0, r2
 80022e4:	d013      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ea:	4290      	cmp	r0, r2
 80022ec:	d00f      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f2:	4290      	cmp	r0, r2
 80022f4:	d00b      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022f6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d007      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 80022fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002302:	4290      	cmp	r0, r2
 8002304:	d003      	beq.n	800230e <TIM_Base_SetConfig+0x92>
 8002306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800230a:	4290      	cmp	r0, r2
 800230c:	d103      	bne.n	8002316 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800230e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	68ca      	ldr	r2, [r1, #12]
 8002314:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231a:	694a      	ldr	r2, [r1, #20]
 800231c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800231e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002320:	688b      	ldr	r3, [r1, #8]
 8002322:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002324:	680b      	ldr	r3, [r1, #0]
 8002326:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <TIM_Base_SetConfig+0xc8>)
 800232a:	4298      	cmp	r0, r3
 800232c:	d006      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 800232e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002332:	4298      	cmp	r0, r3
 8002334:	d002      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
  TIMx->EGR = TIM_EGR_UG;
 8002336:	2301      	movs	r3, #1
 8002338:	6143      	str	r3, [r0, #20]
 800233a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800233c:	690b      	ldr	r3, [r1, #16]
 800233e:	6303      	str	r3, [r0, #48]	; 0x30
 8002340:	e7f9      	b.n	8002336 <TIM_Base_SetConfig+0xba>
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000

08002348 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002348:	2800      	cmp	r0, #0
 800234a:	d077      	beq.n	800243c <HAL_TIM_Base_Init+0xf4>
{
 800234c:	b510      	push	{r4, lr}
 800234e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002350:	6803      	ldr	r3, [r0, #0]
 8002352:	4a3b      	ldr	r2, [pc, #236]	; (8002440 <HAL_TIM_Base_Init+0xf8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d037      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d034      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 800235e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002362:	4293      	cmp	r3, r2
 8002364:	d030      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 8002366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800236a:	4293      	cmp	r3, r2
 800236c:	d02c      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 800236e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002372:	4293      	cmp	r3, r2
 8002374:	d028      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 8002376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800237a:	4293      	cmp	r3, r2
 800237c:	d024      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 800237e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002382:	4293      	cmp	r3, r2
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 8002386:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800238a:	4293      	cmp	r3, r2
 800238c:	d01c      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 800238e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002392:	4293      	cmp	r3, r2
 8002394:	d018      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 8002396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239a:	4293      	cmp	r3, r2
 800239c:	d014      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 800239e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d010      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 80023a6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00c      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 80023ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d008      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 80023b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_TIM_Base_Init+0x80>
 80023be:	f44f 7189 	mov.w	r1, #274	; 0x112
 80023c2:	4820      	ldr	r0, [pc, #128]	; (8002444 <HAL_TIM_Base_Init+0xfc>)
 80023c4:	f004 feab 	bl	800711e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80023c8:	68a3      	ldr	r3, [r4, #8]
 80023ca:	b163      	cbz	r3, 80023e6 <HAL_TIM_Base_Init+0x9e>
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d00a      	beq.n	80023e6 <HAL_TIM_Base_Init+0x9e>
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d008      	beq.n	80023e6 <HAL_TIM_Base_Init+0x9e>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d006      	beq.n	80023e6 <HAL_TIM_Base_Init+0x9e>
 80023d8:	2b60      	cmp	r3, #96	; 0x60
 80023da:	d004      	beq.n	80023e6 <HAL_TIM_Base_Init+0x9e>
 80023dc:	f240 1113 	movw	r1, #275	; 0x113
 80023e0:	4818      	ldr	r0, [pc, #96]	; (8002444 <HAL_TIM_Base_Init+0xfc>)
 80023e2:	f004 fe9c 	bl	800711e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	b153      	cbz	r3, 8002400 <HAL_TIM_Base_Init+0xb8>
 80023ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ee:	d007      	beq.n	8002400 <HAL_TIM_Base_Init+0xb8>
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	d004      	beq.n	8002400 <HAL_TIM_Base_Init+0xb8>
 80023f6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80023fa:	4812      	ldr	r0, [pc, #72]	; (8002444 <HAL_TIM_Base_Init+0xfc>)
 80023fc:	f004 fe8f 	bl	800711e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002400:	69a3      	ldr	r3, [r4, #24]
 8002402:	b133      	cbz	r3, 8002412 <HAL_TIM_Base_Init+0xca>
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d004      	beq.n	8002412 <HAL_TIM_Base_Init+0xca>
 8002408:	f240 1115 	movw	r1, #277	; 0x115
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <HAL_TIM_Base_Init+0xfc>)
 800240e:	f004 fe86 	bl	800711e <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002416:	b15b      	cbz	r3, 8002430 <HAL_TIM_Base_Init+0xe8>
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	2302      	movs	r3, #2
 800241a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241e:	1d21      	adds	r1, r4, #4
 8002420:	6820      	ldr	r0, [r4, #0]
 8002422:	f7ff ff2b 	bl	800227c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002426:	2301      	movs	r3, #1
 8002428:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800242c:	2000      	movs	r0, #0
 800242e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002430:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002434:	4620      	mov	r0, r4
 8002436:	f004 fe95 	bl	8007164 <HAL_TIM_Base_MspInit>
 800243a:	e7ed      	b.n	8002418 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 800243c:	2001      	movs	r0, #1
 800243e:	4770      	bx	lr
 8002440:	40010000 	.word	0x40010000
 8002444:	080087f4 	.word	0x080087f4

08002448 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002448:	2800      	cmp	r0, #0
 800244a:	d077      	beq.n	800253c <HAL_TIM_OC_Init+0xf4>
{
 800244c:	b510      	push	{r4, lr}
 800244e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002450:	6803      	ldr	r3, [r0, #0]
 8002452:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_TIM_OC_Init+0xf8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d037      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d034      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 800245e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002462:	4293      	cmp	r3, r2
 8002464:	d030      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 8002466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246a:	4293      	cmp	r3, r2
 800246c:	d02c      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 800246e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002472:	4293      	cmp	r3, r2
 8002474:	d028      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 8002476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800247a:	4293      	cmp	r3, r2
 800247c:	d024      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 800247e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002482:	4293      	cmp	r3, r2
 8002484:	d020      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 8002486:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800248a:	4293      	cmp	r3, r2
 800248c:	d01c      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 800248e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 8002496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249a:	4293      	cmp	r3, r2
 800249c:	d014      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 800249e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d010      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 80024a6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00c      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 80024ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d008      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 80024b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_TIM_OC_Init+0x80>
 80024be:	f240 215e 	movw	r1, #606	; 0x25e
 80024c2:	4820      	ldr	r0, [pc, #128]	; (8002544 <HAL_TIM_OC_Init+0xfc>)
 80024c4:	f004 fe2b 	bl	800711e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80024c8:	68a3      	ldr	r3, [r4, #8]
 80024ca:	b163      	cbz	r3, 80024e6 <HAL_TIM_OC_Init+0x9e>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d00a      	beq.n	80024e6 <HAL_TIM_OC_Init+0x9e>
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d008      	beq.n	80024e6 <HAL_TIM_OC_Init+0x9e>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d006      	beq.n	80024e6 <HAL_TIM_OC_Init+0x9e>
 80024d8:	2b60      	cmp	r3, #96	; 0x60
 80024da:	d004      	beq.n	80024e6 <HAL_TIM_OC_Init+0x9e>
 80024dc:	f240 215f 	movw	r1, #607	; 0x25f
 80024e0:	4818      	ldr	r0, [pc, #96]	; (8002544 <HAL_TIM_OC_Init+0xfc>)
 80024e2:	f004 fe1c 	bl	800711e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	b153      	cbz	r3, 8002500 <HAL_TIM_OC_Init+0xb8>
 80024ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ee:	d007      	beq.n	8002500 <HAL_TIM_OC_Init+0xb8>
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d004      	beq.n	8002500 <HAL_TIM_OC_Init+0xb8>
 80024f6:	f44f 7118 	mov.w	r1, #608	; 0x260
 80024fa:	4812      	ldr	r0, [pc, #72]	; (8002544 <HAL_TIM_OC_Init+0xfc>)
 80024fc:	f004 fe0f 	bl	800711e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002500:	69a3      	ldr	r3, [r4, #24]
 8002502:	b133      	cbz	r3, 8002512 <HAL_TIM_OC_Init+0xca>
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d004      	beq.n	8002512 <HAL_TIM_OC_Init+0xca>
 8002508:	f240 2161 	movw	r1, #609	; 0x261
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <HAL_TIM_OC_Init+0xfc>)
 800250e:	f004 fe06 	bl	800711e <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002516:	b15b      	cbz	r3, 8002530 <HAL_TIM_OC_Init+0xe8>
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800251e:	1d21      	adds	r1, r4, #4
 8002520:	6820      	ldr	r0, [r4, #0]
 8002522:	f7ff feab 	bl	800227c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002526:	2301      	movs	r3, #1
 8002528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800252c:	2000      	movs	r0, #0
 800252e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002530:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff fddf 	bl	80020f8 <HAL_TIM_OC_MspInit>
 800253a:	e7ed      	b.n	8002518 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	4770      	bx	lr
 8002540:	40010000 	.word	0x40010000
 8002544:	080087f4 	.word	0x080087f4

08002548 <TIM_OC2_SetConfig>:
{
 8002548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254c:	4604      	mov	r4, r0
 800254e:	460f      	mov	r7, r1
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002550:	6a03      	ldr	r3, [r0, #32]
 8002552:	f023 0310 	bic.w	r3, r3, #16
 8002556:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002558:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800255a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800255e:	6986      	ldr	r6, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002560:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002564:	680b      	ldr	r3, [r1, #0]
 8002566:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800256a:	f025 0520 	bic.w	r5, r5, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800256e:	688b      	ldr	r3, [r1, #8]
 8002570:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <TIM_OC2_SetConfig+0xb8>)
 8002576:	4298      	cmp	r0, r3
 8002578:	d012      	beq.n	80025a0 <TIM_OC2_SetConfig+0x58>
 800257a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800257e:	4298      	cmp	r0, r3
 8002580:	d00e      	beq.n	80025a0 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <TIM_OC2_SetConfig+0xb8>)
 8002584:	429c      	cmp	r4, r3
 8002586:	d01c      	beq.n	80025c2 <TIM_OC2_SetConfig+0x7a>
 8002588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258c:	429c      	cmp	r4, r3
 800258e:	d018      	beq.n	80025c2 <TIM_OC2_SetConfig+0x7a>
  TIMx->CR2 = tmpcr2;
 8002590:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002594:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800259a:	6225      	str	r5, [r4, #32]
 800259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	b133      	cbz	r3, 80025b2 <TIM_OC2_SetConfig+0x6a>
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d004      	beq.n	80025b2 <TIM_OC2_SetConfig+0x6a>
 80025a8:	f241 714d 	movw	r1, #5965	; 0x174d
 80025ac:	4815      	ldr	r0, [pc, #84]	; (8002604 <TIM_OC2_SetConfig+0xbc>)
 80025ae:	f004 fdb6 	bl	800711e <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 80025b2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80025bc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80025c0:	e7df      	b.n	8002582 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c8:	d000      	beq.n	80025cc <TIM_OC2_SetConfig+0x84>
 80025ca:	b96b      	cbnz	r3, 80025e8 <TIM_OC2_SetConfig+0xa0>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d2:	d000      	beq.n	80025d6 <TIM_OC2_SetConfig+0x8e>
 80025d4:	b973      	cbnz	r3, 80025f4 <TIM_OC2_SetConfig+0xac>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025d6:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 80025e6:	e7d3      	b.n	8002590 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80025e8:	f241 715b 	movw	r1, #5979	; 0x175b
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <TIM_OC2_SetConfig+0xbc>)
 80025ee:	f004 fd96 	bl	800711e <assert_failed>
 80025f2:	e7eb      	b.n	80025cc <TIM_OC2_SetConfig+0x84>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80025f4:	f241 715c 	movw	r1, #5980	; 0x175c
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM_OC2_SetConfig+0xbc>)
 80025fa:	f004 fd90 	bl	800711e <assert_failed>
 80025fe:	e7ea      	b.n	80025d6 <TIM_OC2_SetConfig+0x8e>
 8002600:	40010000 	.word	0x40010000
 8002604:	080087f4 	.word	0x080087f4

08002608 <HAL_TIM_OC_ConfigChannel>:
{
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800260e:	4616      	mov	r6, r2
 8002610:	b162      	cbz	r2, 800262c <HAL_TIM_OC_ConfigChannel+0x24>
 8002612:	2a04      	cmp	r2, #4
 8002614:	d00a      	beq.n	800262c <HAL_TIM_OC_ConfigChannel+0x24>
 8002616:	2a08      	cmp	r2, #8
 8002618:	d008      	beq.n	800262c <HAL_TIM_OC_ConfigChannel+0x24>
 800261a:	2a0c      	cmp	r2, #12
 800261c:	d006      	beq.n	800262c <HAL_TIM_OC_ConfigChannel+0x24>
 800261e:	2a3c      	cmp	r2, #60	; 0x3c
 8002620:	d004      	beq.n	800262c <HAL_TIM_OC_ConfigChannel+0x24>
 8002622:	f640 513b 	movw	r1, #3387	; 0xd3b
 8002626:	486f      	ldr	r0, [pc, #444]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 8002628:	f004 fd79 	bl	800711e <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800262c:	682b      	ldr	r3, [r5, #0]
 800262e:	b173      	cbz	r3, 800264e <HAL_TIM_OC_ConfigChannel+0x46>
 8002630:	2b10      	cmp	r3, #16
 8002632:	d00c      	beq.n	800264e <HAL_TIM_OC_ConfigChannel+0x46>
 8002634:	2b20      	cmp	r3, #32
 8002636:	d00a      	beq.n	800264e <HAL_TIM_OC_ConfigChannel+0x46>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d008      	beq.n	800264e <HAL_TIM_OC_ConfigChannel+0x46>
 800263c:	2b50      	cmp	r3, #80	; 0x50
 800263e:	d006      	beq.n	800264e <HAL_TIM_OC_ConfigChannel+0x46>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d004      	beq.n	800264e <HAL_TIM_OC_ConfigChannel+0x46>
 8002644:	f640 513c 	movw	r1, #3388	; 0xd3c
 8002648:	4866      	ldr	r0, [pc, #408]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 800264a:	f004 fd68 	bl	800711e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800264e:	68ab      	ldr	r3, [r5, #8]
 8002650:	b133      	cbz	r3, 8002660 <HAL_TIM_OC_ConfigChannel+0x58>
 8002652:	2b02      	cmp	r3, #2
 8002654:	d004      	beq.n	8002660 <HAL_TIM_OC_ConfigChannel+0x58>
 8002656:	f640 513d 	movw	r1, #3389	; 0xd3d
 800265a:	4862      	ldr	r0, [pc, #392]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 800265c:	f004 fd5f 	bl	800711e <assert_failed>
  __HAL_LOCK(htim);
 8002660:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	f000 80bb 	beq.w	80027e0 <HAL_TIM_OC_ConfigChannel+0x1d8>
 800266a:	2301      	movs	r3, #1
 800266c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 8002676:	2e0c      	cmp	r6, #12
 8002678:	d840      	bhi.n	80026fc <HAL_TIM_OC_ConfigChannel+0xf4>
 800267a:	e8df f006 	tbb	[pc, r6]
 800267e:	3f07      	.short	0x3f07
 8002680:	3f463f3f 	.word	0x3f463f3f
 8002684:	3f6f3f3f 	.word	0x3f6f3f3f
 8002688:	3f3f      	.short	0x3f3f
 800268a:	90          	.byte	0x90
 800268b:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_TIM_OC_ConfigChannel+0x1e0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d02f      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d02c      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 800269a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800269e:	4293      	cmp	r3, r2
 80026a0:	d028      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d024      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d020      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01c      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026ba:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80026be:	4293      	cmp	r3, r2
 80026c0:	d018      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d014      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d010      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026d2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00c      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026de:	4293      	cmp	r3, r2
 80026e0:	d008      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_OC_ConfigChannel+0xec>
 80026ea:	f640 5149 	movw	r1, #3401	; 0xd49
 80026ee:	483d      	ldr	r0, [pc, #244]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 80026f0:	f004 fd15 	bl	800711e <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026f4:	4629      	mov	r1, r5
 80026f6:	6820      	ldr	r0, [r4, #0]
 80026f8:	f7ff fbb2 	bl	8001e60 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002702:	2000      	movs	r0, #0
 8002704:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002708:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	4a36      	ldr	r2, [pc, #216]	; (80027e8 <HAL_TIM_OC_ConfigChannel+0x1e0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01f      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d01c      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002718:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800271c:	4293      	cmp	r3, r2
 800271e:	d018      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002724:	4293      	cmp	r3, r2
 8002726:	d014      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272c:	4293      	cmp	r3, r2
 800272e:	d010      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002730:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002734:	4293      	cmp	r3, r2
 8002736:	d00c      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002738:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800273c:	4293      	cmp	r3, r2
 800273e:	d008      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002740:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_OC_ConfigChannel+0x14a>
 8002748:	f640 5153 	movw	r1, #3411	; 0xd53
 800274c:	4825      	ldr	r0, [pc, #148]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 800274e:	f004 fce6 	bl	800711e <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002752:	4629      	mov	r1, r5
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	f7ff fef7 	bl	8002548 <TIM_OC2_SetConfig>
      break;
 800275a:	e7cf      	b.n	80026fc <HAL_TIM_OC_ConfigChannel+0xf4>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_TIM_OC_ConfigChannel+0x1e0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d017      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x18c>
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d014      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x18c>
 800276a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800276e:	4293      	cmp	r3, r2
 8002770:	d010      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x18c>
 8002772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002776:	4293      	cmp	r3, r2
 8002778:	d00c      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x18c>
 800277a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800277e:	4293      	cmp	r3, r2
 8002780:	d008      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x18c>
 8002782:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x18c>
 800278a:	f640 515d 	movw	r1, #3421	; 0xd5d
 800278e:	4815      	ldr	r0, [pc, #84]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 8002790:	f004 fcc5 	bl	800711e <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002794:	4629      	mov	r1, r5
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	f7ff fbc0 	bl	8001f1c <TIM_OC3_SetConfig>
      break;
 800279c:	e7ae      	b.n	80026fc <HAL_TIM_OC_ConfigChannel+0xf4>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_TIM_OC_ConfigChannel+0x1e0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d017      	beq.n	80027d6 <HAL_TIM_OC_ConfigChannel+0x1ce>
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d014      	beq.n	80027d6 <HAL_TIM_OC_ConfigChannel+0x1ce>
 80027ac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d010      	beq.n	80027d6 <HAL_TIM_OC_ConfigChannel+0x1ce>
 80027b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00c      	beq.n	80027d6 <HAL_TIM_OC_ConfigChannel+0x1ce>
 80027bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d008      	beq.n	80027d6 <HAL_TIM_OC_ConfigChannel+0x1ce>
 80027c4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_TIM_OC_ConfigChannel+0x1ce>
 80027cc:	f640 5167 	movw	r1, #3431	; 0xd67
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <HAL_TIM_OC_ConfigChannel+0x1dc>)
 80027d2:	f004 fca4 	bl	800711e <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027d6:	4629      	mov	r1, r5
 80027d8:	6820      	ldr	r0, [r4, #0]
 80027da:	f7ff fbff 	bl	8001fdc <TIM_OC4_SetConfig>
      break;
 80027de:	e78d      	b.n	80026fc <HAL_TIM_OC_ConfigChannel+0xf4>
  __HAL_LOCK(htim);
 80027e0:	2002      	movs	r0, #2
}
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	080087f4 	.word	0x080087f4
 80027e8:	40010000 	.word	0x40010000

080027ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ec:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ee:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80027f8:	4319      	orrs	r1, r3
 80027fa:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fc:	6084      	str	r4, [r0, #8]
}
 80027fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_ConfigClockSource>:
{
 8002804:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002806:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800280a:	2b01      	cmp	r3, #1
 800280c:	f000 8237 	beq.w	8002c7e <HAL_TIM_ConfigClockSource+0x47a>
 8002810:	460d      	mov	r5, r1
 8002812:	4604      	mov	r4, r0
 8002814:	2301      	movs	r3, #1
 8002816:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	2302      	movs	r3, #2
 800281c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002820:	680b      	ldr	r3, [r1, #0]
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d016      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282c:	d013      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 800282e:	b193      	cbz	r3, 8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002830:	2b10      	cmp	r3, #16
 8002832:	d010      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d00e      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d00c      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d00a      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d008      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d006      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 8002848:	2b70      	cmp	r3, #112	; 0x70
 800284a:	d004      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x52>
 800284c:	f241 118b 	movw	r1, #4491	; 0x118b
 8002850:	488f      	ldr	r0, [pc, #572]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 8002852:	f004 fc64 	bl	800711e <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 8002856:	6822      	ldr	r2, [r4, #0]
 8002858:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002862:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	f000 81c4 	beq.w	8002bf4 <HAL_TIM_ConfigClockSource+0x3f0>
 800286c:	d949      	bls.n	8002902 <HAL_TIM_ConfigClockSource+0xfe>
 800286e:	2b70      	cmp	r3, #112	; 0x70
 8002870:	f000 8112 	beq.w	8002a98 <HAL_TIM_ConfigClockSource+0x294>
 8002874:	d879      	bhi.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 8002876:	2b50      	cmp	r3, #80	; 0x50
 8002878:	f000 8171 	beq.w	8002b5e <HAL_TIM_ConfigClockSource+0x35a>
 800287c:	2b60      	cmp	r3, #96	; 0x60
 800287e:	f040 815b 	bne.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	4a83      	ldr	r2, [pc, #524]	; (8002a94 <HAL_TIM_ConfigClockSource+0x290>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d01c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 8002890:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002894:	4293      	cmp	r3, r2
 8002896:	d018      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 8002898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800289c:	4293      	cmp	r3, r2
 800289e:	d014      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 80028a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d010      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 80028a8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 80028b0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d008      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 80028b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xc6>
 80028c0:	f241 11da 	movw	r1, #4570	; 0x11da
 80028c4:	4872      	ldr	r0, [pc, #456]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 80028c6:	f004 fc2a 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80028ca:	686b      	ldr	r3, [r5, #4]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xe2>
 80028d2:	b143      	cbz	r3, 80028e6 <HAL_TIM_ConfigClockSource+0xe2>
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d006      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xe2>
 80028d8:	2b0a      	cmp	r3, #10
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xe2>
 80028dc:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80028e0:	486b      	ldr	r0, [pc, #428]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 80028e2:	f004 fc1c 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80028e6:	68eb      	ldr	r3, [r5, #12]
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	f200 817d 	bhi.w	8002be8 <HAL_TIM_ConfigClockSource+0x3e4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	68ea      	ldr	r2, [r5, #12]
 80028f0:	6869      	ldr	r1, [r5, #4]
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	f7ff fa97 	bl	8001e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f8:	2160      	movs	r1, #96	; 0x60
 80028fa:	6820      	ldr	r0, [r4, #0]
 80028fc:	f7ff faa7 	bl	8001e4e <TIM_ITRx_SetConfig>
      break;
 8002900:	e11a      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
  switch (sClockSourceConfig->ClockSource)
 8002902:	2b10      	cmp	r3, #16
 8002904:	d008      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x114>
 8002906:	d904      	bls.n	8002912 <HAL_TIM_ConfigClockSource+0x10e>
 8002908:	2b20      	cmp	r3, #32
 800290a:	d005      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x114>
 800290c:	2b30      	cmp	r3, #48	; 0x30
 800290e:	d003      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x114>
 8002910:	e112      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 8110 	bne.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	4a5e      	ldr	r2, [pc, #376]	; (8002a94 <HAL_TIM_ConfigClockSource+0x290>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01f      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d01c      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 8002926:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 800292e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002932:	4293      	cmp	r3, r2
 8002934:	d014      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 8002936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800293a:	4293      	cmp	r3, r2
 800293c:	d010      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 800293e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002942:	4293      	cmp	r3, r2
 8002944:	d00c      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 8002946:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800294a:	4293      	cmp	r3, r2
 800294c:	d008      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 800294e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x15c>
 8002956:	f241 11fd 	movw	r1, #4605	; 0x11fd
 800295a:	484d      	ldr	r0, [pc, #308]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 800295c:	f004 fbdf 	bl	800711e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002960:	6829      	ldr	r1, [r5, #0]
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	f7ff fa73 	bl	8001e4e <TIM_ITRx_SetConfig>
      break;
 8002968:	e0e6      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
  switch (sClockSourceConfig->ClockSource)
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296e:	d04d      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0x208>
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	f040 80e0 	bne.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	4a46      	ldr	r2, [pc, #280]	; (8002a94 <HAL_TIM_ConfigClockSource+0x290>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d017      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x1ac>
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d014      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x1ac>
 8002986:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800298a:	4293      	cmp	r3, r2
 800298c:	d010      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x1ac>
 800298e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002992:	4293      	cmp	r3, r2
 8002994:	d00c      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x1ac>
 8002996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800299a:	4293      	cmp	r3, r2
 800299c:	d008      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x1ac>
 800299e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x1ac>
 80029a6:	f241 11b6 	movw	r1, #4534	; 0x11b6
 80029aa:	4839      	ldr	r0, [pc, #228]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 80029ac:	f004 fbb7 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80029b0:	68ab      	ldr	r3, [r5, #8]
 80029b2:	b16b      	cbz	r3, 80029d0 <HAL_TIM_ConfigClockSource+0x1cc>
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d00a      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x1cc>
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x1cc>
 80029c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x1cc>
 80029c6:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80029ca:	4831      	ldr	r0, [pc, #196]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 80029cc:	f004 fba7 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80029d0:	686b      	ldr	r3, [r5, #4]
 80029d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d6:	d009      	beq.n	80029ec <HAL_TIM_ConfigClockSource+0x1e8>
 80029d8:	b143      	cbz	r3, 80029ec <HAL_TIM_ConfigClockSource+0x1e8>
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d006      	beq.n	80029ec <HAL_TIM_ConfigClockSource+0x1e8>
 80029de:	2b0a      	cmp	r3, #10
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_ConfigClockSource+0x1e8>
 80029e2:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80029e6:	482a      	ldr	r0, [pc, #168]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 80029e8:	f004 fb99 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80029ec:	68eb      	ldr	r3, [r5, #12]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f200 80af 	bhi.w	8002b52 <HAL_TIM_ConfigClockSource+0x34e>
      TIM_ETR_SetConfig(htim->Instance,
 80029f4:	68eb      	ldr	r3, [r5, #12]
 80029f6:	686a      	ldr	r2, [r5, #4]
 80029f8:	68a9      	ldr	r1, [r5, #8]
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	f7ff fef6 	bl	80027ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	6893      	ldr	r3, [r2, #8]
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6093      	str	r3, [r2, #8]
      break;
 8002a0a:	e095      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_TIM_ConfigClockSource+0x290>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	f000 8091 	beq.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	f000 808d 	beq.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f000 8088 	beq.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f000 8083 	beq.w	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d07e      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d07a      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d076      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a4a:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d072      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a52:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d06e      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d06a      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d066      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a6a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d062      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d05e      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d05a      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a82:	f241 1197 	movw	r1, #4503	; 0x1197
 8002a86:	4802      	ldr	r0, [pc, #8]	; (8002a90 <HAL_TIM_ConfigClockSource+0x28c>)
 8002a88:	f004 fb49 	bl	800711e <assert_failed>
 8002a8c:	e054      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
 8002a8e:	bf00      	nop
 8002a90:	080087f4 	.word	0x080087f4
 8002a94:	40010000 	.word	0x40010000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_TIM_ConfigClockSource+0x480>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d01f      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d01c      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002aa6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d014      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002ab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d010      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002abe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002ac6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d008      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002ace:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x2dc>
 8002ad6:	f241 119e 	movw	r1, #4510	; 0x119e
 8002ada:	486b      	ldr	r0, [pc, #428]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002adc:	f004 fb1f 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002ae0:	68ab      	ldr	r3, [r5, #8]
 8002ae2:	b16b      	cbz	r3, 8002b00 <HAL_TIM_ConfigClockSource+0x2fc>
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d00a      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x2fc>
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	d007      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x2fc>
 8002af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x2fc>
 8002af6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8002afa:	4863      	ldr	r0, [pc, #396]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002afc:	f004 fb0f 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002b00:	686b      	ldr	r3, [r5, #4]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b06:	d009      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x318>
 8002b08:	b143      	cbz	r3, 8002b1c <HAL_TIM_ConfigClockSource+0x318>
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d006      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x318>
 8002b0e:	2b0a      	cmp	r3, #10
 8002b10:	d004      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0x318>
 8002b12:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8002b16:	485c      	ldr	r0, [pc, #368]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002b18:	f004 fb01 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002b1c:	68eb      	ldr	r3, [r5, #12]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	d811      	bhi.n	8002b46 <HAL_TIM_ConfigClockSource+0x342>
      TIM_ETR_SetConfig(htim->Instance,
 8002b22:	68eb      	ldr	r3, [r5, #12]
 8002b24:	686a      	ldr	r2, [r5, #4]
 8002b26:	68a9      	ldr	r1, [r5, #8]
 8002b28:	6820      	ldr	r0, [r4, #0]
 8002b2a:	f7ff fe5f 	bl	80027ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002b36:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002b44:	bd38      	pop	{r3, r4, r5, pc}
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002b46:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8002b4a:	484f      	ldr	r0, [pc, #316]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002b4c:	f004 fae7 	bl	800711e <assert_failed>
 8002b50:	e7e7      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x31e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002b52:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8002b56:	484c      	ldr	r0, [pc, #304]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002b58:	f004 fae1 	bl	800711e <assert_failed>
 8002b5c:	e74a      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	4a48      	ldr	r2, [pc, #288]	; (8002c84 <HAL_TIM_ConfigClockSource+0x480>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d01c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b6c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d014      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d010      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b84:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b8c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d008      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b94:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x3a2>
 8002b9c:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8002ba0:	4839      	ldr	r0, [pc, #228]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002ba2:	f004 fabc 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002ba6:	686b      	ldr	r3, [r5, #4]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d009      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x3be>
 8002bae:	b143      	cbz	r3, 8002bc2 <HAL_TIM_ConfigClockSource+0x3be>
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d006      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x3be>
 8002bb4:	2b0a      	cmp	r3, #10
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x3be>
 8002bb8:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8002bbc:	4832      	ldr	r0, [pc, #200]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002bbe:	f004 faae 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002bc2:	68eb      	ldr	r3, [r5, #12]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d809      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x3d8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc8:	68ea      	ldr	r2, [r5, #12]
 8002bca:	6869      	ldr	r1, [r5, #4]
 8002bcc:	6820      	ldr	r0, [r4, #0]
 8002bce:	f7ff f917 	bl	8001e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd2:	2150      	movs	r1, #80	; 0x50
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	f7ff f93a 	bl	8001e4e <TIM_ITRx_SetConfig>
      break;
 8002bda:	e7ad      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002bdc:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8002be0:	4829      	ldr	r0, [pc, #164]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002be2:	f004 fa9c 	bl	800711e <assert_failed>
 8002be6:	e7ef      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x3c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002be8:	f241 11de 	movw	r1, #4574	; 0x11de
 8002bec:	4826      	ldr	r0, [pc, #152]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002bee:	f004 fa96 	bl	800711e <assert_failed>
 8002bf2:	e67c      	b.n	80028ee <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <HAL_TIM_ConfigClockSource+0x480>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d01f      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d01c      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d018      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d014      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d010      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c22:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d008      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0x438>
 8002c32:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8002c36:	4814      	ldr	r0, [pc, #80]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002c38:	f004 fa71 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002c3c:	686b      	ldr	r3, [r5, #4]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d009      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x454>
 8002c44:	b143      	cbz	r3, 8002c58 <HAL_TIM_ConfigClockSource+0x454>
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d006      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x454>
 8002c4a:	2b0a      	cmp	r3, #10
 8002c4c:	d004      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x454>
 8002c4e:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8002c52:	480d      	ldr	r0, [pc, #52]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002c54:	f004 fa63 	bl	800711e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002c58:	68eb      	ldr	r3, [r5, #12]
 8002c5a:	2b0f      	cmp	r3, #15
 8002c5c:	d809      	bhi.n	8002c72 <HAL_TIM_ConfigClockSource+0x46e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	68ea      	ldr	r2, [r5, #12]
 8002c60:	6869      	ldr	r1, [r5, #4]
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	f7ff f8cc 	bl	8001e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	6820      	ldr	r0, [r4, #0]
 8002c6c:	f7ff f8ef 	bl	8001e4e <TIM_ITRx_SetConfig>
      break;
 8002c70:	e762      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002c72:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8002c76:	4804      	ldr	r0, [pc, #16]	; (8002c88 <HAL_TIM_ConfigClockSource+0x484>)
 8002c78:	f004 fa51 	bl	800711e <assert_failed>
 8002c7c:	e7ef      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x45a>
  __HAL_LOCK(htim);
 8002c7e:	2002      	movs	r0, #2
}
 8002c80:	bd38      	pop	{r3, r4, r5, pc}
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000
 8002c88:	080087f4 	.word	0x080087f4

08002c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d01c      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002ca0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d018      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002ca8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d014      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d010      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00c      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d008      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cc8:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cd0:	f240 6164 	movw	r1, #1636	; 0x664
 8002cd4:	4831      	ldr	r0, [pc, #196]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cd6:	f004 fa22 	bl	800711e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	b193      	cbz	r3, 8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d010      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d00e      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d00a      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002cee:	2b50      	cmp	r3, #80	; 0x50
 8002cf0:	d008      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002cf2:	2b60      	cmp	r3, #96	; 0x60
 8002cf4:	d006      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002cf6:	2b70      	cmp	r3, #112	; 0x70
 8002cf8:	d004      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002cfa:	f240 6165 	movw	r1, #1637	; 0x665
 8002cfe:	4827      	ldr	r0, [pc, #156]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d00:	f004 fa0d 	bl	800711e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002d04:	686b      	ldr	r3, [r5, #4]
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d001      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d13c      	bne.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d03e      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8002d16:	2301      	movs	r3, #1
 8002d18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d22:	6821      	ldr	r1, [r4, #0]
 8002d24:	684b      	ldr	r3, [r1, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d26:	688a      	ldr	r2, [r1, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	6828      	ldr	r0, [r5, #0]
 8002d2e:	4303      	orrs	r3, r0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d30:	604b      	str	r3, [r1, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	4918      	ldr	r1, [pc, #96]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d36:	428b      	cmp	r3, r1
 8002d38:	d01a      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d017      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d40:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8002d44:	428b      	cmp	r3, r1
 8002d46:	d013      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	d00f      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d00b      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d58:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	d007      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d60:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8002d64:	428b      	cmp	r3, r1
 8002d66:	d003      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d68:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xee>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d74:	6869      	ldr	r1, [r5, #4]
 8002d76:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002d88:	f240 6166 	movw	r1, #1638	; 0x666
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d8e:	f004 f9c6 	bl	800711e <assert_failed>
 8002d92:	e7bc      	b.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  __HAL_LOCK(htim);
 8002d94:	2002      	movs	r0, #2
}
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	0800882c 	.word	0x0800882c

08002da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	4770      	bx	lr

08002da4 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8002da4:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002da6:	3301      	adds	r3, #1
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <USB_CoreReset+0x38>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d811      	bhi.n	8002dd2 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002dae:	6902      	ldr	r2, [r0, #16]
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	daf8      	bge.n	8002da6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002db4:	6903      	ldr	r3, [r0, #16]
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6103      	str	r3, [r0, #16]
  count = 0U;
 8002dbc:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <USB_CoreReset+0x38>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d807      	bhi.n	8002dd6 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002dc6:	6902      	ldr	r2, [r0, #16]
 8002dc8:	f012 0f01 	tst.w	r2, #1
 8002dcc:	d1f7      	bne.n	8002dbe <USB_CoreReset+0x1a>

  return HAL_OK;
 8002dce:	2000      	movs	r0, #0
 8002dd0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dd6:	2003      	movs	r0, #3
}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	00030d40 	.word	0x00030d40

08002de0 <USB_CoreInit>:
{
 8002de0:	b084      	sub	sp, #16
 8002de2:	b510      	push	{r4, lr}
 8002de4:	4604      	mov	r4, r0
 8002de6:	a803      	add	r0, sp, #12
 8002de8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dec:	9b08      	ldr	r3, [sp, #32]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d00d      	beq.n	8002e0e <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7ff ffd2 	bl	8002da4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e02:	bb23      	cbnz	r3, 8002e4e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e0c:	e013      	b.n	8002e36 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e16:	68e3      	ldr	r3, [r4, #12]
 8002e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e20:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e22:	68e3      	ldr	r3, [r4, #12]
 8002e24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e28:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002e2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d009      	beq.n	8002e44 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7ff ffb7 	bl	8002da4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002e36:	9b06      	ldr	r3, [sp, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d00d      	beq.n	8002e58 <USB_CoreInit+0x78>
}
 8002e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e40:	b004      	add	sp, #16
 8002e42:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e44:	68e3      	ldr	r3, [r4, #12]
 8002e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4a:	60e3      	str	r3, [r4, #12]
 8002e4c:	e7f0      	b.n	8002e30 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e56:	e7ee      	b.n	8002e36 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e58:	68a3      	ldr	r3, [r4, #8]
 8002e5a:	f043 0306 	orr.w	r3, r3, #6
 8002e5e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	60a3      	str	r3, [r4, #8]
 8002e68:	e7e8      	b.n	8002e3c <USB_CoreInit+0x5c>

08002e6a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e6a:	6883      	ldr	r3, [r0, #8]
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6083      	str	r3, [r0, #8]
}
 8002e72:	2000      	movs	r0, #0
 8002e74:	4770      	bx	lr

08002e76 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e76:	6883      	ldr	r3, [r0, #8]
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6083      	str	r3, [r0, #8]
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	4770      	bx	lr

08002e82 <USB_SetCurrentMode>:
{
 8002e82:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e84:	68c3      	ldr	r3, [r0, #12]
 8002e86:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002e8a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002e8c:	2901      	cmp	r1, #1
 8002e8e:	d009      	beq.n	8002ea4 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8002e90:	b969      	cbnz	r1, 8002eae <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e92:	68c3      	ldr	r3, [r0, #12]
 8002e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e98:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002e9a:	2032      	movs	r0, #50	; 0x32
 8002e9c:	f7fd fb9c 	bl	80005d8 <HAL_Delay>
  return HAL_OK;
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ea4:	68c3      	ldr	r3, [r0, #12]
 8002ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eaa:	60c3      	str	r3, [r0, #12]
 8002eac:	e7f5      	b.n	8002e9a <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
}
 8002eb0:	bd08      	pop	{r3, pc}
	...

08002eb4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002eb4:	0189      	lsls	r1, r1, #6
 8002eb6:	f041 0120 	orr.w	r1, r1, #32
 8002eba:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8002ebc:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <USB_FlushTxFifo+0x24>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d805      	bhi.n	8002ed2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ec6:	6902      	ldr	r2, [r0, #16]
 8002ec8:	f012 0f20 	tst.w	r2, #32
 8002ecc:	d1f7      	bne.n	8002ebe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002ece:	2000      	movs	r0, #0
 8002ed0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ed2:	2003      	movs	r0, #3
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	00030d40 	.word	0x00030d40

08002edc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002edc:	2310      	movs	r3, #16
 8002ede:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8002ee0:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a05      	ldr	r2, [pc, #20]	; (8002efc <USB_FlushRxFifo+0x20>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d805      	bhi.n	8002ef6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002eea:	6902      	ldr	r2, [r0, #16]
 8002eec:	f012 0f10 	tst.w	r2, #16
 8002ef0:	d1f7      	bne.n	8002ee2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ef6:	2003      	movs	r0, #3
}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	00030d40 	.word	0x00030d40

08002f00 <USB_WritePacket>:
{
 8002f00:	b470      	push	{r4, r5, r6}
 8002f02:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8002f06:	b964      	cbnz	r4, 8002f22 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002f08:	3303      	adds	r3, #3
 8002f0a:	089e      	lsrs	r6, r3, #2
    for (i = 0U; i < count32b; i++)
 8002f0c:	e007      	b.n	8002f1e <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002f0e:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f16:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f1a:	601d      	str	r5, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002f1c:	3401      	adds	r4, #1
 8002f1e:	42b4      	cmp	r4, r6
 8002f20:	d3f5      	bcc.n	8002f0e <USB_WritePacket+0xe>
}
 8002f22:	2000      	movs	r0, #0
 8002f24:	bc70      	pop	{r4, r5, r6}
 8002f26:	4770      	bx	lr

08002f28 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002f28:	3203      	adds	r2, #3
 8002f2a:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d20c      	bcs.n	8002f4c <USB_ReadPacket+0x24>
{
 8002f32:	b410      	push	{r4}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002f34:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002f38:	6824      	ldr	r4, [r4, #0]
 8002f3a:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002f3e:	3301      	adds	r3, #1
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d3f7      	bcc.n	8002f34 <USB_ReadPacket+0xc>
}
 8002f44:	4608      	mov	r0, r1
 8002f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4770      	bx	lr

08002f50 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002f50:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002f52:	6980      	ldr	r0, [r0, #24]
}
 8002f54:	4010      	ands	r0, r2
 8002f56:	4770      	bx	lr

08002f58 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002f58:	6940      	ldr	r0, [r0, #20]
}
 8002f5a:	f000 0001 	and.w	r0, r0, #1
 8002f5e:	4770      	bx	lr

08002f60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002f60:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002f62:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002f66:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002f72:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002f76:	f001 0203 	and.w	r2, r1, #3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8002f80:	2901      	cmp	r1, #1
 8002f82:	d005      	beq.n	8002f90 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8002f84:	2902      	cmp	r1, #2
 8002f86:	d007      	beq.n	8002f98 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f8e:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8002f90:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002f94:	6063      	str	r3, [r4, #4]
 8002f96:	e7f7      	b.n	8002f88 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 8002f98:	f241 7370 	movw	r3, #6000	; 0x1770
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	e7f3      	b.n	8002f88 <USB_InitFSLSPClkSel+0x28>

08002fa0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa0:	b530      	push	{r4, r5, lr}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002faa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002fae:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002fb0:	9b01      	ldr	r3, [sp, #4]
 8002fb2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fb6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002fb8:	9b01      	ldr	r3, [sp, #4]
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002fc2:	2064      	movs	r0, #100	; 0x64
 8002fc4:	f7fd fb08 	bl	80005d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002fc8:	9b01      	ldr	r3, [sp, #4]
 8002fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fce:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002fd2:	200a      	movs	r0, #10
 8002fd4:	f7fd fb00 	bl	80005d8 <HAL_Delay>

  return HAL_OK;
}
 8002fd8:	4628      	mov	r0, r5
 8002fda:	b003      	add	sp, #12
 8002fdc:	bd30      	pop	{r4, r5, pc}

08002fde <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002fde:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002fe4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002fe8:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ff0:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002ff2:	9b01      	ldr	r3, [sp, #4]
 8002ff4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ff8:	d101      	bne.n	8002ffe <USB_DriveVbus+0x20>
 8002ffa:	2901      	cmp	r1, #1
 8002ffc:	d00c      	beq.n	8003018 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003004:	d005      	beq.n	8003012 <USB_DriveVbus+0x34>
 8003006:	b921      	cbnz	r1, 8003012 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003008:	9b01      	ldr	r3, [sp, #4]
 800300a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800300e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8003012:	2000      	movs	r0, #0
 8003014:	b002      	add	sp, #8
 8003016:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800301e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8003022:	e7ec      	b.n	8002ffe <USB_DriveVbus+0x20>

08003024 <USB_HostInit>:
{
 8003024:	b084      	sub	sp, #16
 8003026:	b538      	push	{r3, r4, r5, lr}
 8003028:	4604      	mov	r4, r0
 800302a:	a805      	add	r0, sp, #20
 800302c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003030:	4625      	mov	r5, r4
  USBx_PCGCCTL = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800303a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800303e:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003042:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003046:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003052:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003056:	d010      	beq.n	800307a <USB_HostInit+0x56>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003058:	9b07      	ldr	r3, [sp, #28]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d006      	beq.n	800306c <USB_HostInit+0x48>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800305e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800306a:	e00c      	b.n	8003086 <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800306c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003078:	e005      	b.n	8003086 <USB_HostInit+0x62>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800307a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003086:	2110      	movs	r1, #16
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff ff13 	bl	8002eb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800308e:	4620      	mov	r0, r4
 8003090:	f7ff ff24 	bl	8002edc <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8003094:	2200      	movs	r2, #0
 8003096:	e009      	b.n	80030ac <USB_HostInit+0x88>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003098:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 800309c:	f04f 31ff 	mov.w	r1, #4294967295
 80030a0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80030a4:	2100      	movs	r1, #0
 80030a6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80030aa:	3201      	adds	r2, #1
 80030ac:	9b06      	ldr	r3, [sp, #24]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d3f2      	bcc.n	8003098 <USB_HostInit+0x74>
  (void)USB_DriveVbus(USBx, 1U);
 80030b2:	2101      	movs	r1, #1
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ff92 	bl	8002fde <USB_DriveVbus>
  HAL_Delay(200U);
 80030ba:	20c8      	movs	r0, #200	; 0xc8
 80030bc:	f7fd fa8c 	bl	80005d8 <HAL_Delay>
  USBx->GINTMSK = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80030ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030d0:	d017      	beq.n	8003102 <USB_HostInit+0xde>
    USBx->GRXFSIZ  = 0x200U;
 80030d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d6:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80030d8:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80030dc:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <USB_HostInit+0xf0>)
 80030e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80030e4:	9b08      	ldr	r3, [sp, #32]
 80030e6:	b91b      	cbnz	r3, 80030f0 <USB_HostInit+0xcc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030e8:	69a3      	ldr	r3, [r4, #24]
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80030f0:	69a2      	ldr	r2, [r4, #24]
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <USB_HostInit+0xf4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61a3      	str	r3, [r4, #24]
}
 80030f8:	2000      	movs	r0, #0
 80030fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030fe:	b004      	add	sp, #16
 8003100:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003106:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800310a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <USB_HostInit+0xf8>)
 800310e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003112:	e7e7      	b.n	80030e4 <USB_HostInit+0xc0>
 8003114:	00e00300 	.word	0x00e00300
 8003118:	a3200008 	.word	0xa3200008
 800311c:	004000e0 	.word	0x004000e0

08003120 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003120:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003126:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800312a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800312c:	9801      	ldr	r0, [sp, #4]
}
 800312e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003132:	b002      	add	sp, #8
 8003134:	4770      	bx	lr

08003136 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003136:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800313a:	6880      	ldr	r0, [r0, #8]
}
 800313c:	b280      	uxth	r0, r0
 800313e:	4770      	bx	lr

08003140 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	f89d 4018 	ldrb.w	r4, [sp, #24]
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003146:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 800314a:	f505 66a0 	add.w	r6, r5, #1280	; 0x500
 800314e:	f04f 37ff 	mov.w	r7, #4294967295
 8003152:	60b7      	str	r7, [r6, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003154:	2c03      	cmp	r4, #3
 8003156:	d864      	bhi.n	8003222 <USB_HC_Init+0xe2>
 8003158:	e8df f004 	tbb	[pc, r4]
 800315c:	18025502 	.word	0x18025502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003160:	f240 479d 	movw	r7, #1181	; 0x49d
 8003164:	60f7      	str	r7, [r6, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003166:	f012 0f80 	tst.w	r2, #128	; 0x80
 800316a:	d109      	bne.n	8003180 <USB_HC_Init+0x40>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800316c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800316e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003172:	d058      	beq.n	8003226 <USB_HC_Init+0xe6>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003174:	68f7      	ldr	r7, [r6, #12]
 8003176:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 800317a:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800317c:	2600      	movs	r6, #0
 800317e:	e00c      	b.n	800319a <USB_HC_Init+0x5a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003180:	68f7      	ldr	r7, [r6, #12]
 8003182:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8003186:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003188:	2600      	movs	r6, #0
 800318a:	e006      	b.n	800319a <USB_HC_Init+0x5a>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800318c:	f240 679d 	movw	r7, #1693	; 0x69d
 8003190:	60f7      	str	r7, [r6, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003192:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003196:	d130      	bne.n	80031fa <USB_HC_Init+0xba>
  HAL_StatusTypeDef ret = HAL_OK;
 8003198:	2600      	movs	r6, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800319a:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
 800319e:	f001 010f 	and.w	r1, r1, #15
 80031a2:	f04f 0e01 	mov.w	lr, #1
 80031a6:	fa0e f101 	lsl.w	r1, lr, r1
 80031aa:	4339      	orrs	r1, r7
 80031ac:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80031b0:	6981      	ldr	r1, [r0, #24]
 80031b2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80031b6:	6181      	str	r1, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80031b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031bc:	d135      	bne.n	800322a <USB_HC_Init+0xea>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80031be:	2000      	movs	r0, #0
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80031c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80031c4:	2902      	cmp	r1, #2
 80031c6:	d033      	beq.n	8003230 <USB_HC_Init+0xf0>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 80031c8:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80031ca:	059b      	lsls	r3, r3, #22
 80031cc:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80031d0:	02d2      	lsls	r2, r2, #11
 80031d2:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80031d6:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80031d8:	04a2      	lsls	r2, r4, #18
 80031da:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80031de:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80031e0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80031e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80031e8:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80031ea:	4303      	orrs	r3, r0
 80031ec:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80031ee:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 80031f2:	2c03      	cmp	r4, #3
 80031f4:	d01f      	beq.n	8003236 <USB_HC_Init+0xf6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 80031f6:	4630      	mov	r0, r6
 80031f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80031fa:	68f7      	ldr	r7, [r6, #12]
 80031fc:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8003200:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003202:	2600      	movs	r6, #0
 8003204:	e7c9      	b.n	800319a <USB_HC_Init+0x5a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003206:	f240 2725 	movw	r7, #549	; 0x225
 800320a:	60f7      	str	r7, [r6, #12]
      if ((epnum & 0x80U) == 0x80U)
 800320c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003210:	d101      	bne.n	8003216 <USB_HC_Init+0xd6>
  HAL_StatusTypeDef ret = HAL_OK;
 8003212:	2600      	movs	r6, #0
 8003214:	e7c1      	b.n	800319a <USB_HC_Init+0x5a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003216:	68f7      	ldr	r7, [r6, #12]
 8003218:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 800321c:	60f7      	str	r7, [r6, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800321e:	2600      	movs	r6, #0
 8003220:	e7bb      	b.n	800319a <USB_HC_Init+0x5a>
      ret = HAL_ERROR;
 8003222:	2601      	movs	r6, #1
 8003224:	e7b9      	b.n	800319a <USB_HC_Init+0x5a>
  HAL_StatusTypeDef ret = HAL_OK;
 8003226:	2600      	movs	r6, #0
 8003228:	e7b7      	b.n	800319a <USB_HC_Init+0x5a>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800322a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800322e:	e7c7      	b.n	80031c0 <USB_HC_Init+0x80>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003230:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003234:	e7c9      	b.n	80031ca <USB_HC_Init+0x8a>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003236:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800323a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800323e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
 8003242:	e7d8      	b.n	80031f6 <USB_HC_Init+0xb6>

08003244 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003244:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003248:	6940      	ldr	r0, [r0, #20]
}
 800324a:	b280      	uxth	r0, r0
 800324c:	4770      	bx	lr

0800324e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800324e:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003250:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003254:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
 8003258:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800325c:	f3c3 4381 	ubfx	r3, r3, #18, #2

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003260:	b33b      	cbz	r3, 80032b2 <USB_HC_Halt+0x64>
 8003262:	2b02      	cmp	r3, #2
 8003264:	d025      	beq.n	80032b2 <USB_HC_Halt+0x64>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003266:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800326a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800326e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003272:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003276:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800327a:	d149      	bne.n	8003310 <USB_HC_Halt+0xc2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800327c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003284:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003288:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800328c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003290:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003294:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800329c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  uint32_t count = 0U;
 80032a0:	2300      	movs	r3, #0
      do
      {
        if (++count > 1000U)
 80032a2:	3301      	adds	r3, #1
 80032a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a8:	d827      	bhi.n	80032fa <USB_HC_Halt+0xac>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	dbf8      	blt.n	80032a2 <USB_HC_Halt+0x54>
 80032b0:	e023      	b.n	80032fa <USB_HC_Halt+0xac>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80032b2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80032b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ba:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80032be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80032c0:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80032c4:	d11d      	bne.n	8003302 <USB_HC_Halt+0xb4>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80032c6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80032ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80032d2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80032d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032da:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80032de:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80032e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032e6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  uint32_t count = 0U;
 80032ea:	2300      	movs	r3, #0
        if (++count > 1000U)
 80032ec:	3301      	adds	r3, #1
 80032ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f2:	d802      	bhi.n	80032fa <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	dbf8      	blt.n	80032ec <USB_HC_Halt+0x9e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80032fa:	2000      	movs	r0, #0
 80032fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003300:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003302:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800330a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800330e:	e7f4      	b.n	80032fa <USB_HC_Halt+0xac>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003310:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003318:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800331c:	e7ed      	b.n	80032fa <USB_HC_Halt+0xac>
	...

08003320 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003320:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003324:	4a06      	ldr	r2, [pc, #24]	; (8003340 <USB_DoPing+0x20>)
 8003326:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800332a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800332e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003336:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 800333a:	2000      	movs	r0, #0
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	80080000 	.word	0x80080000

08003344 <USB_HC_StartXfer>:
{
 8003344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003346:	b083      	sub	sp, #12
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003348:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800334a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800334c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003350:	d007      	beq.n	8003362 <USB_HC_StartXfer+0x1e>
 8003352:	790c      	ldrb	r4, [r1, #4]
 8003354:	b92c      	cbnz	r4, 8003362 <USB_HC_StartXfer+0x1e>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003356:	b912      	cbnz	r2, 800335e <USB_HC_StartXfer+0x1a>
 8003358:	794c      	ldrb	r4, [r1, #5]
 800335a:	2c01      	cmp	r4, #1
 800335c:	d011      	beq.n	8003382 <USB_HC_StartXfer+0x3e>
    else if (dma == 1U)
 800335e:	2a01      	cmp	r2, #1
 8003360:	d013      	beq.n	800338a <USB_HC_StartXfer+0x46>
  if (hc->xfer_len > 0U)
 8003362:	690c      	ldr	r4, [r1, #16]
 8003364:	b1e4      	cbz	r4, 80033a0 <USB_HC_StartXfer+0x5c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003366:	890d      	ldrh	r5, [r1, #8]
 8003368:	442c      	add	r4, r5
 800336a:	3c01      	subs	r4, #1
 800336c:	fbb4 f4f5 	udiv	r4, r4, r5
 8003370:	b2a4      	uxth	r4, r4
    if (num_packets > max_hc_pkt_count)
 8003372:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003376:	d914      	bls.n	80033a2 <USB_HC_StartXfer+0x5e>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003378:	022d      	lsls	r5, r5, #8
 800337a:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 800337c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003380:	e00f      	b.n	80033a2 <USB_HC_StartXfer+0x5e>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff ffcc 	bl	8003320 <USB_DoPing>
      return HAL_OK;
 8003388:	e075      	b.n	8003476 <USB_HC_StartXfer+0x132>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800338a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800338e:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8003392:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8003396:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
      hc->do_ping = 0U;
 800339a:	2400      	movs	r4, #0
 800339c:	714c      	strb	r4, [r1, #5]
 800339e:	e7e0      	b.n	8003362 <USB_HC_StartXfer+0x1e>
    num_packets = 1U;
 80033a0:	2401      	movs	r4, #1
  if (hc->ep_is_in != 0U)
 80033a2:	78cd      	ldrb	r5, [r1, #3]
 80033a4:	b11d      	cbz	r5, 80033ae <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80033a6:	890d      	ldrh	r5, [r1, #8]
 80033a8:	fb05 f504 	mul.w	r5, r5, r4
 80033ac:	610d      	str	r5, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80033ae:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80033b2:	690d      	ldr	r5, [r1, #16]
 80033b4:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80033b8:	4f36      	ldr	r7, [pc, #216]	; (8003494 <USB_HC_StartXfer+0x150>)
 80033ba:	ea07 44c4 	and.w	r4, r7, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80033be:	432c      	orrs	r4, r5
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80033c0:	7a8d      	ldrb	r5, [r1, #10]
 80033c2:	076d      	lsls	r5, r5, #29
 80033c4:	f005 45c0 	and.w	r5, r5, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80033c8:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80033ca:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 80033ce:	b112      	cbz	r2, 80033d6 <USB_HC_StartXfer+0x92>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80033d0:	68cc      	ldr	r4, [r1, #12]
 80033d2:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80033d6:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 80033da:	68b4      	ldr	r4, [r6, #8]
 80033dc:	f014 0f01 	tst.w	r4, #1
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80033e0:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80033e4:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80033e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80033ec:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80033f0:	bf0c      	ite	eq
 80033f2:	f04f 5500 	moveq.w	r5, #536870912	; 0x20000000
 80033f6:	2500      	movne	r5, #0
 80033f8:	432c      	orrs	r4, r5
 80033fa:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033fe:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 8003402:	4c25      	ldr	r4, [pc, #148]	; (8003498 <USB_HC_StartXfer+0x154>)
 8003404:	6025      	str	r5, [r4, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003406:	6825      	ldr	r5, [r4, #0]
 8003408:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 800340c:	6025      	str	r5, [r4, #0]
  if (hc->ep_is_in != 0U)
 800340e:	78cc      	ldrb	r4, [r1, #3]
 8003410:	b1c4      	cbz	r4, 8003444 <USB_HC_StartXfer+0x100>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003412:	4d21      	ldr	r5, [pc, #132]	; (8003498 <USB_HC_StartXfer+0x154>)
 8003414:	682c      	ldr	r4, [r5, #0]
 8003416:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800341a:	602c      	str	r4, [r5, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800341c:	4c1e      	ldr	r4, [pc, #120]	; (8003498 <USB_HC_StartXfer+0x154>)
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003424:	6025      	str	r5, [r4, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003426:	6824      	ldr	r4, [r4, #0]
 8003428:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800342c:	bb1a      	cbnz	r2, 8003476 <USB_HC_StartXfer+0x132>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800342e:	78cb      	ldrb	r3, [r1, #3]
 8003430:	bb0b      	cbnz	r3, 8003476 <USB_HC_StartXfer+0x132>
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	b1fb      	cbz	r3, 8003476 <USB_HC_StartXfer+0x132>
      switch (hc->ep_type)
 8003436:	79ca      	ldrb	r2, [r1, #7]
 8003438:	2a03      	cmp	r2, #3
 800343a:	d814      	bhi.n	8003466 <USB_HC_StartXfer+0x122>
 800343c:	e8df f002 	tbb	[pc, r2]
 8003440:	1e081e08 	.word	0x1e081e08
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003444:	4d14      	ldr	r5, [pc, #80]	; (8003498 <USB_HC_StartXfer+0x154>)
 8003446:	682c      	ldr	r4, [r5, #0]
 8003448:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 800344c:	602c      	str	r4, [r5, #0]
 800344e:	e7e5      	b.n	800341c <USB_HC_StartXfer+0xd8>
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003450:	3303      	adds	r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003452:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003454:	b292      	uxth	r2, r2
 8003456:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800345a:	4293      	cmp	r3, r2
 800345c:	d903      	bls.n	8003466 <USB_HC_StartXfer+0x122>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800345e:	6983      	ldr	r3, [r0, #24]
 8003460:	f043 0320 	orr.w	r3, r3, #32
 8003464:	6183      	str	r3, [r0, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003466:	68cc      	ldr	r4, [r1, #12]
 8003468:	784a      	ldrb	r2, [r1, #1]
 800346a:	8a0b      	ldrh	r3, [r1, #16]
 800346c:	2100      	movs	r1, #0
 800346e:	9100      	str	r1, [sp, #0]
 8003470:	4621      	mov	r1, r4
 8003472:	f7ff fd45 	bl	8002f00 <USB_WritePacket>
}
 8003476:	2000      	movs	r0, #0
 8003478:	b003      	add	sp, #12
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800347c:	3303      	adds	r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800347e:	6932      	ldr	r2, [r6, #16]
 8003480:	b292      	uxth	r2, r2
 8003482:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8003486:	4293      	cmp	r3, r2
 8003488:	d9ed      	bls.n	8003466 <USB_HC_StartXfer+0x122>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800348a:	6983      	ldr	r3, [r0, #24]
 800348c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003490:	6183      	str	r3, [r0, #24]
 8003492:	e7e8      	b.n	8003466 <USB_HC_StartXfer+0x122>
 8003494:	1ff80000 	.word	0x1ff80000
 8003498:	200000b0 	.word	0x200000b0

0800349c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a0:	4604      	mov	r4, r0
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80034a2:	f7ff fce8 	bl	8002e76 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80034a6:	2110      	movs	r1, #16
 80034a8:	4628      	mov	r0, r5
 80034aa:	f7ff fd03 	bl	8002eb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80034ae:	4628      	mov	r0, r5
 80034b0:	f7ff fd14 	bl	8002edc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80034b4:	2200      	movs	r2, #0
 80034b6:	e00a      	b.n	80034ce <USB_StopHost+0x32>
  {
    value = USBx_HC(i)->HCCHAR;
 80034b8:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 80034bc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80034c0:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80034c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80034c8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 80034cc:	3201      	adds	r2, #1
 80034ce:	2a0f      	cmp	r2, #15
 80034d0:	d9f2      	bls.n	80034b8 <USB_StopHost+0x1c>
 80034d2:	2000      	movs	r0, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	e000      	b.n	80034da <USB_StopHost+0x3e>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80034d8:	3001      	adds	r0, #1
 80034da:	280f      	cmp	r0, #15
 80034dc:	d813      	bhi.n	8003506 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80034de:	eb04 1640 	add.w	r6, r4, r0, lsl #5
 80034e2:	f506 61a0 	add.w	r1, r6, #1280	; 0x500
 80034e6:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
 80034ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80034ee:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80034f2:	f8c6 2500 	str.w	r2, [r6, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 80034f6:	3301      	adds	r3, #1
 80034f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034fc:	d8ec      	bhi.n	80034d8 <USB_StopHost+0x3c>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80034fe:	680a      	ldr	r2, [r1, #0]
 8003500:	2a00      	cmp	r2, #0
 8003502:	dbf8      	blt.n	80034f6 <USB_StopHost+0x5a>
 8003504:	e7e8      	b.n	80034d8 <USB_StopHost+0x3c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	f8c5 3414 	str.w	r3, [r5, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800350e:	616b      	str	r3, [r5, #20]
  (void)USB_EnableGlobalInt(USBx);
 8003510:	4628      	mov	r0, r5
 8003512:	f7ff fcaa 	bl	8002e6a <USB_EnableGlobalInt>

  return HAL_OK;
}
 8003516:	2000      	movs	r0, #0
 8003518:	bd70      	pop	{r4, r5, r6, pc}

0800351a <USBH_HID_ParseHIDDesc>:
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{

  desc->bLength                  = *(uint8_t  *) (buf + 0);
 800351a:	780b      	ldrb	r3, [r1, #0]
 800351c:	7003      	strb	r3, [r0, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 800351e:	784b      	ldrb	r3, [r1, #1]
 8003520:	7043      	strb	r3, [r0, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 8003522:	788b      	ldrb	r3, [r1, #2]
 8003524:	78ca      	ldrb	r2, [r1, #3]
 8003526:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800352a:	8043      	strh	r3, [r0, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 800352c:	790b      	ldrb	r3, [r1, #4]
 800352e:	7103      	strb	r3, [r0, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8003530:	794b      	ldrb	r3, [r1, #5]
 8003532:	7143      	strb	r3, [r0, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8003534:	798b      	ldrb	r3, [r1, #6]
 8003536:	7183      	strb	r3, [r0, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 8003538:	79cb      	ldrb	r3, [r1, #7]
 800353a:	7a0a      	ldrb	r2, [r1, #8]
 800353c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003540:	8103      	strh	r3, [r0, #8]
 8003542:	4770      	bx	lr

08003544 <USBH_HID_SOFProcess>:
{
 8003544:	b508      	push	{r3, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003546:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 800354a:	69db      	ldr	r3, [r3, #28]
  if(HID_Handle->state == HID_POLL)
 800354c:	789a      	ldrb	r2, [r3, #2]
 800354e:	2a06      	cmp	r2, #6
 8003550:	d001      	beq.n	8003556 <USBH_HID_SOFProcess+0x12>
}
 8003552:	2000      	movs	r0, #0
 8003554:	bd08      	pop	{r3, pc}
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8003556:	f8d0 26bc 	ldr.w	r2, [r0, #1724]	; 0x6bc
 800355a:	6a19      	ldr	r1, [r3, #32]
 800355c:	1a52      	subs	r2, r2, r1
 800355e:	8b99      	ldrh	r1, [r3, #28]
 8003560:	428a      	cmp	r2, r1
 8003562:	d3f6      	bcc.n	8003552 <USBH_HID_SOFProcess+0xe>
      HID_Handle->state = HID_GET_DATA;
 8003564:	2204      	movs	r2, #4
 8003566:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003568:	2302      	movs	r3, #2
 800356a:	f8c0 36d4 	str.w	r3, [r0, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800356e:	2300      	movs	r3, #0
 8003570:	461a      	mov	r2, r3
 8003572:	f200 61d4 	addw	r1, r0, #1748	; 0x6d4
 8003576:	f8d0 06cc 	ldr.w	r0, [r0, #1740]	; 0x6cc
 800357a:	f001 fd3b 	bl	8004ff4 <osMessageQueuePut>
 800357e:	e7e8      	b.n	8003552 <USBH_HID_SOFProcess+0xe>

08003580 <USBH_HID_InterfaceDeInit>:
{
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003584:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 8003588:	69dd      	ldr	r5, [r3, #28]
  if(HID_Handle->InPipe != 0x00U)
 800358a:	7869      	ldrb	r1, [r5, #1]
 800358c:	b969      	cbnz	r1, 80035aa <USBH_HID_InterfaceDeInit+0x2a>
  if(HID_Handle->OutPipe != 0x00U)
 800358e:	7829      	ldrb	r1, [r5, #0]
 8003590:	b9a1      	cbnz	r1, 80035bc <USBH_HID_InterfaceDeInit+0x3c>
  if(phost->pActiveClass->pData)
 8003592:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 8003596:	69d8      	ldr	r0, [r3, #28]
 8003598:	b128      	cbz	r0, 80035a6 <USBH_HID_InterfaceDeInit+0x26>
    USBH_free (phost->pActiveClass->pData);
 800359a:	f004 f8e9 	bl	8007770 <free>
    phost->pActiveClass->pData = 0U;
 800359e:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 80035a2:	2200      	movs	r2, #0
 80035a4:	61da      	str	r2, [r3, #28]
}
 80035a6:	2000      	movs	r0, #0
 80035a8:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 80035aa:	f001 fbde 	bl	8004d6a <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 80035ae:	7869      	ldrb	r1, [r5, #1]
 80035b0:	4620      	mov	r0, r4
 80035b2:	f001 fbf0 	bl	8004d96 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80035b6:	2300      	movs	r3, #0
 80035b8:	706b      	strb	r3, [r5, #1]
 80035ba:	e7e8      	b.n	800358e <USBH_HID_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80035bc:	4620      	mov	r0, r4
 80035be:	f001 fbd4 	bl	8004d6a <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 80035c2:	7829      	ldrb	r1, [r5, #0]
 80035c4:	4620      	mov	r0, r4
 80035c6:	f001 fbe6 	bl	8004d96 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80035ca:	2300      	movs	r3, #0
 80035cc:	702b      	strb	r3, [r5, #0]
 80035ce:	e7e0      	b.n	8003592 <USBH_HID_InterfaceDeInit+0x12>

080035d0 <USBH_HID_InterfaceInit>:
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b085      	sub	sp, #20
 80035d4:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80035d6:	f8d0 1678 	ldr.w	r1, [r0, #1656]	; 0x678
 80035da:	23ff      	movs	r3, #255	; 0xff
 80035dc:	2201      	movs	r2, #1
 80035de:	7909      	ldrb	r1, [r1, #4]
 80035e0:	f000 fdaa 	bl	8004138 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 80035e4:	28ff      	cmp	r0, #255	; 0xff
 80035e6:	d025      	beq.n	8003634 <USBH_HID_InterfaceInit+0x64>
    USBH_SelectInterface (phost, interface);
 80035e8:	4601      	mov	r1, r0
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 fd60 	bl	80040b0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *) pvPortMalloc (sizeof(HID_HandleTypeDef));
 80035f0:	f8d4 5678 	ldr.w	r5, [r4, #1656]	; 0x678
 80035f4:	2034      	movs	r0, #52	; 0x34
 80035f6:	f002 f823 	bl	8005640 <pvPortMalloc>
 80035fa:	61e8      	str	r0, [r5, #28]
    if(phost->pActiveClass->pData == NULL)
 80035fc:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 8003600:	69d9      	ldr	r1, [r3, #28]
 8003602:	b331      	cbz	r1, 8003652 <USBH_HID_InterfaceInit+0x82>
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003604:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 8003608:	69dd      	ldr	r5, [r3, #28]
    HID_Handle->state = HID_ERROR;
 800360a:	2307      	movs	r3, #7
 800360c:	70ab      	strb	r3, [r5, #2]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800360e:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 8003612:	221a      	movs	r2, #26
 8003614:	fb02 4303 	mla	r3, r2, r3, r4
 8003618:	f893 3645 	ldrb.w	r3, [r3, #1605]	; 0x645
 800361c:	2b01      	cmp	r3, #1
 800361e:	d01d      	beq.n	800365c <USBH_HID_InterfaceInit+0x8c>
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8003620:	2b02      	cmp	r3, #2
 8003622:	d024      	beq.n	800366e <USBH_HID_InterfaceInit+0x9e>
      USBH_UsrLog ("Protocol not supported.");
 8003624:	484d      	ldr	r0, [pc, #308]	; (800375c <USBH_HID_InterfaceInit+0x18c>)
 8003626:	f004 f96b 	bl	8007900 <iprintf>
 800362a:	200a      	movs	r0, #10
 800362c:	f004 f980 	bl	8007930 <putchar>
      return USBH_FAIL;
 8003630:	2002      	movs	r0, #2
 8003632:	e00c      	b.n	800364e <USBH_HID_InterfaceInit+0x7e>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8003634:	484a      	ldr	r0, [pc, #296]	; (8003760 <USBH_HID_InterfaceInit+0x190>)
 8003636:	f004 f963 	bl	8007900 <iprintf>
 800363a:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	4848      	ldr	r0, [pc, #288]	; (8003764 <USBH_HID_InterfaceInit+0x194>)
 8003642:	f004 f95d 	bl	8007900 <iprintf>
 8003646:	200a      	movs	r0, #10
 8003648:	f004 f972 	bl	8007930 <putchar>
    status = USBH_FAIL;
 800364c:	2002      	movs	r0, #2
}
 800364e:	b005      	add	sp, #20
 8003650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	printf("phost->pActiveClass->pData = %p [%d]\n",phost->pActiveClass->pData,sizeof(HID_HandleTypeDef));
 8003652:	2234      	movs	r2, #52	; 0x34
 8003654:	4844      	ldr	r0, [pc, #272]	; (8003768 <USBH_HID_InterfaceInit+0x198>)
 8003656:	f004 f953 	bl	8007900 <iprintf>
 800365a:	e7d3      	b.n	8003604 <USBH_HID_InterfaceInit+0x34>
      USBH_UsrLog ("KeyBoard device found!");
 800365c:	4843      	ldr	r0, [pc, #268]	; (800376c <USBH_HID_InterfaceInit+0x19c>)
 800365e:	f004 f94f 	bl	8007900 <iprintf>
 8003662:	200a      	movs	r0, #10
 8003664:	f004 f964 	bl	8007930 <putchar>
      HID_Handle->Init =  USBH_HID_KeybdInit;
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <USBH_HID_InterfaceInit+0x1a0>)
 800366a:	632b      	str	r3, [r5, #48]	; 0x30
 800366c:	e007      	b.n	800367e <USBH_HID_InterfaceInit+0xae>
      USBH_UsrLog ("Mouse device found!");
 800366e:	4841      	ldr	r0, [pc, #260]	; (8003774 <USBH_HID_InterfaceInit+0x1a4>)
 8003670:	f004 f946 	bl	8007900 <iprintf>
 8003674:	200a      	movs	r0, #10
 8003676:	f004 f95b 	bl	8007930 <putchar>
      HID_Handle->Init =  USBH_HID_MouseInit;
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <USBH_HID_InterfaceInit+0x1a8>)
 800367c:	632b      	str	r3, [r5, #48]	; 0x30
    HID_Handle->state     = HID_INIT;
 800367e:	2300      	movs	r3, #0
 8003680:	70ab      	strb	r3, [r5, #2]
    HID_Handle->ctl_state = HID_REQ_INIT;
 8003682:	716b      	strb	r3, [r5, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8003684:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 8003688:	221a      	movs	r2, #26
 800368a:	fb02 4303 	mla	r3, r2, r3, r4
 800368e:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 8003692:	76ab      	strb	r3, [r5, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003694:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 8003698:	fb02 4303 	mla	r3, r2, r3, r4
 800369c:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 80036a0:	832b      	strh	r3, [r5, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 80036a2:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 80036a6:	fb02 4303 	mla	r3, r2, r3, r4
 80036aa:	f893 364e 	ldrb.w	r3, [r3, #1614]	; 0x64e
 80036ae:	83ab      	strh	r3, [r5, #28]
    if (HID_Handle->poll  < HID_MIN_POLL)
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	d801      	bhi.n	80036b8 <USBH_HID_InterfaceInit+0xe8>
      HID_Handle->poll = HID_MIN_POLL;
 80036b4:	230a      	movs	r3, #10
 80036b6:	83ab      	strh	r3, [r5, #28]
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 80036b8:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 80036bc:	221a      	movs	r2, #26
 80036be:	fb02 4303 	mla	r3, r2, r3, r4
 80036c2:	f893 7642 	ldrb.w	r7, [r3, #1602]	; 0x642
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80036c6:	2f02      	cmp	r7, #2
 80036c8:	bf28      	it	cs
 80036ca:	2702      	movcs	r7, #2
  uint8_t num = 0U;
 80036cc:	2600      	movs	r6, #0
    for ( ;num < max_ep; num++)
 80036ce:	e019      	b.n	8003704 <USBH_HID_InterfaceInit+0x134>
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80036d0:	7129      	strb	r1, [r5, #4]
          USBH_AllocPipe(phost, HID_Handle->InEp);
 80036d2:	4620      	mov	r0, r4
 80036d4:	f001 fb4e 	bl	8004d74 <USBH_AllocPipe>
 80036d8:	4601      	mov	r1, r0
        HID_Handle->InPipe  =\
 80036da:	7068      	strb	r0, [r5, #1]
        USBH_OpenPipe  (phost,
 80036dc:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 80036e0:	792a      	ldrb	r2, [r5, #4]
 80036e2:	8b28      	ldrh	r0, [r5, #24]
 80036e4:	9002      	str	r0, [sp, #8]
 80036e6:	2003      	movs	r0, #3
 80036e8:	9001      	str	r0, [sp, #4]
 80036ea:	f894 061d 	ldrb.w	r0, [r4, #1565]	; 0x61d
 80036ee:	9000      	str	r0, [sp, #0]
 80036f0:	4620      	mov	r0, r4
 80036f2:	f001 fb2a 	bl	8004d4a <USBH_OpenPipe>
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0U);
 80036f6:	2200      	movs	r2, #0
 80036f8:	7869      	ldrb	r1, [r5, #1]
 80036fa:	4620      	mov	r0, r4
 80036fc:	f003 ff6a 	bl	80075d4 <USBH_LL_SetToggle>
    for ( ;num < max_ep; num++)
 8003700:	3601      	adds	r6, #1
 8003702:	b2f6      	uxtb	r6, r6
 8003704:	42be      	cmp	r6, r7
 8003706:	d226      	bcs.n	8003756 <USBH_HID_InterfaceInit+0x186>
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8003708:	f894 1620 	ldrb.w	r1, [r4, #1568]	; 0x620
 800370c:	1c73      	adds	r3, r6, #1
 800370e:	221a      	movs	r2, #26
 8003710:	fb02 f201 	mul.w	r2, r2, r1
 8003714:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003718:	4423      	add	r3, r4
 800371a:	f893 1642 	ldrb.w	r1, [r3, #1602]	; 0x642
 800371e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003722:	d1d5      	bne.n	80036d0 <USBH_HID_InterfaceInit+0x100>
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8003724:	70e9      	strb	r1, [r5, #3]
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8003726:	4620      	mov	r0, r4
 8003728:	f001 fb24 	bl	8004d74 <USBH_AllocPipe>
 800372c:	4601      	mov	r1, r0
        HID_Handle->OutPipe  =\
 800372e:	7028      	strb	r0, [r5, #0]
        USBH_OpenPipe  (phost,
 8003730:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8003734:	78ea      	ldrb	r2, [r5, #3]
 8003736:	8b28      	ldrh	r0, [r5, #24]
 8003738:	9002      	str	r0, [sp, #8]
 800373a:	2003      	movs	r0, #3
 800373c:	9001      	str	r0, [sp, #4]
 800373e:	f894 061d 	ldrb.w	r0, [r4, #1565]	; 0x61d
 8003742:	9000      	str	r0, [sp, #0]
 8003744:	4620      	mov	r0, r4
 8003746:	f001 fb00 	bl	8004d4a <USBH_OpenPipe>
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0U);
 800374a:	2200      	movs	r2, #0
 800374c:	7829      	ldrb	r1, [r5, #0]
 800374e:	4620      	mov	r0, r4
 8003750:	f003 ff40 	bl	80075d4 <USBH_LL_SetToggle>
 8003754:	e7d4      	b.n	8003700 <USBH_HID_InterfaceInit+0x130>
    status = USBH_OK;
 8003756:	2000      	movs	r0, #0
 8003758:	e779      	b.n	800364e <USBH_HID_InterfaceInit+0x7e>
 800375a:	bf00      	nop
 800375c:	080088f0 	.word	0x080088f0
 8003760:	08008868 	.word	0x08008868
 8003764:	08008874 	.word	0x08008874
 8003768:	0800889c 	.word	0x0800889c
 800376c:	080088c4 	.word	0x080088c4
 8003770:	08003b8d 	.word	0x08003b8d
 8003774:	080088dc 	.word	0x080088dc
 8003778:	08003c25 	.word	0x08003c25

0800377c <USBH_HID_GetHIDReportDescriptor>:
{
 800377c:	b500      	push	{lr}
 800377e:	b083      	sub	sp, #12
  status = USBH_GetDescriptor(phost,
 8003780:	9100      	str	r1, [sp, #0]
 8003782:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8003786:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800378a:	2101      	movs	r1, #1
 800378c:	f001 f9d7 	bl	8004b3e <USBH_GetDescriptor>
}
 8003790:	b003      	add	sp, #12
 8003792:	f85d fb04 	ldr.w	pc, [sp], #4

08003796 <USBH_HID_GetHIDDescriptor>:
{
 8003796:	b500      	push	{lr}
 8003798:	b083      	sub	sp, #12
  status = USBH_GetDescriptor(phost,
 800379a:	9100      	str	r1, [sp, #0]
 800379c:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 80037a0:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80037a4:	2101      	movs	r1, #1
 80037a6:	f001 f9ca 	bl	8004b3e <USBH_GetDescriptor>
}
 80037aa:	b003      	add	sp, #12
 80037ac:	f85d fb04 	ldr.w	pc, [sp], #4

080037b0 <USBH_HID_SetIdle>:
{
 80037b0:	b510      	push	{r4, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80037b2:	2421      	movs	r4, #33	; 0x21
 80037b4:	7404      	strb	r4, [r0, #16]
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80037b6:	240a      	movs	r4, #10
 80037b8:	7444      	strb	r4, [r0, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80037ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037be:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80037c0:	2100      	movs	r1, #0
 80037c2:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80037c4:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80037c6:	460a      	mov	r2, r1
 80037c8:	f001 f988 	bl	8004adc <USBH_CtlReq>
}
 80037cc:	bd10      	pop	{r4, pc}

080037ce <USBH_HID_GetReport>:
{
 80037ce:	b538      	push	{r3, r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 80037d0:	25a1      	movs	r5, #161	; 0xa1
 80037d2:	7405      	strb	r5, [r0, #16]
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80037d4:	2501      	movs	r5, #1
 80037d6:	7445      	strb	r5, [r0, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80037d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037dc:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80037de:	2200      	movs	r2, #0
 80037e0:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80037e2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80037e6:	b292      	uxth	r2, r2
 80037e8:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80037ea:	4619      	mov	r1, r3
 80037ec:	f001 f976 	bl	8004adc <USBH_CtlReq>
}
 80037f0:	bd38      	pop	{r3, r4, r5, pc}

080037f2 <USBH_HID_SetProtocol>:
{
 80037f2:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80037f4:	2321      	movs	r3, #33	; 0x21
 80037f6:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80037f8:	230b      	movs	r3, #11
 80037fa:	7443      	strb	r3, [r0, #17]
  if(protocol)
 80037fc:	b941      	cbnz	r1, 8003810 <USBH_HID_SetProtocol+0x1e>
    phost->Control.setup.b.wValue.w = 1U;
 80037fe:	2301      	movs	r3, #1
 8003800:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003802:	2100      	movs	r1, #0
 8003804:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8003806:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003808:	460a      	mov	r2, r1
 800380a:	f001 f967 	bl	8004adc <USBH_CtlReq>
}
 800380e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.wValue.w = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	8243      	strh	r3, [r0, #18]
 8003814:	e7f5      	b.n	8003802 <USBH_HID_SetProtocol+0x10>

08003816 <USBH_HID_ClassRequest>:
{
 8003816:	b570      	push	{r4, r5, r6, lr}
 8003818:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800381a:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 800381e:	69dd      	ldr	r5, [r3, #28]
  switch (HID_Handle->ctl_state)
 8003820:	796b      	ldrb	r3, [r5, #5]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d83d      	bhi.n	80038a2 <USBH_HID_ClassRequest+0x8c>
 8003826:	e8df f003 	tbb	[pc, r3]
 800382a:	3c03      	.short	0x3c03
 800382c:	2d1c0314 	.word	0x2d1c0314
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 8003830:	2109      	movs	r1, #9
 8003832:	f7ff ffb0 	bl	8003796 <USBH_HID_GetHIDDescriptor>
 8003836:	b110      	cbz	r0, 800383e <USBH_HID_ClassRequest+0x28>
  USBH_StatusTypeDef status         = USBH_BUSY;
 8003838:	2601      	movs	r6, #1
}
 800383a:	4630      	mov	r0, r6
 800383c:	bd70      	pop	{r4, r5, r6, pc}
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 800383e:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 8003842:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8003846:	f7ff fe68 	bl	800351a <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800384a:	2302      	movs	r3, #2
 800384c:	716b      	strb	r3, [r5, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 800384e:	2601      	movs	r6, #1
 8003850:	e7f3      	b.n	800383a <USBH_HID_ClassRequest+0x24>
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8003852:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8003854:	f7ff ff92 	bl	800377c <USBH_HID_GetHIDReportDescriptor>
 8003858:	bb28      	cbnz	r0, 80038a6 <USBH_HID_ClassRequest+0x90>
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800385a:	2304      	movs	r3, #4
 800385c:	716b      	strb	r3, [r5, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 800385e:	2601      	movs	r6, #1
 8003860:	e7eb      	b.n	800383a <USBH_HID_ClassRequest+0x24>
    classReqStatus = USBH_HID_SetIdle (phost, 0U, 0U);
 8003862:	2200      	movs	r2, #0
 8003864:	4611      	mov	r1, r2
 8003866:	f7ff ffa3 	bl	80037b0 <USBH_HID_SetIdle>
    if (classReqStatus == USBH_OK)
 800386a:	b118      	cbz	r0, 8003874 <USBH_HID_ClassRequest+0x5e>
      if(classReqStatus == USBH_NOT_SUPPORTED)
 800386c:	2803      	cmp	r0, #3
 800386e:	d005      	beq.n	800387c <USBH_HID_ClassRequest+0x66>
  USBH_StatusTypeDef status         = USBH_BUSY;
 8003870:	2601      	movs	r6, #1
 8003872:	e7e2      	b.n	800383a <USBH_HID_ClassRequest+0x24>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8003874:	2305      	movs	r3, #5
 8003876:	716b      	strb	r3, [r5, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8003878:	2601      	movs	r6, #1
 800387a:	e7de      	b.n	800383a <USBH_HID_ClassRequest+0x24>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800387c:	2305      	movs	r3, #5
 800387e:	716b      	strb	r3, [r5, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8003880:	2601      	movs	r6, #1
 8003882:	e7da      	b.n	800383a <USBH_HID_ClassRequest+0x24>
    if (USBH_HID_SetProtocol (phost, 0U) == USBH_OK)
 8003884:	2100      	movs	r1, #0
 8003886:	f7ff ffb4 	bl	80037f2 <USBH_HID_SetProtocol>
 800388a:	4606      	mov	r6, r0
 800388c:	b108      	cbz	r0, 8003892 <USBH_HID_ClassRequest+0x7c>
  USBH_StatusTypeDef status         = USBH_BUSY;
 800388e:	2601      	movs	r6, #1
 8003890:	e7d3      	b.n	800383a <USBH_HID_ClassRequest+0x24>
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8003892:	2301      	movs	r3, #1
 8003894:	716b      	strb	r3, [r5, #5]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003896:	f8d4 36c8 	ldr.w	r3, [r4, #1736]	; 0x6c8
 800389a:	2102      	movs	r1, #2
 800389c:	4620      	mov	r0, r4
 800389e:	4798      	blx	r3
 80038a0:	e7cb      	b.n	800383a <USBH_HID_ClassRequest+0x24>
  USBH_StatusTypeDef status         = USBH_BUSY;
 80038a2:	2601      	movs	r6, #1
 80038a4:	e7c9      	b.n	800383a <USBH_HID_ClassRequest+0x24>
 80038a6:	2601      	movs	r6, #1
 80038a8:	e7c7      	b.n	800383a <USBH_HID_ClassRequest+0x24>

080038aa <USBH_HID_FifoInit>:
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
     f->head = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	8083      	strh	r3, [r0, #4]
     f->tail = 0U;
 80038ae:	80c3      	strh	r3, [r0, #6]
     f->lock = 0U;
 80038b0:	7283      	strb	r3, [r0, #10]
     f->size = size;
 80038b2:	8102      	strh	r2, [r0, #8]
     f->buf = buf;
 80038b4:	6001      	str	r1, [r0, #0]
 80038b6:	4770      	bx	lr

080038b8 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80038b8:	4603      	mov	r3, r0
  uint16_t i;
  uint8_t * p;
  p = (uint8_t*) buf;

  if(f->lock == 0U)
 80038ba:	7a80      	ldrb	r0, [r0, #10]
 80038bc:	bb28      	cbnz	r0, 800390a <USBH_HID_FifoRead+0x52>
  {
    f->lock = 1U;
 80038be:	2001      	movs	r0, #1
 80038c0:	7298      	strb	r0, [r3, #10]
    for(i = 0U; i < nbytes; i++)
 80038c2:	2000      	movs	r0, #0
 80038c4:	4290      	cmp	r0, r2
 80038c6:	d220      	bcs.n	800390a <USBH_HID_FifoRead+0x52>
{
 80038c8:	b470      	push	{r4, r5, r6}
 80038ca:	e007      	b.n	80038dc <USBH_HID_FifoRead+0x24>
        {
          f->tail = 0U;
        }
      } else
      {
        f->lock = 0U;
 80038cc:	2200      	movs	r2, #0
 80038ce:	729a      	strb	r2, [r3, #10]
        return i;
 80038d0:	e019      	b.n	8003906 <USBH_HID_FifoRead+0x4e>
    for(i = 0U; i < nbytes; i++)
 80038d2:	3001      	adds	r0, #1
 80038d4:	b280      	uxth	r0, r0
        *p++ = f->buf[f->tail];
 80038d6:	4629      	mov	r1, r5
    for(i = 0U; i < nbytes; i++)
 80038d8:	4290      	cmp	r0, r2
 80038da:	d211      	bcs.n	8003900 <USBH_HID_FifoRead+0x48>
      if( f->tail != f->head)
 80038dc:	88dc      	ldrh	r4, [r3, #6]
 80038de:	889d      	ldrh	r5, [r3, #4]
 80038e0:	42ac      	cmp	r4, r5
 80038e2:	d0f3      	beq.n	80038cc <USBH_HID_FifoRead+0x14>
        *p++ = f->buf[f->tail];
 80038e4:	1c4d      	adds	r5, r1, #1
 80038e6:	681e      	ldr	r6, [r3, #0]
 80038e8:	5d34      	ldrb	r4, [r6, r4]
 80038ea:	700c      	strb	r4, [r1, #0]
        f->tail++;
 80038ec:	88d9      	ldrh	r1, [r3, #6]
 80038ee:	3101      	adds	r1, #1
 80038f0:	b289      	uxth	r1, r1
 80038f2:	80d9      	strh	r1, [r3, #6]
        if( f->tail == f->size)
 80038f4:	891c      	ldrh	r4, [r3, #8]
 80038f6:	42a1      	cmp	r1, r4
 80038f8:	d1eb      	bne.n	80038d2 <USBH_HID_FifoRead+0x1a>
          f->tail = 0U;
 80038fa:	2100      	movs	r1, #0
 80038fc:	80d9      	strh	r1, [r3, #6]
 80038fe:	e7e8      	b.n	80038d2 <USBH_HID_FifoRead+0x1a>
      }
    }
  }
  f->lock = 0U;
 8003900:	2100      	movs	r1, #0
 8003902:	7299      	strb	r1, [r3, #10]

  return nbytes;
 8003904:	4610      	mov	r0, r2
}
 8003906:	bc70      	pop	{r4, r5, r6}
 8003908:	4770      	bx	lr
  f->lock = 0U;
 800390a:	2100      	movs	r1, #0
 800390c:	7299      	strb	r1, [r3, #10]
  return nbytes;
 800390e:	4610      	mov	r0, r2
 8003910:	4770      	bx	lr

08003912 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8003912:	4603      	mov	r3, r0
  uint16_t i;
  uint8_t *p;
  p = (uint8_t*) buf;
  if(f->lock == 0U)
 8003914:	7a80      	ldrb	r0, [r0, #10]
 8003916:	bb50      	cbnz	r0, 800396e <USBH_HID_FifoWrite+0x5c>
  {
    f->lock = 1U;
 8003918:	2001      	movs	r0, #1
 800391a:	7298      	strb	r0, [r3, #10]
    for(i = 0U; i < nbytes; i++)
 800391c:	2000      	movs	r0, #0
 800391e:	4290      	cmp	r0, r2
 8003920:	d225      	bcs.n	800396e <USBH_HID_FifoWrite+0x5c>
{
 8003922:	b4f0      	push	{r4, r5, r6, r7}
 8003924:	e008      	b.n	8003938 <USBH_HID_FifoWrite+0x26>
    {
      if( (f->head + 1U == f->tail) ||
         ( (f->head + 1U == f->size) && (f->tail == 0U)))
 8003926:	b97e      	cbnz	r6, 8003948 <USBH_HID_FifoWrite+0x36>
      {
        f->lock = 0U;
 8003928:	2200      	movs	r2, #0
 800392a:	729a      	strb	r2, [r3, #10]
        return i;
 800392c:	e01d      	b.n	800396a <USBH_HID_FifoWrite+0x58>
    for(i = 0U; i < nbytes; i++)
 800392e:	3001      	adds	r0, #1
 8003930:	b280      	uxth	r0, r0
      }
      else
      {
        f->buf[f->head] = *p++;
 8003932:	4621      	mov	r1, r4
    for(i = 0U; i < nbytes; i++)
 8003934:	4290      	cmp	r0, r2
 8003936:	d215      	bcs.n	8003964 <USBH_HID_FifoWrite+0x52>
      if( (f->head + 1U == f->tail) ||
 8003938:	889d      	ldrh	r5, [r3, #4]
 800393a:	1c6c      	adds	r4, r5, #1
 800393c:	88de      	ldrh	r6, [r3, #6]
 800393e:	42b4      	cmp	r4, r6
 8003940:	d0f2      	beq.n	8003928 <USBH_HID_FifoWrite+0x16>
         ( (f->head + 1U == f->size) && (f->tail == 0U)))
 8003942:	891f      	ldrh	r7, [r3, #8]
      if( (f->head + 1U == f->tail) ||
 8003944:	42bc      	cmp	r4, r7
 8003946:	d0ee      	beq.n	8003926 <USBH_HID_FifoWrite+0x14>
        f->buf[f->head] = *p++;
 8003948:	681e      	ldr	r6, [r3, #0]
 800394a:	1c4c      	adds	r4, r1, #1
 800394c:	7809      	ldrb	r1, [r1, #0]
 800394e:	5571      	strb	r1, [r6, r5]
        f->head++;
 8003950:	8899      	ldrh	r1, [r3, #4]
 8003952:	3101      	adds	r1, #1
 8003954:	b289      	uxth	r1, r1
 8003956:	8099      	strh	r1, [r3, #4]
        if( f->head == f->size)
 8003958:	891d      	ldrh	r5, [r3, #8]
 800395a:	42a9      	cmp	r1, r5
 800395c:	d1e7      	bne.n	800392e <USBH_HID_FifoWrite+0x1c>
        {
          f->head = 0U;
 800395e:	2100      	movs	r1, #0
 8003960:	8099      	strh	r1, [r3, #4]
 8003962:	e7e4      	b.n	800392e <USBH_HID_FifoWrite+0x1c>
        }
      }
    }
  }
  f->lock = 0U;
 8003964:	2100      	movs	r1, #0
 8003966:	7299      	strb	r1, [r3, #10]
  return nbytes;
 8003968:	4610      	mov	r0, r2
}
 800396a:	bcf0      	pop	{r4, r5, r6, r7}
 800396c:	4770      	bx	lr
  f->lock = 0U;
 800396e:	2100      	movs	r1, #0
 8003970:	7299      	strb	r1, [r3, #10]
  return nbytes;
 8003972:	4610      	mov	r0, r2
 8003974:	4770      	bx	lr

08003976 <USBH_HID_Process>:
{
 8003976:	b570      	push	{r4, r5, r6, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800397c:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 8003980:	69dd      	ldr	r5, [r3, #28]
  switch (HID_Handle->state)
 8003982:	78ab      	ldrb	r3, [r5, #2]
 8003984:	2b06      	cmp	r3, #6
 8003986:	f200 809c 	bhi.w	8003ac2 <USBH_HID_Process+0x14c>
 800398a:	e8df f003 	tbb	[pc, r3]
 800398e:	1704      	.short	0x1704
 8003990:	44589a9a 	.word	0x44589a9a
 8003994:	66          	.byte	0x66
 8003995:	00          	.byte	0x00
    HID_Handle->Init(phost);
 8003996:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003998:	4798      	blx	r3
    HID_Handle->state = HID_IDLE;
 800399a:	2301      	movs	r3, #1
 800399c:	70ab      	strb	r3, [r5, #2]
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800399e:	2302      	movs	r3, #2
 80039a0:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80039a4:	2300      	movs	r3, #0
 80039a6:	461a      	mov	r2, r3
 80039a8:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80039ac:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80039b0:	f001 fb20 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_OK;
 80039b4:	2600      	movs	r6, #0
}
 80039b6:	4630      	mov	r0, r6
 80039b8:	b002      	add	sp, #8
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_HID_GetReport (phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80039bc:	696b      	ldr	r3, [r5, #20]
 80039be:	7e2a      	ldrb	r2, [r5, #24]
 80039c0:	9200      	str	r2, [sp, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2101      	movs	r1, #1
 80039c6:	f7ff ff02 	bl	80037ce <USBH_HID_GetReport>
    if (status == USBH_OK)
 80039ca:	4606      	mov	r6, r0
 80039cc:	b190      	cbz	r0, 80039f4 <USBH_HID_Process+0x7e>
    else if (status == USBH_BUSY)
 80039ce:	2801      	cmp	r0, #1
 80039d0:	d019      	beq.n	8003a06 <USBH_HID_Process+0x90>
    else if (status == USBH_NOT_SUPPORTED)
 80039d2:	2803      	cmp	r0, #3
 80039d4:	d01b      	beq.n	8003a0e <USBH_HID_Process+0x98>
      HID_Handle->state = HID_ERROR;
 80039d6:	2307      	movs	r3, #7
 80039d8:	70ab      	strb	r3, [r5, #2]
      status = USBH_FAIL;
 80039da:	2602      	movs	r6, #2
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80039dc:	2302      	movs	r3, #2
 80039de:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80039e2:	2300      	movs	r3, #0
 80039e4:	461a      	mov	r2, r3
 80039e6:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80039ea:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80039ee:	f001 fb01 	bl	8004ff4 <osMessageQueuePut>
    break;
 80039f2:	e7e0      	b.n	80039b6 <USBH_HID_Process+0x40>
      USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80039f4:	8b2a      	ldrh	r2, [r5, #24]
 80039f6:	6969      	ldr	r1, [r5, #20]
 80039f8:	f105 0008 	add.w	r0, r5, #8
 80039fc:	f7ff ff89 	bl	8003912 <USBH_HID_FifoWrite>
      HID_Handle->state = HID_SYNC;
 8003a00:	2305      	movs	r3, #5
 8003a02:	70ab      	strb	r3, [r5, #2]
 8003a04:	e7ea      	b.n	80039dc <USBH_HID_Process+0x66>
      HID_Handle->state = HID_IDLE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	70ab      	strb	r3, [r5, #2]
      status = USBH_OK;
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	e7e6      	b.n	80039dc <USBH_HID_Process+0x66>
      HID_Handle->state = HID_SYNC;
 8003a0e:	2305      	movs	r3, #5
 8003a10:	70ab      	strb	r3, [r5, #2]
      status = USBH_OK;
 8003a12:	2600      	movs	r6, #0
 8003a14:	e7e2      	b.n	80039dc <USBH_HID_Process+0x66>
    if(phost->Timer & 1U)
 8003a16:	f8d0 36bc 	ldr.w	r3, [r0, #1724]	; 0x6bc
 8003a1a:	f013 0f01 	tst.w	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <USBH_HID_Process+0xae>
      HID_Handle->state = HID_GET_DATA;
 8003a20:	2304      	movs	r3, #4
 8003a22:	70ab      	strb	r3, [r5, #2]
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003a24:	2302      	movs	r3, #2
 8003a26:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8003a32:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8003a36:	f001 fadd 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_OK;
 8003a3a:	2600      	movs	r6, #0
    break;
 8003a3c:	e7bb      	b.n	80039b6 <USBH_HID_Process+0x40>
    USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8003a3e:	786b      	ldrb	r3, [r5, #1]
 8003a40:	7e2a      	ldrb	r2, [r5, #24]
 8003a42:	6969      	ldr	r1, [r5, #20]
 8003a44:	f001 f95f 	bl	8004d06 <USBH_InterruptReceiveData>
    HID_Handle->state = HID_POLL;
 8003a48:	2306      	movs	r3, #6
 8003a4a:	70ab      	strb	r3, [r5, #2]
    HID_Handle->timer = phost->Timer;
 8003a4c:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
 8003a50:	622b      	str	r3, [r5, #32]
    HID_Handle->DataReady = 0U;
 8003a52:	2600      	movs	r6, #0
 8003a54:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
    break;
 8003a58:	e7ad      	b.n	80039b6 <USBH_HID_Process+0x40>
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 8003a5a:	7869      	ldrb	r1, [r5, #1]
 8003a5c:	f003 fda6 	bl	80075ac <USBH_LL_GetURBState>
 8003a60:	2801      	cmp	r0, #1
 8003a62:	d007      	beq.n	8003a74 <USBH_HID_Process+0xfe>
      if(USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8003a64:	7869      	ldrb	r1, [r5, #1]
 8003a66:	4620      	mov	r0, r4
 8003a68:	f003 fda0 	bl	80075ac <USBH_LL_GetURBState>
 8003a6c:	2805      	cmp	r0, #5
 8003a6e:	d01f      	beq.n	8003ab0 <USBH_HID_Process+0x13a>
  USBH_StatusTypeDef status = USBH_OK;
 8003a70:	2600      	movs	r6, #0
 8003a72:	e7a0      	b.n	80039b6 <USBH_HID_Process+0x40>
      if(HID_Handle->DataReady == 0U)
 8003a74:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8003a78:	b10b      	cbz	r3, 8003a7e <USBH_HID_Process+0x108>
  USBH_StatusTypeDef status = USBH_OK;
 8003a7a:	2600      	movs	r6, #0
 8003a7c:	e79b      	b.n	80039b6 <USBH_HID_Process+0x40>
        USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8003a7e:	8b2a      	ldrh	r2, [r5, #24]
 8003a80:	6969      	ldr	r1, [r5, #20]
 8003a82:	f105 0008 	add.w	r0, r5, #8
 8003a86:	f7ff ff44 	bl	8003912 <USBH_HID_FifoWrite>
        HID_Handle->DataReady = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 8003a90:	4620      	mov	r0, r4
 8003a92:	f003 fb01 	bl	8007098 <USBH_HID_EventCallback>
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8003a96:	2302      	movs	r3, #2
 8003a98:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8003aa4:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8003aa8:	f001 faa4 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_OK;
 8003aac:	2600      	movs	r6, #0
 8003aae:	e782      	b.n	80039b6 <USBH_HID_Process+0x40>
        if(USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8003ab0:	7ea9      	ldrb	r1, [r5, #26]
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f001 f8de 	bl	8004c74 <USBH_ClrFeature>
 8003ab8:	4606      	mov	r6, r0
 8003aba:	b920      	cbnz	r0, 8003ac6 <USBH_HID_Process+0x150>
          HID_Handle->state = HID_GET_DATA;
 8003abc:	2304      	movs	r3, #4
 8003abe:	70ab      	strb	r3, [r5, #2]
 8003ac0:	e779      	b.n	80039b6 <USBH_HID_Process+0x40>
  USBH_StatusTypeDef status = USBH_OK;
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	e777      	b.n	80039b6 <USBH_HID_Process+0x40>
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	e775      	b.n	80039b6 <USBH_HID_Process+0x40>
	...

08003acc <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8003acc:	b510      	push	{r4, lr}
  uint8_t x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003ace:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 8003ad2:	69dc      	ldr	r4, [r3, #28]
  if(HID_Handle->length == 0U)
 8003ad4:	8b22      	ldrh	r2, [r4, #24]
 8003ad6:	b90a      	cbnz	r2, 8003adc <USBH_HID_KeybdDecode+0x10>
  {
    return USBH_FAIL;
 8003ad8:	2002      	movs	r0, #2
 8003ada:	bd10      	pop	{r4, pc}
  }
  /*Fill report */
  if(USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8003adc:	4920      	ldr	r1, [pc, #128]	; (8003b60 <USBH_HID_KeybdDecode+0x94>)
 8003ade:	f104 0008 	add.w	r0, r4, #8
 8003ae2:	f7ff fee9 	bl	80038b8 <USBH_HID_FifoRead>
 8003ae6:	8b23      	ldrh	r3, [r4, #24]
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	d001      	beq.n	8003af0 <USBH_HID_KeybdDecode+0x24>
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
    }

    return USBH_OK;
  }
  return   USBH_FAIL;
 8003aec:	2002      	movs	r0, #2
}
 8003aee:	bd10      	pop	{r4, pc}
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8003af0:	2100      	movs	r1, #0
 8003af2:	481c      	ldr	r0, [pc, #112]	; (8003b64 <USBH_HID_KeybdDecode+0x98>)
 8003af4:	f000 f8b8 	bl	8003c68 <HID_ReadItem>
 8003af8:	4c1b      	ldr	r4, [pc, #108]	; (8003b68 <USBH_HID_KeybdDecode+0x9c>)
 8003afa:	7060      	strb	r0, [r4, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8003afc:	2100      	movs	r1, #0
 8003afe:	481b      	ldr	r0, [pc, #108]	; (8003b6c <USBH_HID_KeybdDecode+0xa0>)
 8003b00:	f000 f8b2 	bl	8003c68 <HID_ReadItem>
 8003b04:	70a0      	strb	r0, [r4, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8003b06:	2100      	movs	r1, #0
 8003b08:	4819      	ldr	r0, [pc, #100]	; (8003b70 <USBH_HID_KeybdDecode+0xa4>)
 8003b0a:	f000 f8ad 	bl	8003c68 <HID_ReadItem>
 8003b0e:	70e0      	strb	r0, [r4, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8003b10:	2100      	movs	r1, #0
 8003b12:	4818      	ldr	r0, [pc, #96]	; (8003b74 <USBH_HID_KeybdDecode+0xa8>)
 8003b14:	f000 f8a8 	bl	8003c68 <HID_ReadItem>
 8003b18:	7120      	strb	r0, [r4, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4816      	ldr	r0, [pc, #88]	; (8003b78 <USBH_HID_KeybdDecode+0xac>)
 8003b1e:	f000 f8a3 	bl	8003c68 <HID_ReadItem>
 8003b22:	7160      	strb	r0, [r4, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8003b24:	2100      	movs	r1, #0
 8003b26:	4815      	ldr	r0, [pc, #84]	; (8003b7c <USBH_HID_KeybdDecode+0xb0>)
 8003b28:	f000 f89e 	bl	8003c68 <HID_ReadItem>
 8003b2c:	71a0      	strb	r0, [r4, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4813      	ldr	r0, [pc, #76]	; (8003b80 <USBH_HID_KeybdDecode+0xb4>)
 8003b32:	f000 f899 	bl	8003c68 <HID_ReadItem>
 8003b36:	71e0      	strb	r0, [r4, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4812      	ldr	r0, [pc, #72]	; (8003b84 <USBH_HID_KeybdDecode+0xb8>)
 8003b3c:	f000 f894 	bl	8003c68 <HID_ReadItem>
 8003b40:	7220      	strb	r0, [r4, #8]
    for(x = 0U; x < sizeof(keybd_info.keys); x++)
 8003b42:	2400      	movs	r4, #0
 8003b44:	e008      	b.n	8003b58 <USBH_HID_KeybdDecode+0x8c>
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8003b46:	4621      	mov	r1, r4
 8003b48:	480f      	ldr	r0, [pc, #60]	; (8003b88 <USBH_HID_KeybdDecode+0xbc>)
 8003b4a:	f000 f88d 	bl	8003c68 <HID_ReadItem>
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <USBH_HID_KeybdDecode+0x9c>)
 8003b50:	4423      	add	r3, r4
 8003b52:	7258      	strb	r0, [r3, #9]
    for(x = 0U; x < sizeof(keybd_info.keys); x++)
 8003b54:	3401      	adds	r4, #1
 8003b56:	b2e4      	uxtb	r4, r4
 8003b58:	2c05      	cmp	r4, #5
 8003b5a:	d9f4      	bls.n	8003b46 <USBH_HID_KeybdDecode+0x7a>
    return USBH_OK;
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	bd10      	pop	{r4, pc}
 8003b60:	200073c0 	.word	0x200073c0
 8003b64:	08008b3c 	.word	0x08008b3c
 8003b68:	200073c8 	.word	0x200073c8
 8003b6c:	08008b7c 	.word	0x08008b7c
 8003b70:	08008b1c 	.word	0x08008b1c
 8003b74:	08008b5c 	.word	0x08008b5c
 8003b78:	08008bbc 	.word	0x08008bbc
 8003b7c:	08008bfc 	.word	0x08008bfc
 8003b80:	08008b9c 	.word	0x08008b9c
 8003b84:	08008bdc 	.word	0x08008bdc
 8003b88:	08008afc 	.word	0x08008afc

08003b8c <USBH_HID_KeybdInit>:
{
 8003b8c:	b538      	push	{r3, r4, r5, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003b8e:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 8003b92:	69dc      	ldr	r4, [r3, #28]
  keybd_info.lctrl=keybd_info.lshift = 0U;
 8003b94:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <USBH_HID_KeybdInit+0x4c>)
 8003b96:	2300      	movs	r3, #0
 8003b98:	7093      	strb	r3, [r2, #2]
 8003b9a:	7053      	strb	r3, [r2, #1]
  keybd_info.lalt=keybd_info.lgui = 0U;
 8003b9c:	7113      	strb	r3, [r2, #4]
 8003b9e:	70d3      	strb	r3, [r2, #3]
  keybd_info.rctrl=keybd_info.rshift = 0U;
 8003ba0:	7193      	strb	r3, [r2, #6]
 8003ba2:	7153      	strb	r3, [r2, #5]
  keybd_info.ralt=keybd_info.rgui = 0U;
 8003ba4:	7213      	strb	r3, [r2, #8]
 8003ba6:	71d3      	strb	r3, [r2, #7]
  for(x = 0U; x < (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8003ba8:	e004      	b.n	8003bb4 <USBH_HID_KeybdInit+0x28>
    keybd_report_data[x] = 0U;
 8003baa:	2500      	movs	r5, #0
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <USBH_HID_KeybdInit+0x50>)
 8003bae:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
  for(x = 0U; x < (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d9f8      	bls.n	8003baa <USBH_HID_KeybdInit+0x1e>
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 8003bb8:	8b23      	ldrh	r3, [r4, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <USBH_HID_KeybdInit+0x36>
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	8323      	strh	r3, [r4, #24]
  HID_Handle->pData = (uint8_t*)(void *)keybd_report_data;
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <USBH_HID_KeybdInit+0x50>)
 8003bc4:	6163      	str	r3, [r4, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8003bc6:	2250      	movs	r2, #80	; 0x50
 8003bc8:	f500 7107 	add.w	r1, r0, #540	; 0x21c
 8003bcc:	f104 0008 	add.w	r0, r4, #8
 8003bd0:	f7ff fe6b 	bl	80038aa <USBH_HID_FifoInit>
}
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	200073c8 	.word	0x200073c8
 8003bdc:	200073c0 	.word	0x200073c0

08003be0 <USBH_HID_GetKeybdInfo>:
{
 8003be0:	b508      	push	{r3, lr}
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8003be2:	f7ff ff73 	bl	8003acc <USBH_HID_KeybdDecode>
 8003be6:	b908      	cbnz	r0, 8003bec <USBH_HID_GetKeybdInfo+0xc>
  return &keybd_info;
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <USBH_HID_GetKeybdInfo+0x10>)
 8003bea:	bd08      	pop	{r3, pc}
  return NULL;
 8003bec:	2000      	movs	r0, #0
}
 8003bee:	bd08      	pop	{r3, pc}
 8003bf0:	200073c8 	.word	0x200073c8

08003bf4 <USBH_HID_GetASCIICode>:
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
  uint8_t   output;
  if((info->lshift == 1U) || (info->rshift))
 8003bf4:	7883      	ldrb	r3, [r0, #2]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d007      	beq.n	8003c0a <USBH_HID_GetASCIICode+0x16>
 8003bfa:	7983      	ldrb	r3, [r0, #6]
 8003bfc:	b92b      	cbnz	r3, 8003c0a <USBH_HID_GetASCIICode+0x16>
  {
  output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
  }
  else
  {
  output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8003bfe:	7a43      	ldrb	r3, [r0, #9]
 8003c00:	4a05      	ldr	r2, [pc, #20]	; (8003c18 <USBH_HID_GetASCIICode+0x24>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <USBH_HID_GetASCIICode+0x28>)
 8003c06:	5cd0      	ldrb	r0, [r2, r3]
  }
  return output;
}
 8003c08:	4770      	bx	lr
  output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8003c0a:	7a43      	ldrb	r3, [r0, #9]
 8003c0c:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <USBH_HID_GetASCIICode+0x24>)
 8003c0e:	5cd3      	ldrb	r3, [r2, r3]
 8003c10:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <USBH_HID_GetASCIICode+0x2c>)
 8003c12:	5cd0      	ldrb	r0, [r2, r3]
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	0800890c 	.word	0x0800890c
 8003c1c:	080089f4 	.word	0x080089f4
 8003c20:	08008a78 	.word	0x08008a78

08003c24 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8003c24:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003c26:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 8003c2a:	69dc      	ldr	r4, [r3, #28]

  mouse_info.x = 0U;
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <USBH_HID_MouseInit+0x3c>)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	7013      	strb	r3, [r2, #0]
  mouse_info.y = 0U;
 8003c32:	7053      	strb	r3, [r2, #1]
  mouse_info.buttons[0] = 0U;
 8003c34:	7093      	strb	r3, [r2, #2]
  mouse_info.buttons[1] = 0U;
 8003c36:	70d3      	strb	r3, [r2, #3]
  mouse_info.buttons[2] = 0U;
 8003c38:	7113      	strb	r3, [r2, #4]

  mouse_report_data[0] = 0U;
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <USBH_HID_MouseInit+0x40>)
 8003c3c:	6013      	str	r3, [r2, #0]

  if(HID_Handle->length > sizeof(mouse_report_data))
 8003c3e:	8b23      	ldrh	r3, [r4, #24]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d901      	bls.n	8003c48 <USBH_HID_MouseInit+0x24>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8003c44:	2304      	movs	r3, #4
 8003c46:	8323      	strh	r3, [r4, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_report_data;
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <USBH_HID_MouseInit+0x40>)
 8003c4a:	6163      	str	r3, [r4, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8003c4c:	2228      	movs	r2, #40	; 0x28
 8003c4e:	f500 7107 	add.w	r1, r0, #540	; 0x21c
 8003c52:	f104 0008 	add.w	r0, r4, #8
 8003c56:	f7ff fe28 	bl	80038aa <USBH_HID_FifoInit>

  return USBH_OK;
}
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	bf00      	nop
 8003c60:	200073d8 	.word	0x200073d8
 8003c64:	200073e0 	.word	0x200073e0

08003c68 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8003c68:	b470      	push	{r4, r5, r6}
  uint32_t val = 0U;
  uint32_t x = 0U;
  uint32_t bofs;
  uint8_t *data=ri->data;
 8003c6a:	6805      	ldr	r5, [r0, #0]
  uint8_t shift=ri->shift;
 8003c6c:	7a06      	ldrb	r6, [r0, #8]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8003c6e:	7a43      	ldrb	r3, [r0, #9]
 8003c70:	b143      	cbz	r3, 8003c84 <HID_ReadItem+0x1c>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8003c72:	428b      	cmp	r3, r1
 8003c74:	d938      	bls.n	8003ce8 <HID_ReadItem+0x80>
    {
      return(0U);
    }

    /* calculate bit offset */
    bofs = ndx*ri->size;
 8003c76:	6842      	ldr	r2, [r0, #4]
    bofs += shift;
 8003c78:	fb02 6201 	mla	r2, r2, r1, r6
    /* calculate byte offset + shift pair from bit offset. */
    data+=bofs / 8U;
 8003c7c:	eb05 05d2 	add.w	r5, r5, r2, lsr #3
    shift=(uint8_t)(bofs % 8U);
 8003c80:	f002 0607 	and.w	r6, r2, #7
  }
  /* read data bytes in little endian order */
  for(x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8003c84:	2300      	movs	r3, #0
  uint32_t val = 0U;
 8003c86:	461a      	mov	r2, r3
  for(x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8003c88:	e006      	b.n	8003c98 <HID_ReadItem+0x30>
 8003c8a:	08cc      	lsrs	r4, r1, #3
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d20a      	bcs.n	8003ca6 <HID_ReadItem+0x3e>
  {
    val=(uint32_t)((uint32_t)(*data) << (x * 8U));
 8003c90:	782a      	ldrb	r2, [r5, #0]
 8003c92:	00d9      	lsls	r1, r3, #3
 8003c94:	408a      	lsls	r2, r1
  for(x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8003c96:	3301      	adds	r3, #1
 8003c98:	6841      	ldr	r1, [r0, #4]
 8003c9a:	f011 0f07 	tst.w	r1, #7
 8003c9e:	d0f4      	beq.n	8003c8a <HID_ReadItem+0x22>
 8003ca0:	08cc      	lsrs	r4, r1, #3
 8003ca2:	3401      	adds	r4, #1
 8003ca4:	e7f2      	b.n	8003c8c <HID_ReadItem+0x24>
  }
  val=(val >> shift) & ((1U << ri->size) - 1U);
 8003ca6:	40f2      	lsrs	r2, r6
 8003ca8:	2301      	movs	r3, #1
 8003caa:	408b      	lsls	r3, r1
 8003cac:	1e5c      	subs	r4, r3, #1
 8003cae:	4022      	ands	r2, r4

  if (val < ri->logical_min || val > ri->logical_max)
 8003cb0:	68c4      	ldr	r4, [r0, #12]
 8003cb2:	42a2      	cmp	r2, r4
 8003cb4:	d31a      	bcc.n	8003cec <HID_ReadItem+0x84>
 8003cb6:	6904      	ldr	r4, [r0, #16]
 8003cb8:	42a2      	cmp	r2, r4
 8003cba:	d81b      	bhi.n	8003cf4 <HID_ReadItem+0x8c>
    return(0U);
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 8003cbc:	7a84      	ldrb	r4, [r0, #10]
 8003cbe:	b16c      	cbz	r4, 8003cdc <HID_ReadItem+0x74>
 8003cc0:	3901      	subs	r1, #1
 8003cc2:	2401      	movs	r4, #1
 8003cc4:	fa04 f101 	lsl.w	r1, r4, r1
 8003cc8:	420a      	tst	r2, r1
 8003cca:	d007      	beq.n	8003cdc <HID_ReadItem+0x74>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs=(uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8003ccc:	425b      	negs	r3, r3
 8003cce:	431a      	orrs	r2, r3

    if(ri->resolution == 1U)
 8003cd0:	69c3      	ldr	r3, [r0, #28]
 8003cd2:	42a3      	cmp	r3, r4
 8003cd4:	d00b      	beq.n	8003cee <HID_ReadItem+0x86>
    {
      return((uint32_t)vs);
    }
    return((uint32_t)(vs * ri->resolution));
 8003cd6:	fb03 f202 	mul.w	r2, r3, r2
 8003cda:	e008      	b.n	8003cee <HID_ReadItem+0x86>
  }
  else
  {
    if(ri->resolution == 1U)
 8003cdc:	69c3      	ldr	r3, [r0, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <HID_ReadItem+0x86>
    {
      return(val);
    }
    return(val*ri->resolution);
 8003ce2:	fb03 f202 	mul.w	r2, r3, r2
 8003ce6:	e002      	b.n	8003cee <HID_ReadItem+0x86>
      return(0U);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	e000      	b.n	8003cee <HID_ReadItem+0x86>
    return(0U);
 8003cec:	2200      	movs	r2, #0
  }
}
 8003cee:	4610      	mov	r0, r2
 8003cf0:	bc70      	pop	{r4, r5, r6}
 8003cf2:	4770      	bx	lr
    return(0U);
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	e7fa      	b.n	8003cee <HID_ReadItem+0x86>

08003cf8 <DeInitStateMachine>:
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
  uint32_t i = 0U;
 8003cf8:	2300      	movs	r3, #0

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003cfa:	e005      	b.n	8003d08 <DeInitStateMachine+0x10>
  {
    phost->Pipes[i] = 0U;
 8003cfc:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8003d00:	2100      	movs	r1, #0
 8003d02:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003d06:	3301      	adds	r3, #1
 8003d08:	2b0e      	cmp	r3, #14
 8003d0a:	d9f7      	bls.n	8003cfc <DeInitStateMachine+0x4>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e004      	b.n	8003d1a <DeInitStateMachine+0x22>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003d10:	18c2      	adds	r2, r0, r3
 8003d12:	2100      	movs	r1, #0
 8003d14:	f882 121c 	strb.w	r1, [r2, #540]	; 0x21c
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d3f7      	bcc.n	8003d10 <DeInitStateMachine+0x18>
  }

  phost->gState = HOST_IDLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003d24:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003d26:	2201      	movs	r2, #1
 8003d28:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8003d2a:	f8c0 36bc 	str.w	r3, [r0, #1724]	; 0x6bc

  phost->Control.state = CTRL_SETUP;
 8003d2e:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003d30:	2140      	movs	r1, #64	; 0x40
 8003d32:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8003d34:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003d36:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
  phost->device.speed   = USBH_SPEED_FULL;
 8003d3a:	f880 261d 	strb.w	r2, [r0, #1565]	; 0x61d

  return USBH_OK;
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	4770      	bx	lr

08003d42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8003d42:	b508      	push	{r3, lr}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003d44:	7803      	ldrb	r3, [r0, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b0b      	cmp	r3, #11
 8003d4a:	d000      	beq.n	8003d4e <USBH_HandleSof+0xc>
 8003d4c:	bd08      	pop	{r3, pc}
 8003d4e:	f8d0 3678 	ldr.w	r3, [r0, #1656]	; 0x678
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0fa      	beq.n	8003d4c <USBH_HandleSof+0xa>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4798      	blx	r3
  }
}
 8003d5a:	e7f7      	b.n	8003d4c <USBH_HandleSof+0xa>

08003d5c <USBH_HandleEnum>:
{
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8003d62:	7843      	ldrb	r3, [r0, #1]
 8003d64:	2b07      	cmp	r3, #7
 8003d66:	f200 811f 	bhi.w	8003fa8 <USBH_HandleEnum+0x24c>
 8003d6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003d6e:	0008      	.short	0x0008
 8003d70:	004b0031 	.word	0x004b0031
 8003d74:	0087007d 	.word	0x0087007d
 8003d78:	00c90092 	.word	0x00c90092
 8003d7c:	00f5      	.short	0x00f5
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8003d7e:	2108      	movs	r1, #8
 8003d80:	f000 fefb 	bl	8004b7a <USBH_Get_DevDesc>
 8003d84:	b118      	cbz	r0, 8003d8e <USBH_HandleEnum+0x32>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003d86:	2401      	movs	r4, #1
}
 8003d88:	4620      	mov	r0, r4
 8003d8a:	b004      	add	sp, #16
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003d8e:	f894 2629 	ldrb.w	r2, [r4, #1577]	; 0x629
 8003d92:	71a2      	strb	r2, [r4, #6]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003d94:	2501      	movs	r5, #1
 8003d96:	7065      	strb	r5, [r4, #1]
      USBH_OpenPipe (phost,
 8003d98:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8003d9c:	7921      	ldrb	r1, [r4, #4]
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	2600      	movs	r6, #0
 8003da2:	9601      	str	r6, [sp, #4]
 8003da4:	f894 261d 	ldrb.w	r2, [r4, #1565]	; 0x61d
 8003da8:	9200      	str	r2, [sp, #0]
 8003daa:	2280      	movs	r2, #128	; 0x80
 8003dac:	4620      	mov	r0, r4
 8003dae:	f000 ffcc 	bl	8004d4a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8003db2:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8003db6:	7961      	ldrb	r1, [r4, #5]
 8003db8:	79a2      	ldrb	r2, [r4, #6]
 8003dba:	9202      	str	r2, [sp, #8]
 8003dbc:	9601      	str	r6, [sp, #4]
 8003dbe:	f894 261d 	ldrb.w	r2, [r4, #1565]	; 0x61d
 8003dc2:	9200      	str	r2, [sp, #0]
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f000 ffbf 	bl	8004d4a <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dcc:	462c      	mov	r4, r5
 8003dce:	e7db      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003dd0:	2112      	movs	r1, #18
 8003dd2:	f000 fed2 	bl	8004b7a <USBH_Get_DevDesc>
 8003dd6:	b108      	cbz	r0, 8003ddc <USBH_HandleEnum+0x80>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003dd8:	2401      	movs	r4, #1
 8003dda:	e7d5      	b.n	8003d88 <USBH_HandleEnum+0x2c>
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
 8003ddc:	f8b4 162c 	ldrh.w	r1, [r4, #1580]	; 0x62c
 8003de0:	4874      	ldr	r0, [pc, #464]	; (8003fb4 <USBH_HandleEnum+0x258>)
 8003de2:	f003 fd8d 	bl	8007900 <iprintf>
 8003de6:	200a      	movs	r0, #10
 8003de8:	f003 fda2 	bl	8007930 <putchar>
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );
 8003dec:	f8b4 162a 	ldrh.w	r1, [r4, #1578]	; 0x62a
 8003df0:	4871      	ldr	r0, [pc, #452]	; (8003fb8 <USBH_HandleEnum+0x25c>)
 8003df2:	f003 fd85 	bl	8007900 <iprintf>
 8003df6:	200a      	movs	r0, #10
 8003df8:	f003 fd9a 	bl	8007930 <putchar>
      phost->EnumState = ENUM_SET_ADDR;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e00:	2401      	movs	r4, #1
 8003e02:	e7c1      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003e04:	2101      	movs	r1, #1
 8003e06:	f000 ff02 	bl	8004c0e <USBH_SetAddress>
 8003e0a:	b108      	cbz	r0, 8003e10 <USBH_HandleEnum+0xb4>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e0c:	2401      	movs	r4, #1
 8003e0e:	e7bb      	b.n	8003d88 <USBH_HandleEnum+0x2c>
      USBH_Delay(2U);
 8003e10:	2002      	movs	r0, #2
 8003e12:	f003 fbf8 	bl	8007606 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003e16:	2501      	movs	r5, #1
 8003e18:	f884 561c 	strb.w	r5, [r4, #1564]	; 0x61c
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	4867      	ldr	r0, [pc, #412]	; (8003fbc <USBH_HandleEnum+0x260>)
 8003e20:	f003 fd6e 	bl	8007900 <iprintf>
 8003e24:	200a      	movs	r0, #10
 8003e26:	f003 fd83 	bl	8007930 <putchar>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8003e2e:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8003e32:	7921      	ldrb	r1, [r4, #4]
 8003e34:	79a2      	ldrb	r2, [r4, #6]
 8003e36:	9202      	str	r2, [sp, #8]
 8003e38:	2600      	movs	r6, #0
 8003e3a:	9601      	str	r6, [sp, #4]
 8003e3c:	f894 261d 	ldrb.w	r2, [r4, #1565]	; 0x61d
 8003e40:	9200      	str	r2, [sp, #0]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	4620      	mov	r0, r4
 8003e46:	f000 ff80 	bl	8004d4a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8003e4a:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8003e4e:	7961      	ldrb	r1, [r4, #5]
 8003e50:	79a2      	ldrb	r2, [r4, #6]
 8003e52:	9202      	str	r2, [sp, #8]
 8003e54:	9601      	str	r6, [sp, #4]
 8003e56:	f894 261d 	ldrb.w	r2, [r4, #1565]	; 0x61d
 8003e5a:	9200      	str	r2, [sp, #0]
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 ff73 	bl	8004d4a <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e64:	462c      	mov	r4, r5
 8003e66:	e78f      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if ( USBH_Get_CfgDesc(phost,
 8003e68:	2109      	movs	r1, #9
 8003e6a:	f000 fe9f 	bl	8004bac <USBH_Get_CfgDesc>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	f040 809c 	bne.w	8003fac <USBH_HandleEnum+0x250>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003e74:	2304      	movs	r3, #4
 8003e76:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e78:	2401      	movs	r4, #1
 8003e7a:	e785      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if (USBH_Get_CfgDesc(phost,
 8003e7c:	f8b0 1636 	ldrh.w	r1, [r0, #1590]	; 0x636
 8003e80:	f000 fe94 	bl	8004bac <USBH_Get_CfgDesc>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	f040 8093 	bne.w	8003fb0 <USBH_HandleEnum+0x254>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e8e:	2401      	movs	r4, #1
 8003e90:	e77a      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8003e92:	f890 1630 	ldrb.w	r1, [r0, #1584]	; 0x630
 8003e96:	b1f1      	cbz	r1, 8003ed6 <USBH_HandleEnum+0x17a>
                               phost->device.Data,
 8003e98:	f500 7507 	add.w	r5, r0, #540	; 0x21c
      if ( USBH_Get_StringDesc(phost,
 8003e9c:	23ff      	movs	r3, #255	; 0xff
 8003e9e:	462a      	mov	r2, r5
 8003ea0:	f000 fe9d 	bl	8004bde <USBH_Get_StringDesc>
 8003ea4:	b108      	cbz	r0, 8003eaa <USBH_HandleEnum+0x14e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ea6:	2401      	movs	r4, #1
 8003ea8:	e76e      	b.n	8003d88 <USBH_HandleEnum+0x2c>
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4844      	ldr	r0, [pc, #272]	; (8003fc0 <USBH_HandleEnum+0x264>)
 8003eae:	f003 fd27 	bl	8007900 <iprintf>
 8003eb2:	200a      	movs	r0, #10
 8003eb4:	f003 fd3c 	bl	8007930 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003eb8:	2306      	movs	r3, #6
 8003eba:	7063      	strb	r3, [r4, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003ebc:	2305      	movs	r3, #5
 8003ebe:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8003eca:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8003ece:	f001 f891 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ed2:	2401      	movs	r4, #1
 8003ed4:	e758      	b.n	8003d88 <USBH_HandleEnum+0x2c>
     USBH_UsrLog("Manufacturer : N/A");
 8003ed6:	483b      	ldr	r0, [pc, #236]	; (8003fc4 <USBH_HandleEnum+0x268>)
 8003ed8:	f003 fd12 	bl	8007900 <iprintf>
 8003edc:	200a      	movs	r0, #10
 8003ede:	f003 fd27 	bl	8007930 <putchar>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	7063      	strb	r3, [r4, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003ee6:	2305      	movs	r3, #5
 8003ee8:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8003eec:	2300      	movs	r3, #0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8003ef4:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8003ef8:	f001 f87c 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003efc:	2401      	movs	r4, #1
 8003efe:	e743      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if (phost->device.DevDesc.iProduct != 0U)
 8003f00:	f890 1631 	ldrb.w	r1, [r0, #1585]	; 0x631
 8003f04:	b199      	cbz	r1, 8003f2e <USBH_HandleEnum+0x1d2>
                               phost->device.Data,
 8003f06:	f500 7507 	add.w	r5, r0, #540	; 0x21c
      if ( USBH_Get_StringDesc(phost,
 8003f0a:	23ff      	movs	r3, #255	; 0xff
 8003f0c:	462a      	mov	r2, r5
 8003f0e:	f000 fe66 	bl	8004bde <USBH_Get_StringDesc>
 8003f12:	b108      	cbz	r0, 8003f18 <USBH_HandleEnum+0x1bc>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f14:	2401      	movs	r4, #1
 8003f16:	e737      	b.n	8003d88 <USBH_HandleEnum+0x2c>
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
 8003f18:	4629      	mov	r1, r5
 8003f1a:	482b      	ldr	r0, [pc, #172]	; (8003fc8 <USBH_HandleEnum+0x26c>)
 8003f1c:	f003 fcf0 	bl	8007900 <iprintf>
 8003f20:	200a      	movs	r0, #10
 8003f22:	f003 fd05 	bl	8007930 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003f26:	2307      	movs	r3, #7
 8003f28:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f2a:	2401      	movs	r4, #1
 8003f2c:	e72c      	b.n	8003d88 <USBH_HandleEnum+0x2c>
      USBH_UsrLog("Product : N/A");
 8003f2e:	4827      	ldr	r0, [pc, #156]	; (8003fcc <USBH_HandleEnum+0x270>)
 8003f30:	f003 fce6 	bl	8007900 <iprintf>
 8003f34:	200a      	movs	r0, #10
 8003f36:	f003 fcfb 	bl	8007930 <putchar>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003f3a:	2307      	movs	r3, #7
 8003f3c:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003f3e:	2305      	movs	r3, #5
 8003f40:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8003f44:	2300      	movs	r3, #0
 8003f46:	461a      	mov	r2, r3
 8003f48:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8003f4c:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8003f50:	f001 f850 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f54:	2401      	movs	r4, #1
 8003f56:	e717      	b.n	8003d88 <USBH_HandleEnum+0x2c>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8003f58:	f890 1632 	ldrb.w	r1, [r0, #1586]	; 0x632
 8003f5c:	b189      	cbz	r1, 8003f82 <USBH_HandleEnum+0x226>
                               phost->device.Data,
 8003f5e:	f500 7507 	add.w	r5, r0, #540	; 0x21c
      if ( USBH_Get_StringDesc(phost,
 8003f62:	23ff      	movs	r3, #255	; 0xff
 8003f64:	462a      	mov	r2, r5
 8003f66:	f000 fe3a 	bl	8004bde <USBH_Get_StringDesc>
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	b108      	cbz	r0, 8003f72 <USBH_HandleEnum+0x216>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f6e:	2401      	movs	r4, #1
 8003f70:	e70a      	b.n	8003d88 <USBH_HandleEnum+0x2c>
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
 8003f72:	4629      	mov	r1, r5
 8003f74:	4816      	ldr	r0, [pc, #88]	; (8003fd0 <USBH_HandleEnum+0x274>)
 8003f76:	f003 fcc3 	bl	8007900 <iprintf>
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	f003 fcd8 	bl	8007930 <putchar>
 8003f80:	e702      	b.n	8003d88 <USBH_HandleEnum+0x2c>
      USBH_UsrLog("Serial Number : N/A");
 8003f82:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <USBH_HandleEnum+0x278>)
 8003f84:	f003 fcbc 	bl	8007900 <iprintf>
 8003f88:	200a      	movs	r0, #10
 8003f8a:	f003 fcd1 	bl	8007930 <putchar>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003f8e:	2305      	movs	r3, #5
 8003f90:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8003f94:	2300      	movs	r3, #0
 8003f96:	461a      	mov	r2, r3
 8003f98:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8003f9c:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8003fa0:	f001 f828 	bl	8004ff4 <osMessageQueuePut>
      Status = USBH_OK;
 8003fa4:	2400      	movs	r4, #0
 8003fa6:	e6ef      	b.n	8003d88 <USBH_HandleEnum+0x2c>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003fa8:	2401      	movs	r4, #1
 8003faa:	e6ed      	b.n	8003d88 <USBH_HandleEnum+0x2c>
 8003fac:	2401      	movs	r4, #1
 8003fae:	e6eb      	b.n	8003d88 <USBH_HandleEnum+0x2c>
 8003fb0:	2401      	movs	r4, #1
 8003fb2:	e6e9      	b.n	8003d88 <USBH_HandleEnum+0x2c>
 8003fb4:	08008c1c 	.word	0x08008c1c
 8003fb8:	08008c28 	.word	0x08008c28
 8003fbc:	08008c34 	.word	0x08008c34
 8003fc0:	08008c4c 	.word	0x08008c4c
 8003fc4:	08008c60 	.word	0x08008c60
 8003fc8:	08008c74 	.word	0x08008c74
 8003fcc:	08008c84 	.word	0x08008c84
 8003fd0:	08008c94 	.word	0x08008c94
 8003fd4:	08008ca8 	.word	0x08008ca8

08003fd8 <USBH_Init>:
{
 8003fd8:	b538      	push	{r3, r4, r5, lr}
  if(phost == NULL)
 8003fda:	b338      	cbz	r0, 800402c <USBH_Init+0x54>
 8003fdc:	460d      	mov	r5, r1
 8003fde:	4604      	mov	r4, r0
  phost->id = id;
 8003fe0:	f880 26c0 	strb.w	r2, [r0, #1728]	; 0x6c0
  phost->pActiveClass = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c0 3678 	str.w	r3, [r0, #1656]	; 0x678
  phost->ClassNumber = 0U;
 8003fea:	f8c0 367c 	str.w	r3, [r0, #1660]	; 0x67c
  DeInitStateMachine(phost);
 8003fee:	f7ff fe83 	bl	8003cf8 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003ff2:	b10d      	cbz	r5, 8003ff8 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003ff4:	f8c4 56c8 	str.w	r5, [r4, #1736]	; 0x6c8
  phost->os_event = osMessageQueueNew (MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2104      	movs	r1, #4
 8003ffc:	2010      	movs	r0, #16
 8003ffe:	f000 ff95 	bl	8004f2c <osMessageQueueNew>
 8004002:	f8c4 06cc 	str.w	r0, [r4, #1740]	; 0x6cc
  USBH_Thread_Atrr.name = "USBH_Queue";
 8004006:	4a0f      	ldr	r2, [pc, #60]	; (8004044 <USBH_Init+0x6c>)
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <USBH_Init+0x70>)
 800400a:	6013      	str	r3, [r2, #0]
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800400c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004010:	6153      	str	r3, [r2, #20]
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8004012:	2318      	movs	r3, #24
 8004014:	6193      	str	r3, [r2, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8004016:	4621      	mov	r1, r4
 8004018:	480c      	ldr	r0, [pc, #48]	; (800404c <USBH_Init+0x74>)
 800401a:	f000 ff11 	bl	8004e40 <osThreadNew>
 800401e:	f8c4 06d0 	str.w	r0, [r4, #1744]	; 0x6d0
  USBH_LL_Init(phost);
 8004022:	4620      	mov	r0, r4
 8004024:	f003 fa8a 	bl	800753c <USBH_LL_Init>
  return USBH_OK;
 8004028:	2000      	movs	r0, #0
}
 800402a:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Invalid Host handle");
 800402c:	4808      	ldr	r0, [pc, #32]	; (8004050 <USBH_Init+0x78>)
 800402e:	f003 fc67 	bl	8007900 <iprintf>
 8004032:	4808      	ldr	r0, [pc, #32]	; (8004054 <USBH_Init+0x7c>)
 8004034:	f003 fc64 	bl	8007900 <iprintf>
 8004038:	200a      	movs	r0, #10
 800403a:	f003 fc79 	bl	8007930 <putchar>
    return USBH_FAIL;
 800403e:	2002      	movs	r0, #2
 8004040:	bd38      	pop	{r3, r4, r5, pc}
 8004042:	bf00      	nop
 8004044:	200073e4 	.word	0x200073e4
 8004048:	08008cd8 	.word	0x08008cd8
 800404c:	08004519 	.word	0x08004519
 8004050:	08008cbc 	.word	0x08008cbc
 8004054:	08008cc4 	.word	0x08008cc4

08004058 <USBH_RegisterClass>:
{
 8004058:	b508      	push	{r3, lr}
  if(pclass != 0)
 800405a:	b1c1      	cbz	r1, 800408e <USBH_RegisterClass+0x36>
 800405c:	460a      	mov	r2, r1
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800405e:	f8d0 367c 	ldr.w	r3, [r0, #1660]	; 0x67c
 8004062:	b94b      	cbnz	r3, 8004078 <USBH_RegisterClass+0x20>
      phost->pClass[phost->ClassNumber++] = pclass;
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	f8c0 167c 	str.w	r1, [r0, #1660]	; 0x67c
 800406a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800406e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004072:	6042      	str	r2, [r0, #4]
      status = USBH_OK;
 8004074:	2000      	movs	r0, #0
 8004076:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 8004078:	480a      	ldr	r0, [pc, #40]	; (80040a4 <USBH_RegisterClass+0x4c>)
 800407a:	f003 fc41 	bl	8007900 <iprintf>
 800407e:	480a      	ldr	r0, [pc, #40]	; (80040a8 <USBH_RegisterClass+0x50>)
 8004080:	f003 fc3e 	bl	8007900 <iprintf>
 8004084:	200a      	movs	r0, #10
 8004086:	f003 fc53 	bl	8007930 <putchar>
      status = USBH_FAIL;
 800408a:	2002      	movs	r0, #2
 800408c:	bd08      	pop	{r3, pc}
    USBH_ErrLog("Invalid Class handle");
 800408e:	4805      	ldr	r0, [pc, #20]	; (80040a4 <USBH_RegisterClass+0x4c>)
 8004090:	f003 fc36 	bl	8007900 <iprintf>
 8004094:	4805      	ldr	r0, [pc, #20]	; (80040ac <USBH_RegisterClass+0x54>)
 8004096:	f003 fc33 	bl	8007900 <iprintf>
 800409a:	200a      	movs	r0, #10
 800409c:	f003 fc48 	bl	8007930 <putchar>
    status = USBH_FAIL;
 80040a0:	2002      	movs	r0, #2
}
 80040a2:	bd08      	pop	{r3, pc}
 80040a4:	08008cbc 	.word	0x08008cbc
 80040a8:	08008e1c 	.word	0x08008e1c
 80040ac:	08008e38 	.word	0x08008e38

080040b0 <USBH_SelectInterface>:
{
 80040b0:	b538      	push	{r3, r4, r5, lr}
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80040b2:	f890 3638 	ldrb.w	r3, [r0, #1592]	; 0x638
 80040b6:	428b      	cmp	r3, r1
 80040b8:	d80a      	bhi.n	80040d0 <USBH_SelectInterface+0x20>
    USBH_ErrLog ("Cannot Select This Interface.");
 80040ba:	4819      	ldr	r0, [pc, #100]	; (8004120 <USBH_SelectInterface+0x70>)
 80040bc:	f003 fc20 	bl	8007900 <iprintf>
 80040c0:	4818      	ldr	r0, [pc, #96]	; (8004124 <USBH_SelectInterface+0x74>)
 80040c2:	f003 fc1d 	bl	8007900 <iprintf>
 80040c6:	200a      	movs	r0, #10
 80040c8:	f003 fc32 	bl	8007930 <putchar>
    status = USBH_FAIL;
 80040cc:	2002      	movs	r0, #2
}
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	4605      	mov	r5, r0
 80040d2:	460c      	mov	r4, r1
    phost->device.current_interface = interface;
 80040d4:	f885 1620 	strb.w	r1, [r5, #1568]	; 0x620
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 80040d8:	4813      	ldr	r0, [pc, #76]	; (8004128 <USBH_SelectInterface+0x78>)
 80040da:	f003 fc11 	bl	8007900 <iprintf>
 80040de:	200a      	movs	r0, #10
 80040e0:	f003 fc26 	bl	8007930 <putchar>
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
 80040e4:	231a      	movs	r3, #26
 80040e6:	fb03 5404 	mla	r4, r3, r4, r5
 80040ea:	f894 1643 	ldrb.w	r1, [r4, #1603]	; 0x643
 80040ee:	480f      	ldr	r0, [pc, #60]	; (800412c <USBH_SelectInterface+0x7c>)
 80040f0:	f003 fc06 	bl	8007900 <iprintf>
 80040f4:	200a      	movs	r0, #10
 80040f6:	f003 fc1b 	bl	8007930 <putchar>
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
 80040fa:	f894 1644 	ldrb.w	r1, [r4, #1604]	; 0x644
 80040fe:	480c      	ldr	r0, [pc, #48]	; (8004130 <USBH_SelectInterface+0x80>)
 8004100:	f003 fbfe 	bl	8007900 <iprintf>
 8004104:	200a      	movs	r0, #10
 8004106:	f003 fc13 	bl	8007930 <putchar>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
 800410a:	f894 1645 	ldrb.w	r1, [r4, #1605]	; 0x645
 800410e:	4809      	ldr	r0, [pc, #36]	; (8004134 <USBH_SelectInterface+0x84>)
 8004110:	f003 fbf6 	bl	8007900 <iprintf>
 8004114:	200a      	movs	r0, #10
 8004116:	f003 fc0b 	bl	8007930 <putchar>
  USBH_StatusTypeDef   status = USBH_OK;
 800411a:	2000      	movs	r0, #0
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	bf00      	nop
 8004120:	08008cbc 	.word	0x08008cbc
 8004124:	08008ea0 	.word	0x08008ea0
 8004128:	08008e50 	.word	0x08008e50
 800412c:	08008e70 	.word	0x08008e70
 8004130:	08008e80 	.word	0x08008e80
 8004134:	08008e90 	.word	0x08008e90

08004138 <USBH_FindInterface>:
{
 8004138:	b470      	push	{r4, r5, r6}
 800413a:	4606      	mov	r6, r0
  uint8_t                        if_ix = 0U;
 800413c:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800413e:	e00a      	b.n	8004156 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004140:	241a      	movs	r4, #26
 8004142:	fb04 6405 	mla	r4, r4, r5, r6
 8004146:	f894 4644 	ldrb.w	r4, [r4, #1604]	; 0x644
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800414a:	4294      	cmp	r4, r2
 800414c:	d010      	beq.n	8004170 <USBH_FindInterface+0x38>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800414e:	2aff      	cmp	r2, #255	; 0xff
 8004150:	d00e      	beq.n	8004170 <USBH_FindInterface+0x38>
    if_ix++;
 8004152:	1c44      	adds	r4, r0, #1
 8004154:	b2e0      	uxtb	r0, r4
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004156:	2801      	cmp	r0, #1
 8004158:	d814      	bhi.n	8004184 <USBH_FindInterface+0x4c>
    pif = &pcfg->Itf_Desc[if_ix];
 800415a:	4605      	mov	r5, r0
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800415c:	241a      	movs	r4, #26
 800415e:	fb04 6400 	mla	r4, r4, r0, r6
 8004162:	f894 4643 	ldrb.w	r4, [r4, #1603]	; 0x643
 8004166:	428c      	cmp	r4, r1
 8004168:	d0ea      	beq.n	8004140 <USBH_FindInterface+0x8>
 800416a:	29ff      	cmp	r1, #255	; 0xff
 800416c:	d1f1      	bne.n	8004152 <USBH_FindInterface+0x1a>
 800416e:	e7e7      	b.n	8004140 <USBH_FindInterface+0x8>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004170:	241a      	movs	r4, #26
 8004172:	fb04 6505 	mla	r5, r4, r5, r6
 8004176:	f895 4645 	ldrb.w	r4, [r5, #1605]	; 0x645
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800417a:	429c      	cmp	r4, r3
 800417c:	d003      	beq.n	8004186 <USBH_FindInterface+0x4e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800417e:	2bff      	cmp	r3, #255	; 0xff
 8004180:	d1e7      	bne.n	8004152 <USBH_FindInterface+0x1a>
 8004182:	e000      	b.n	8004186 <USBH_FindInterface+0x4e>
  return 0xFFU;
 8004184:	20ff      	movs	r0, #255	; 0xff
}
 8004186:	bc70      	pop	{r4, r5, r6}
 8004188:	4770      	bx	lr

0800418a <USBH_Start>:
{
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 800418e:	f003 fa47 	bl	8007620 <USBH_LL_Start>
  USBH_LL_DriverVBUS (phost, TRUE);
 8004192:	2101      	movs	r1, #1
 8004194:	4620      	mov	r0, r4
 8004196:	f003 fa0f 	bl	80075b8 <USBH_LL_DriverVBUS>
}
 800419a:	2000      	movs	r0, #0
 800419c:	bd10      	pop	{r4, pc}

0800419e <USBH_LL_SetTimer>:
  phost->Timer = time;
 800419e:	f8c0 16bc 	str.w	r1, [r0, #1724]	; 0x6bc
 80041a2:	4770      	bx	lr

080041a4 <USBH_LL_IncTimer>:
{
 80041a4:	b508      	push	{r3, lr}
  phost->Timer ++;
 80041a6:	f8d0 36bc 	ldr.w	r3, [r0, #1724]	; 0x6bc
 80041aa:	3301      	adds	r3, #1
 80041ac:	f8c0 36bc 	str.w	r3, [r0, #1724]	; 0x6bc
  USBH_HandleSof(phost);
 80041b0:	f7ff fdc7 	bl	8003d42 <USBH_HandleSof>
 80041b4:	bd08      	pop	{r3, pc}

080041b6 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f880 361f 	strb.w	r3, [r0, #1567]	; 0x61f
 80041bc:	4770      	bx	lr

080041be <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	f880 361f 	strb.w	r3, [r0, #1567]	; 0x61f
 80041c4:	4770      	bx	lr

080041c6 <USBH_IsPortEnabled>:
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
}
 80041c6:	f890 061f 	ldrb.w	r0, [r0, #1567]	; 0x61f
 80041ca:	4770      	bx	lr

080041cc <USBH_Process>:
{
 80041cc:	b530      	push	{r4, r5, lr}
 80041ce:	b087      	sub	sp, #28
 80041d0:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80041d2:	2302      	movs	r3, #2
 80041d4:	f88d 3017 	strb.w	r3, [sp, #23]
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80041d8:	f7ff fff5 	bl	80041c6 <USBH_IsPortEnabled>
 80041dc:	b938      	cbnz	r0, 80041ee <USBH_Process+0x22>
 80041de:	7823      	ldrb	r3, [r4, #0]
 80041e0:	b12b      	cbz	r3, 80041ee <USBH_Process+0x22>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80041e2:	7823      	ldrb	r3, [r4, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d001      	beq.n	80041ee <USBH_Process+0x22>
      phost->gState = HOST_DEV_DISCONNECTED;
 80041ea:	2303      	movs	r3, #3
 80041ec:	7023      	strb	r3, [r4, #0]
  switch (phost->gState)
 80041ee:	7823      	ldrb	r3, [r4, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b0b      	cmp	r3, #11
 80041f4:	d86b      	bhi.n	80042ce <USBH_Process+0x102>
 80041f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80041fa:	000c      	.short	0x000c
 80041fc:	002a0023 	.word	0x002a0023
 8004200:	006a0169 	.word	0x006a0169
 8004204:	0139006d 	.word	0x0139006d
 8004208:	00a0008b 	.word	0x00a0008b
 800420c:	00dd00bb 	.word	0x00dd00bb
 8004210:	0160      	.short	0x0160
    if (phost->device.is_connected)
 8004212:	f894 361e 	ldrb.w	r3, [r4, #1566]	; 0x61e
 8004216:	2b00      	cmp	r3, #0
 8004218:	d059      	beq.n	80042ce <USBH_Process+0x102>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800421a:	2501      	movs	r5, #1
 800421c:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 800421e:	20c8      	movs	r0, #200	; 0xc8
 8004220:	f003 f9f1 	bl	8007606 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8004224:	4620      	mov	r0, r4
 8004226:	f003 fa0b 	bl	8007640 <USBH_LL_ResetPort>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800422a:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800422e:	2300      	movs	r3, #0
 8004230:	461a      	mov	r2, r3
 8004232:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004236:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 800423a:	f000 fedb 	bl	8004ff4 <osMessageQueuePut>
 800423e:	e046      	b.n	80042ce <USBH_Process+0x102>
    if (phost->device.PortEnabled == 1U)
 8004240:	f894 361f 	ldrb.w	r3, [r4, #1567]	; 0x61f
 8004244:	2b01      	cmp	r3, #1
 8004246:	d142      	bne.n	80042ce <USBH_Process+0x102>
      phost->gState = HOST_DEV_ATTACHED;
 8004248:	2302      	movs	r3, #2
 800424a:	7023      	strb	r3, [r4, #0]
 800424c:	e03f      	b.n	80042ce <USBH_Process+0x102>
    USBH_UsrLog("USB Device Attached");
 800424e:	48a7      	ldr	r0, [pc, #668]	; (80044ec <USBH_Process+0x320>)
 8004250:	f003 fb56 	bl	8007900 <iprintf>
 8004254:	200a      	movs	r0, #10
 8004256:	f003 fb6b 	bl	8007930 <putchar>
    USBH_Delay(100U);
 800425a:	2064      	movs	r0, #100	; 0x64
 800425c:	f003 f9d3 	bl	8007606 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004260:	4620      	mov	r0, r4
 8004262:	f003 f995 	bl	8007590 <USBH_LL_GetSpeed>
 8004266:	f884 061d 	strb.w	r0, [r4, #1565]	; 0x61d
    phost->gState = HOST_ENUMERATION;
 800426a:	2305      	movs	r3, #5
 800426c:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800426e:	2100      	movs	r1, #0
 8004270:	4620      	mov	r0, r4
 8004272:	f000 fd7f 	bl	8004d74 <USBH_AllocPipe>
 8004276:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	4620      	mov	r0, r4
 800427c:	f000 fd7a 	bl	8004d74 <USBH_AllocPipe>
 8004280:	4601      	mov	r1, r0
 8004282:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 8004284:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8004288:	79a2      	ldrb	r2, [r4, #6]
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	2500      	movs	r5, #0
 800428e:	9501      	str	r5, [sp, #4]
 8004290:	f894 261d 	ldrb.w	r2, [r4, #1565]	; 0x61d
 8004294:	9200      	str	r2, [sp, #0]
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fd56 	bl	8004d4a <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 800429e:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 80042a2:	7961      	ldrb	r1, [r4, #5]
 80042a4:	79a2      	ldrb	r2, [r4, #6]
 80042a6:	9202      	str	r2, [sp, #8]
 80042a8:	9501      	str	r5, [sp, #4]
 80042aa:	f894 261d 	ldrb.w	r2, [r4, #1565]	; 0x61d
 80042ae:	9200      	str	r2, [sp, #0]
 80042b0:	462a      	mov	r2, r5
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 fd49 	bl	8004d4a <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80042be:	462b      	mov	r3, r5
 80042c0:	462a      	mov	r2, r5
 80042c2:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80042c6:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80042ca:	f000 fe93 	bl	8004ff4 <osMessageQueuePut>
}
 80042ce:	2000      	movs	r0, #0
 80042d0:	b007      	add	sp, #28
 80042d2:	bd30      	pop	{r4, r5, pc}
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fd41 	bl	8003d5c <USBH_HandleEnum>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d1f7      	bne.n	80042ce <USBH_Process+0x102>
      USBH_UsrLog ("Enumeration done.");
 80042de:	4884      	ldr	r0, [pc, #528]	; (80044f0 <USBH_Process+0x324>)
 80042e0:	f003 fb0e 	bl	8007900 <iprintf>
 80042e4:	200a      	movs	r0, #10
 80042e6:	f003 fb23 	bl	8007930 <putchar>
      phost->device.current_interface = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f884 3620 	strb.w	r3, [r4, #1568]	; 0x620
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80042f0:	f894 3633 	ldrb.w	r3, [r4, #1587]	; 0x633
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d002      	beq.n	80042fe <USBH_Process+0x132>
        phost->gState  = HOST_INPUT;
 80042f8:	2307      	movs	r3, #7
 80042fa:	7023      	strb	r3, [r4, #0]
 80042fc:	e7e7      	b.n	80042ce <USBH_Process+0x102>
        USBH_UsrLog ("This device has only 1 configuration.");
 80042fe:	487d      	ldr	r0, [pc, #500]	; (80044f4 <USBH_Process+0x328>)
 8004300:	f003 fafe 	bl	8007900 <iprintf>
 8004304:	200a      	movs	r0, #10
 8004306:	f003 fb13 	bl	8007930 <putchar>
        phost->gState  = HOST_SET_CONFIGURATION;
 800430a:	2308      	movs	r3, #8
 800430c:	7023      	strb	r3, [r4, #0]
 800430e:	e7de      	b.n	80042ce <USBH_Process+0x102>
      if(phost->pUser != NULL)
 8004310:	f8d4 36c8 	ldr.w	r3, [r4, #1736]	; 0x6c8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0da      	beq.n	80042ce <USBH_Process+0x102>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004318:	2101      	movs	r1, #1
 800431a:	4620      	mov	r0, r4
 800431c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800431e:	2308      	movs	r3, #8
 8004320:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8004322:	2305      	movs	r3, #5
 8004324:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004328:	2300      	movs	r3, #0
 800432a:	461a      	mov	r2, r3
 800432c:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004330:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004334:	f000 fe5e 	bl	8004ff4 <osMessageQueuePut>
 8004338:	e7c9      	b.n	80042ce <USBH_Process+0x102>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800433a:	f894 1639 	ldrb.w	r1, [r4, #1593]	; 0x639
 800433e:	4620      	mov	r0, r4
 8004340:	f000 fc76 	bl	8004c30 <USBH_SetCfg>
 8004344:	b158      	cbz	r0, 800435e <USBH_Process+0x192>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004346:	2301      	movs	r3, #1
 8004348:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800434c:	2300      	movs	r3, #0
 800434e:	461a      	mov	r2, r3
 8004350:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004354:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004358:	f000 fe4c 	bl	8004ff4 <osMessageQueuePut>
    break;
 800435c:	e7b7      	b.n	80042ce <USBH_Process+0x102>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800435e:	2309      	movs	r3, #9
 8004360:	7023      	strb	r3, [r4, #0]
      USBH_UsrLog ("Default configuration set.");
 8004362:	4865      	ldr	r0, [pc, #404]	; (80044f8 <USBH_Process+0x32c>)
 8004364:	f003 facc 	bl	8007900 <iprintf>
 8004368:	200a      	movs	r0, #10
 800436a:	f003 fae1 	bl	8007930 <putchar>
 800436e:	e7ea      	b.n	8004346 <USBH_Process+0x17a>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004370:	f894 363b 	ldrb.w	r3, [r4, #1595]	; 0x63b
 8004374:	f013 0f20 	tst.w	r3, #32
 8004378:	d10d      	bne.n	8004396 <USBH_Process+0x1ca>
      phost->gState  = HOST_CHECK_CLASS;
 800437a:	230a      	movs	r3, #10
 800437c:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800437e:	2301      	movs	r3, #1
 8004380:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004384:	2300      	movs	r3, #0
 8004386:	461a      	mov	r2, r3
 8004388:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 800438c:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004390:	f000 fe30 	bl	8004ff4 <osMessageQueuePut>
    break;
 8004394:	e79b      	b.n	80042ce <USBH_Process+0x102>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004396:	2101      	movs	r1, #1
 8004398:	4620      	mov	r0, r4
 800439a:	f000 fc5a 	bl	8004c52 <USBH_SetFeature>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1ed      	bne.n	800437e <USBH_Process+0x1b2>
        USBH_UsrLog ("Device remote wakeup enabled");
 80043a2:	4856      	ldr	r0, [pc, #344]	; (80044fc <USBH_Process+0x330>)
 80043a4:	f003 faac 	bl	8007900 <iprintf>
 80043a8:	200a      	movs	r0, #10
 80043aa:	f003 fac1 	bl	8007930 <putchar>
        phost->gState  = HOST_CHECK_CLASS;
 80043ae:	230a      	movs	r3, #10
 80043b0:	7023      	strb	r3, [r4, #0]
 80043b2:	e7e4      	b.n	800437e <USBH_Process+0x1b2>
    if(phost->ClassNumber == 0U)
 80043b4:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
 80043b8:	b33b      	cbz	r3, 800440a <USBH_Process+0x23e>
      phost->pActiveClass = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c4 3678 	str.w	r3, [r4, #1656]	; 0x678
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80043c0:	b353      	cbz	r3, 8004418 <USBH_Process+0x24c>
      if(phost->pActiveClass != NULL)
 80043c2:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d047      	beq.n	800445a <USBH_Process+0x28e>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4620      	mov	r0, r4
 80043ce:	4798      	blx	r3
 80043d0:	bbb8      	cbnz	r0, 8004442 <USBH_Process+0x276>
          phost->gState  = HOST_CLASS_REQUEST;
 80043d2:	2306      	movs	r3, #6
 80043d4:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 80043d6:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	4848      	ldr	r0, [pc, #288]	; (8004500 <USBH_Process+0x334>)
 80043de:	f003 fa8f 	bl	8007900 <iprintf>
 80043e2:	200a      	movs	r0, #10
 80043e4:	f003 faa4 	bl	8007930 <putchar>
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80043e8:	f8d4 36c8 	ldr.w	r3, [r4, #1736]	; 0x6c8
 80043ec:	2103      	movs	r1, #3
 80043ee:	4620      	mov	r0, r4
 80043f0:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80043f2:	2305      	movs	r3, #5
 80043f4:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80043f8:	2300      	movs	r3, #0
 80043fa:	461a      	mov	r2, r3
 80043fc:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004400:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004404:	f000 fdf6 	bl	8004ff4 <osMessageQueuePut>
    break;
 8004408:	e761      	b.n	80042ce <USBH_Process+0x102>
      USBH_UsrLog ("No Class has been registered.");
 800440a:	483e      	ldr	r0, [pc, #248]	; (8004504 <USBH_Process+0x338>)
 800440c:	f003 fa78 	bl	8007900 <iprintf>
 8004410:	200a      	movs	r0, #10
 8004412:	f003 fa8d 	bl	8007930 <putchar>
 8004416:	e7ec      	b.n	80043f2 <USBH_Process+0x226>
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004418:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 800441c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	7911      	ldrb	r1, [r2, #4]
 8004424:	f894 2643 	ldrb.w	r2, [r4, #1603]	; 0x643
 8004428:	4291      	cmp	r1, r2
 800442a:	d002      	beq.n	8004432 <USBH_Process+0x266>
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800442c:	3301      	adds	r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e7c6      	b.n	80043c0 <USBH_Process+0x1f4>
          phost->pActiveClass = phost->pClass[idx];
 8004432:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 8004436:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800443a:	6852      	ldr	r2, [r2, #4]
 800443c:	f8c4 2678 	str.w	r2, [r4, #1656]	; 0x678
 8004440:	e7f4      	b.n	800442c <USBH_Process+0x260>
          phost->gState  = HOST_ABORT_STATE;
 8004442:	230d      	movs	r3, #13
 8004444:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8004446:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	482e      	ldr	r0, [pc, #184]	; (8004508 <USBH_Process+0x33c>)
 800444e:	f003 fa57 	bl	8007900 <iprintf>
 8004452:	200a      	movs	r0, #10
 8004454:	f003 fa6c 	bl	8007930 <putchar>
 8004458:	e7cb      	b.n	80043f2 <USBH_Process+0x226>
        phost->gState  = HOST_ABORT_STATE;
 800445a:	230d      	movs	r3, #13
 800445c:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog ("No registered class for this device.");
 800445e:	482b      	ldr	r0, [pc, #172]	; (800450c <USBH_Process+0x340>)
 8004460:	f003 fa4e 	bl	8007900 <iprintf>
 8004464:	200a      	movs	r0, #10
 8004466:	f003 fa63 	bl	8007930 <putchar>
 800446a:	e7c2      	b.n	80043f2 <USBH_Process+0x226>
    if(phost->pActiveClass != NULL)
 800446c:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 8004470:	b163      	cbz	r3, 800448c <USBH_Process+0x2c0>
      status = phost->pActiveClass->Requests(phost);
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	4620      	mov	r0, r4
 8004476:	4798      	blx	r3
 8004478:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800447c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f af24 	bne.w	80042ce <USBH_Process+0x102>
        phost->gState  = HOST_CLASS;
 8004486:	230b      	movs	r3, #11
 8004488:	7023      	strb	r3, [r4, #0]
 800448a:	e720      	b.n	80042ce <USBH_Process+0x102>
      phost->gState  = HOST_ABORT_STATE;
 800448c:	230d      	movs	r3, #13
 800448e:	7023      	strb	r3, [r4, #0]
      USBH_ErrLog ("Invalid Class Driver.");
 8004490:	481f      	ldr	r0, [pc, #124]	; (8004510 <USBH_Process+0x344>)
 8004492:	f003 fa35 	bl	8007900 <iprintf>
 8004496:	481f      	ldr	r0, [pc, #124]	; (8004514 <USBH_Process+0x348>)
 8004498:	f003 fa32 	bl	8007900 <iprintf>
 800449c:	200a      	movs	r0, #10
 800449e:	f003 fa47 	bl	8007930 <putchar>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80044a2:	2305      	movs	r3, #5
 80044a4:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80044a8:	2300      	movs	r3, #0
 80044aa:	461a      	mov	r2, r3
 80044ac:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80044b0:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80044b4:	f000 fd9e 	bl	8004ff4 <osMessageQueuePut>
 80044b8:	e709      	b.n	80042ce <USBH_Process+0x102>
    if(phost->pActiveClass != NULL)
 80044ba:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f43f af05 	beq.w	80042ce <USBH_Process+0x102>
      phost->pActiveClass->BgndProcess(phost);
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4620      	mov	r0, r4
 80044c8:	4798      	blx	r3
 80044ca:	e700      	b.n	80042ce <USBH_Process+0x102>
    DeInitStateMachine(phost);
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7ff fc13 	bl	8003cf8 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80044d2:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f43f aef9 	beq.w	80042ce <USBH_Process+0x102>
      phost->pActiveClass->DeInit(phost);
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	4620      	mov	r0, r4
 80044e0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c4 3678 	str.w	r3, [r4, #1656]	; 0x678
 80044e8:	e6f1      	b.n	80042ce <USBH_Process+0x102>
 80044ea:	bf00      	nop
 80044ec:	08008cfc 	.word	0x08008cfc
 80044f0:	08008d10 	.word	0x08008d10
 80044f4:	08008d24 	.word	0x08008d24
 80044f8:	08008d4c 	.word	0x08008d4c
 80044fc:	08008d68 	.word	0x08008d68
 8004500:	08008da8 	.word	0x08008da8
 8004504:	08008d88 	.word	0x08008d88
 8004508:	08008dbc 	.word	0x08008dbc
 800450c:	08008ddc 	.word	0x08008ddc
 8004510:	08008cbc 	.word	0x08008cbc
 8004514:	08008e04 	.word	0x08008e04

08004518 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
  osStatus_t status;

  for(;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	2200      	movs	r2, #0
 8004522:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004526:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 800452a:	f000 fdb5 	bl	8005098 <osMessageQueueGet>
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
    if (status == osOK)
 800452e:	2800      	cmp	r0, #0
 8004530:	d1f4      	bne.n	800451c <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8004532:	4620      	mov	r0, r4
 8004534:	f7ff fe4a 	bl	80041cc <USBH_Process>
 8004538:	e7f0      	b.n	800451c <USBH_Process_OS+0x4>

0800453a <USBH_LL_Connect>:
{
 800453a:	b510      	push	{r4, lr}
 800453c:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 800453e:	7803      	ldrb	r3, [r0, #0]
 8004540:	b9a3      	cbnz	r3, 800456c <USBH_LL_Connect+0x32>
    phost->device.is_connected = 1U;
 8004542:	2301      	movs	r3, #1
 8004544:	f880 361e 	strb.w	r3, [r0, #1566]	; 0x61e
    if(phost->pUser != NULL)
 8004548:	f8d0 36c8 	ldr.w	r3, [r0, #1736]	; 0x6c8
 800454c:	b10b      	cbz	r3, 8004552 <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 800454e:	2104      	movs	r1, #4
 8004550:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004552:	2301      	movs	r3, #1
 8004554:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004558:	2300      	movs	r3, #0
 800455a:	461a      	mov	r2, r3
 800455c:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004560:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004564:	f000 fd46 	bl	8004ff4 <osMessageQueuePut>
}
 8004568:	2000      	movs	r0, #0
 800456a:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 800456c:	f890 361f 	ldrb.w	r3, [r0, #1567]	; 0x61f
 8004570:	2b01      	cmp	r3, #1
 8004572:	d1ee      	bne.n	8004552 <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 8004574:	2302      	movs	r3, #2
 8004576:	7003      	strb	r3, [r0, #0]
 8004578:	e7eb      	b.n	8004552 <USBH_LL_Connect+0x18>
	...

0800457c <USBH_LL_Disconnect>:
{
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 8004580:	f003 f856 	bl	8007630 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004584:	7921      	ldrb	r1, [r4, #4]
 8004586:	4620      	mov	r0, r4
 8004588:	f000 fc05 	bl	8004d96 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800458c:	7961      	ldrb	r1, [r4, #5]
 800458e:	4620      	mov	r0, r4
 8004590:	f000 fc01 	bl	8004d96 <USBH_FreePipe>
  phost->device.is_connected = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
  if(phost->pUser != NULL)
 800459a:	f8d4 36c8 	ldr.w	r3, [r4, #1736]	; 0x6c8
 800459e:	b113      	cbz	r3, 80045a6 <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80045a0:	2105      	movs	r1, #5
 80045a2:	4620      	mov	r0, r4
 80045a4:	4798      	blx	r3
  USBH_UsrLog("USB Device disconnected");
 80045a6:	480c      	ldr	r0, [pc, #48]	; (80045d8 <USBH_LL_Disconnect+0x5c>)
 80045a8:	f003 f9aa 	bl	8007900 <iprintf>
 80045ac:	200a      	movs	r0, #10
 80045ae:	f003 f9bf 	bl	8007930 <putchar>
  USBH_LL_Start(phost);
 80045b2:	4620      	mov	r0, r4
 80045b4:	f003 f834 	bl	8007620 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 80045b8:	2303      	movs	r3, #3
 80045ba:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80045bc:	2301      	movs	r3, #1
 80045be:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80045c2:	2300      	movs	r3, #0
 80045c4:	461a      	mov	r2, r3
 80045c6:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80045ca:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80045ce:	f000 fd11 	bl	8004ff4 <osMessageQueuePut>
}
 80045d2:	2000      	movs	r0, #0
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	bf00      	nop
 80045d8:	08008ce4 	.word	0x08008ce4

080045dc <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80045dc:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80045de:	2301      	movs	r3, #1
 80045e0:	f8c0 36d4 	str.w	r3, [r0, #1748]	; 0x6d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80045e4:	2300      	movs	r3, #0
 80045e6:	461a      	mov	r2, r3
 80045e8:	f200 61d4 	addw	r1, r0, #1748	; 0x6d4
 80045ec:	f8d0 06cc 	ldr.w	r0, [r0, #1740]	; 0x6cc
 80045f0:	f000 fd00 	bl	8004ff4 <osMessageQueuePut>
#endif

  return USBH_OK;
}
 80045f4:	2000      	movs	r0, #0
 80045f6:	bd08      	pop	{r3, pc}

080045f8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80045f8:	b410      	push	{r4}
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80045fa:	780b      	ldrb	r3, [r1, #0]
 80045fc:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80045fe:	784b      	ldrb	r3, [r1, #1]
 8004600:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8004602:	788b      	ldrb	r3, [r1, #2]
 8004604:	78cc      	ldrb	r4, [r1, #3]
 8004606:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800460a:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800460c:	790b      	ldrb	r3, [r1, #4]
 800460e:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004610:	794b      	ldrb	r3, [r1, #5]
 8004612:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8004614:	798b      	ldrb	r3, [r1, #6]
 8004616:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004618:	79cb      	ldrb	r3, [r1, #7]
 800461a:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 800461c:	2a08      	cmp	r2, #8
 800461e:	d916      	bls.n	800464e <USBH_ParseDevDesc+0x56>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8004620:	7a0b      	ldrb	r3, [r1, #8]
 8004622:	7a4a      	ldrb	r2, [r1, #9]
 8004624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004628:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800462a:	7a8b      	ldrb	r3, [r1, #10]
 800462c:	7aca      	ldrb	r2, [r1, #11]
 800462e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004632:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004634:	7b0b      	ldrb	r3, [r1, #12]
 8004636:	7b4a      	ldrb	r2, [r1, #13]
 8004638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800463c:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800463e:	7b8b      	ldrb	r3, [r1, #14]
 8004640:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004642:	7bcb      	ldrb	r3, [r1, #15]
 8004644:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004646:	7c0b      	ldrb	r3, [r1, #16]
 8004648:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800464a:	7c4b      	ldrb	r3, [r1, #17]
 800464c:	7443      	strb	r3, [r0, #17]
  }
}
 800464e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004654:	780b      	ldrb	r3, [r1, #0]
 8004656:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004658:	784b      	ldrb	r3, [r1, #1]
 800465a:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800465c:	788b      	ldrb	r3, [r1, #2]
 800465e:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004660:	78cb      	ldrb	r3, [r1, #3]
 8004662:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004664:	790b      	ldrb	r3, [r1, #4]
 8004666:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004668:	794b      	ldrb	r3, [r1, #5]
 800466a:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800466c:	798b      	ldrb	r3, [r1, #6]
 800466e:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004670:	79cb      	ldrb	r3, [r1, #7]
 8004672:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004674:	7a0b      	ldrb	r3, [r1, #8]
 8004676:	7203      	strb	r3, [r0, #8]
 8004678:	4770      	bx	lr

0800467a <USBH_ParseEPDesc>:
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800467a:	780b      	ldrb	r3, [r1, #0]
 800467c:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800467e:	784b      	ldrb	r3, [r1, #1]
 8004680:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8004682:	788b      	ldrb	r3, [r1, #2]
 8004684:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004686:	78cb      	ldrb	r3, [r1, #3]
 8004688:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800468a:	790b      	ldrb	r3, [r1, #4]
 800468c:	794a      	ldrb	r2, [r1, #5]
 800468e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004692:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004694:	798b      	ldrb	r3, [r1, #6]
 8004696:	7183      	strb	r3, [r0, #6]
 8004698:	4770      	bx	lr

0800469a <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800469a:	7843      	ldrb	r3, [r0, #1]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d000      	beq.n	80046a2 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 80046a0:	4770      	bx	lr
{
 80046a2:	b410      	push	{r4}
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80046a4:	7804      	ldrb	r4, [r0, #0]
 80046a6:	3c02      	subs	r4, #2
 80046a8:	42a2      	cmp	r2, r4
 80046aa:	bf28      	it	cs
 80046ac:	4622      	movcs	r2, r4
 80046ae:	b294      	uxth	r4, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80046b0:	2300      	movs	r3, #0
 80046b2:	e005      	b.n	80046c0 <USBH_ParseStringDesc+0x26>
      *pdest =  psrc[idx];
 80046b4:	18c2      	adds	r2, r0, r3
 80046b6:	7892      	ldrb	r2, [r2, #2]
 80046b8:	f801 2b01 	strb.w	r2, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80046bc:	3302      	adds	r3, #2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d3f7      	bcc.n	80046b4 <USBH_ParseStringDesc+0x1a>
    *pdest = 0U; /* mark end of string */
 80046c4:	2300      	movs	r3, #0
 80046c6:	700b      	strb	r3, [r1, #0]
}
 80046c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046cc:	e7e8      	b.n	80046a0 <USBH_ParseStringDesc+0x6>
	...

080046d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80046d0:	b530      	push	{r4, r5, lr}
 80046d2:	b083      	sub	sp, #12
 80046d4:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80046d6:	7e03      	ldrb	r3, [r0, #24]
 80046d8:	3b01      	subs	r3, #1
 80046da:	2b0a      	cmp	r3, #10
 80046dc:	f200 8190 	bhi.w	8004a00 <USBH_HandleControl+0x330>
 80046e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046e4:	0015000b 	.word	0x0015000b
 80046e8:	005c0050 	.word	0x005c0050
 80046ec:	00a00092 	.word	0x00a00092
 80046f0:	00f500e9 	.word	0x00f500e9
 80046f4:	0139012b 	.word	0x0139012b
 80046f8:	0171      	.short	0x0171
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80046fa:	7942      	ldrb	r2, [r0, #5]
 80046fc:	f100 0110 	add.w	r1, r0, #16
 8004700:	f000 faca 	bl	8004c98 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8004704:	2302      	movs	r3, #2
 8004706:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004708:	2001      	movs	r0, #1

  default:
    break;
  }
  return status;
}
 800470a:	b003      	add	sp, #12
 800470c:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800470e:	7941      	ldrb	r1, [r0, #5]
 8004710:	f002 ff4c 	bl	80075ac <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004714:	2801      	cmp	r0, #1
 8004716:	d005      	beq.n	8004724 <USBH_HandleControl+0x54>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004718:	2804      	cmp	r0, #4
 800471a:	d024      	beq.n	8004766 <USBH_HandleControl+0x96>
 800471c:	2802      	cmp	r0, #2
 800471e:	d022      	beq.n	8004766 <USBH_HandleControl+0x96>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004720:	2001      	movs	r0, #1
 8004722:	e7f2      	b.n	800470a <USBH_HandleControl+0x3a>
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8004724:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8004726:	8ae3      	ldrh	r3, [r4, #22]
 8004728:	b1a3      	cbz	r3, 8004754 <USBH_HandleControl+0x84>
        if (direction == USB_D2H)
 800472a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800472e:	d10e      	bne.n	800474e <USBH_HandleControl+0x7e>
          phost->Control.state = CTRL_DATA_OUT;
 8004730:	2305      	movs	r3, #5
 8004732:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004734:	2303      	movs	r3, #3
 8004736:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800473a:	2300      	movs	r3, #0
 800473c:	461a      	mov	r2, r3
 800473e:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004742:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004746:	f000 fc55 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 800474a:	2001      	movs	r0, #1
 800474c:	e7dd      	b.n	800470a <USBH_HandleControl+0x3a>
          phost->Control.state = CTRL_DATA_IN;
 800474e:	2303      	movs	r3, #3
 8004750:	7623      	strb	r3, [r4, #24]
 8004752:	e7ef      	b.n	8004734 <USBH_HandleControl+0x64>
        if (direction == USB_D2H)
 8004754:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004758:	d102      	bne.n	8004760 <USBH_HandleControl+0x90>
          phost->Control.state = CTRL_STATUS_IN;
 800475a:	2307      	movs	r3, #7
 800475c:	7623      	strb	r3, [r4, #24]
 800475e:	e7e9      	b.n	8004734 <USBH_HandleControl+0x64>
          phost->Control.state = CTRL_STATUS_OUT;
 8004760:	2309      	movs	r3, #9
 8004762:	7623      	strb	r3, [r4, #24]
 8004764:	e7e6      	b.n	8004734 <USBH_HandleControl+0x64>
        phost->Control.state = CTRL_ERROR;
 8004766:	230b      	movs	r3, #11
 8004768:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800476a:	2303      	movs	r3, #3
 800476c:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004770:	2300      	movs	r3, #0
 8004772:	461a      	mov	r2, r3
 8004774:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004778:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 800477c:	f000 fc3a 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004780:	2001      	movs	r0, #1
 8004782:	e7c2      	b.n	800470a <USBH_HandleControl+0x3a>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004784:	f8d0 36bc 	ldr.w	r3, [r0, #1724]	; 0x6bc
 8004788:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800478a:	7903      	ldrb	r3, [r0, #4]
 800478c:	8982      	ldrh	r2, [r0, #12]
 800478e:	6881      	ldr	r1, [r0, #8]
 8004790:	f000 faa9 	bl	8004ce6 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004794:	2304      	movs	r3, #4
 8004796:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004798:	2001      	movs	r0, #1
    break;
 800479a:	e7b6      	b.n	800470a <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800479c:	7901      	ldrb	r1, [r0, #4]
 800479e:	f002 ff05 	bl	80075ac <USBH_LL_GetURBState>
 80047a2:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 80047a4:	2801      	cmp	r0, #1
 80047a6:	d005      	beq.n	80047b4 <USBH_HandleControl+0xe4>
    if  (URB_Status == USBH_URB_STALL)
 80047a8:	2d05      	cmp	r5, #5
 80047aa:	d011      	beq.n	80047d0 <USBH_HandleControl+0x100>
      if (URB_Status == USBH_URB_ERROR)
 80047ac:	2d04      	cmp	r5, #4
 80047ae:	d01c      	beq.n	80047ea <USBH_HandleControl+0x11a>
  USBH_StatusTypeDef status = USBH_BUSY;
 80047b0:	2001      	movs	r0, #1
 80047b2:	e7aa      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STATUS_OUT;
 80047b4:	2309      	movs	r3, #9
 80047b6:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80047be:	2300      	movs	r3, #0
 80047c0:	461a      	mov	r2, r3
 80047c2:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80047c6:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80047ca:	f000 fc13 	bl	8004ff4 <osMessageQueuePut>
 80047ce:	e7eb      	b.n	80047a8 <USBH_HandleControl+0xd8>
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80047d0:	2503      	movs	r5, #3
 80047d2:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80047d6:	2300      	movs	r3, #0
 80047d8:	461a      	mov	r2, r3
 80047da:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80047de:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80047e2:	f000 fc07 	bl	8004ff4 <osMessageQueuePut>
      status = USBH_NOT_SUPPORTED;
 80047e6:	4628      	mov	r0, r5
 80047e8:	e78f      	b.n	800470a <USBH_HandleControl+0x3a>
        phost->Control.state = CTRL_ERROR;
 80047ea:	230b      	movs	r3, #11
 80047ec:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80047f4:	2300      	movs	r3, #0
 80047f6:	461a      	mov	r2, r3
 80047f8:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80047fc:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004800:	f000 fbf8 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004804:	2001      	movs	r0, #1
 8004806:	e780      	b.n	800470a <USBH_HandleControl+0x3a>
    USBH_CtlSendData (phost,
 8004808:	7943      	ldrb	r3, [r0, #5]
 800480a:	8982      	ldrh	r2, [r0, #12]
 800480c:	2501      	movs	r5, #1
 800480e:	9500      	str	r5, [sp, #0]
 8004810:	6881      	ldr	r1, [r0, #8]
 8004812:	f000 fa52 	bl	8004cba <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004816:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
 800481a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800481c:	2306      	movs	r3, #6
 800481e:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004820:	4628      	mov	r0, r5
    break;
 8004822:	e772      	b.n	800470a <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004824:	7941      	ldrb	r1, [r0, #5]
 8004826:	f002 fec1 	bl	80075ac <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800482a:	2801      	cmp	r0, #1
 800482c:	d007      	beq.n	800483e <USBH_HandleControl+0x16e>
    else if  (URB_Status == USBH_URB_STALL)
 800482e:	2805      	cmp	r0, #5
 8004830:	d014      	beq.n	800485c <USBH_HandleControl+0x18c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004832:	2802      	cmp	r0, #2
 8004834:	d021      	beq.n	800487a <USBH_HandleControl+0x1aa>
      if (URB_Status == USBH_URB_ERROR)
 8004836:	2804      	cmp	r0, #4
 8004838:	d02e      	beq.n	8004898 <USBH_HandleControl+0x1c8>
  USBH_StatusTypeDef status = USBH_BUSY;
 800483a:	2001      	movs	r0, #1
 800483c:	e765      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STATUS_IN;
 800483e:	2307      	movs	r3, #7
 8004840:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004842:	2303      	movs	r3, #3
 8004844:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004848:	2300      	movs	r3, #0
 800484a:	461a      	mov	r2, r3
 800484c:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004850:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004854:	f000 fbce 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004858:	2001      	movs	r0, #1
 800485a:	e756      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STALLED;
 800485c:	230c      	movs	r3, #12
 800485e:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004860:	2503      	movs	r5, #3
 8004862:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004866:	2300      	movs	r3, #0
 8004868:	461a      	mov	r2, r3
 800486a:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 800486e:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004872:	f000 fbbf 	bl	8004ff4 <osMessageQueuePut>
      status = USBH_NOT_SUPPORTED;
 8004876:	4628      	mov	r0, r5
 8004878:	e747      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_DATA_OUT;
 800487a:	2305      	movs	r3, #5
 800487c:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800487e:	2303      	movs	r3, #3
 8004880:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004884:	2300      	movs	r3, #0
 8004886:	461a      	mov	r2, r3
 8004888:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 800488c:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004890:	f000 fbb0 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004894:	2001      	movs	r0, #1
 8004896:	e738      	b.n	800470a <USBH_HandleControl+0x3a>
        phost->Control.state = CTRL_ERROR;
 8004898:	230b      	movs	r3, #11
 800489a:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800489c:	2303      	movs	r3, #3
 800489e:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80048a2:	2300      	movs	r3, #0
 80048a4:	461a      	mov	r2, r3
 80048a6:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80048aa:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80048ae:	f000 fba1 	bl	8004ff4 <osMessageQueuePut>
        status = USBH_FAIL;
 80048b2:	2002      	movs	r0, #2
 80048b4:	e729      	b.n	800470a <USBH_HandleControl+0x3a>
    USBH_CtlReceiveData (phost,
 80048b6:	7903      	ldrb	r3, [r0, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	4611      	mov	r1, r2
 80048bc:	f000 fa13 	bl	8004ce6 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 80048c0:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
 80048c4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80048c6:	2308      	movs	r3, #8
 80048c8:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80048ca:	2001      	movs	r0, #1
    break;
 80048cc:	e71d      	b.n	800470a <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80048ce:	7901      	ldrb	r1, [r0, #4]
 80048d0:	f002 fe6c 	bl	80075ac <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80048d4:	2801      	cmp	r0, #1
 80048d6:	d005      	beq.n	80048e4 <USBH_HandleControl+0x214>
    else if (URB_Status == USBH_URB_ERROR)
 80048d8:	2804      	cmp	r0, #4
 80048da:	d012      	beq.n	8004902 <USBH_HandleControl+0x232>
      if(URB_Status == USBH_URB_STALL)
 80048dc:	2805      	cmp	r0, #5
 80048de:	d01f      	beq.n	8004920 <USBH_HandleControl+0x250>
  USBH_StatusTypeDef status = USBH_BUSY;
 80048e0:	2001      	movs	r0, #1
 80048e2:	e712      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_COMPLETE;
 80048e4:	230d      	movs	r3, #13
 80048e6:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80048ee:	2300      	movs	r3, #0
 80048f0:	461a      	mov	r2, r3
 80048f2:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80048f6:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80048fa:	f000 fb7b 	bl	8004ff4 <osMessageQueuePut>
      status = USBH_OK;
 80048fe:	2000      	movs	r0, #0
 8004900:	e703      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_ERROR;
 8004902:	230b      	movs	r3, #11
 8004904:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004906:	2303      	movs	r3, #3
 8004908:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800490c:	2300      	movs	r3, #0
 800490e:	461a      	mov	r2, r3
 8004910:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 8004914:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004918:	f000 fb6c 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 800491c:	2001      	movs	r0, #1
 800491e:	e6f4      	b.n	800470a <USBH_HandleControl+0x3a>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004920:	2503      	movs	r5, #3
 8004922:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004926:	2300      	movs	r3, #0
 8004928:	461a      	mov	r2, r3
 800492a:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 800492e:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004932:	f000 fb5f 	bl	8004ff4 <osMessageQueuePut>
        status = USBH_NOT_SUPPORTED;
 8004936:	4628      	mov	r0, r5
 8004938:	e6e7      	b.n	800470a <USBH_HandleControl+0x3a>
    USBH_CtlSendData (phost,
 800493a:	7943      	ldrb	r3, [r0, #5]
 800493c:	2501      	movs	r5, #1
 800493e:	9500      	str	r5, [sp, #0]
 8004940:	2200      	movs	r2, #0
 8004942:	4611      	mov	r1, r2
 8004944:	f000 f9b9 	bl	8004cba <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004948:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
 800494c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800494e:	230a      	movs	r3, #10
 8004950:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004952:	4628      	mov	r0, r5
    break;
 8004954:	e6d9      	b.n	800470a <USBH_HandleControl+0x3a>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004956:	7941      	ldrb	r1, [r0, #5]
 8004958:	f002 fe28 	bl	80075ac <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800495c:	2801      	cmp	r0, #1
 800495e:	d005      	beq.n	800496c <USBH_HandleControl+0x29c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004960:	2802      	cmp	r0, #2
 8004962:	d012      	beq.n	800498a <USBH_HandleControl+0x2ba>
      if (URB_Status == USBH_URB_ERROR)
 8004964:	2804      	cmp	r0, #4
 8004966:	d01f      	beq.n	80049a8 <USBH_HandleControl+0x2d8>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004968:	2001      	movs	r0, #1
 800496a:	e6ce      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_COMPLETE;
 800496c:	230d      	movs	r3, #13
 800496e:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004970:	2303      	movs	r3, #3
 8004972:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004976:	2300      	movs	r3, #0
 8004978:	461a      	mov	r2, r3
 800497a:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 800497e:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 8004982:	f000 fb37 	bl	8004ff4 <osMessageQueuePut>
      status = USBH_OK;
 8004986:	2000      	movs	r0, #0
 8004988:	e6bf      	b.n	800470a <USBH_HandleControl+0x3a>
      phost->Control.state = CTRL_STATUS_OUT;
 800498a:	2309      	movs	r3, #9
 800498c:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800498e:	2303      	movs	r3, #3
 8004990:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004994:	2300      	movs	r3, #0
 8004996:	461a      	mov	r2, r3
 8004998:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 800499c:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80049a0:	f000 fb28 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80049a4:	2001      	movs	r0, #1
 80049a6:	e6b0      	b.n	800470a <USBH_HandleControl+0x3a>
        phost->Control.state = CTRL_ERROR;
 80049a8:	230b      	movs	r3, #11
 80049aa:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	f8c4 36d4 	str.w	r3, [r4, #1748]	; 0x6d4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80049b2:	2300      	movs	r3, #0
 80049b4:	461a      	mov	r2, r3
 80049b6:	f204 61d4 	addw	r1, r4, #1748	; 0x6d4
 80049ba:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
 80049be:	f000 fb19 	bl	8004ff4 <osMessageQueuePut>
  USBH_StatusTypeDef status = USBH_BUSY;
 80049c2:	2001      	movs	r0, #1
 80049c4:	e6a1      	b.n	800470a <USBH_HandleControl+0x3a>
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80049c6:	7e43      	ldrb	r3, [r0, #25]
 80049c8:	3301      	adds	r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	7643      	strb	r3, [r0, #25]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d910      	bls.n	80049f4 <USBH_HandleControl+0x324>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80049d2:	f8d0 36c8 	ldr.w	r3, [r0, #1736]	; 0x6c8
 80049d6:	2106      	movs	r1, #6
 80049d8:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 80049de:	4809      	ldr	r0, [pc, #36]	; (8004a04 <USBH_HandleControl+0x334>)
 80049e0:	f002 ff8e 	bl	8007900 <iprintf>
 80049e4:	4808      	ldr	r0, [pc, #32]	; (8004a08 <USBH_HandleControl+0x338>)
 80049e6:	f002 ff8b 	bl	8007900 <iprintf>
 80049ea:	200a      	movs	r0, #10
 80049ec:	f002 ffa0 	bl	8007930 <putchar>
      status = USBH_FAIL;
 80049f0:	2002      	movs	r0, #2
 80049f2:	e68a      	b.n	800470a <USBH_HandleControl+0x3a>
      USBH_LL_Stop(phost);
 80049f4:	f002 fe1c 	bl	8007630 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 80049f8:	2001      	movs	r0, #1
 80049fa:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 80049fc:	70a0      	strb	r0, [r4, #2]
 80049fe:	e684      	b.n	800470a <USBH_HandleControl+0x3a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a00:	2001      	movs	r0, #1
 8004a02:	e682      	b.n	800470a <USBH_HandleControl+0x3a>
 8004a04:	08008cbc 	.word	0x08008cbc
 8004a08:	08008ec0 	.word	0x08008ec0

08004a0c <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a0c:	7803      	ldrb	r3, [r0, #0]
 8004a0e:	880a      	ldrh	r2, [r1, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	800b      	strh	r3, [r1, #0]
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8004a14:	7803      	ldrb	r3, [r0, #0]
}
 8004a16:	4418      	add	r0, r3
 8004a18:	4770      	bx	lr

08004a1a <USBH_ParseCfgDesc>:
{
 8004a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	b082      	sub	sp, #8
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004a20:	780b      	ldrb	r3, [r1, #0]
 8004a22:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004a24:	784b      	ldrb	r3, [r1, #1]
 8004a26:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004a28:	788b      	ldrb	r3, [r1, #2]
 8004a2a:	78cc      	ldrb	r4, [r1, #3]
 8004a2c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8004a30:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004a32:	790b      	ldrb	r3, [r1, #4]
 8004a34:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004a36:	794b      	ldrb	r3, [r1, #5]
 8004a38:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004a3a:	798b      	ldrb	r3, [r1, #6]
 8004a3c:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004a3e:	79cb      	ldrb	r3, [r1, #7]
 8004a40:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004a42:	7a0b      	ldrb	r3, [r1, #8]
 8004a44:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004a46:	2a09      	cmp	r2, #9
 8004a48:	d945      	bls.n	8004ad6 <USBH_ParseCfgDesc+0xbc>
 8004a4a:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 8004a4c:	2309      	movs	r3, #9
 8004a4e:	f8ad 3006 	strh.w	r3, [sp, #6]
  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8004a52:	460c      	mov	r4, r1
  uint8_t                      if_ix = 0U;
 8004a54:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004a56:	2e01      	cmp	r6, #1
 8004a58:	d83d      	bhi.n	8004ad6 <USBH_ParseCfgDesc+0xbc>
 8004a5a:	886a      	ldrh	r2, [r5, #2]
 8004a5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d938      	bls.n	8004ad6 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004a64:	f10d 0106 	add.w	r1, sp, #6
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff ffcf 	bl	8004a0c <USBH_GetNextDesc>
 8004a6e:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004a70:	7843      	ldrb	r3, [r0, #1]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d1ef      	bne.n	8004a56 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 8004a76:	46b0      	mov	r8, r6
 8004a78:	201a      	movs	r0, #26
 8004a7a:	fb00 f006 	mul.w	r0, r0, r6
 8004a7e:	3008      	adds	r0, #8
 8004a80:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8004a82:	4621      	mov	r1, r4
 8004a84:	3002      	adds	r0, #2
 8004a86:	f7ff fde5 	bl	8004654 <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8004a8a:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004a8c:	231a      	movs	r3, #26
 8004a8e:	fb03 5308 	mla	r3, r3, r8, r5
 8004a92:	7b9b      	ldrb	r3, [r3, #14]
 8004a94:	429f      	cmp	r7, r3
 8004a96:	d21b      	bcs.n	8004ad0 <USBH_ParseCfgDesc+0xb6>
 8004a98:	886a      	ldrh	r2, [r5, #2]
 8004a9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d916      	bls.n	8004ad0 <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8004aa2:	f10d 0106 	add.w	r1, sp, #6
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7ff ffb0 	bl	8004a0c <USBH_GetNextDesc>
 8004aac:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004aae:	7843      	ldrb	r3, [r0, #1]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d1eb      	bne.n	8004a8c <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8004ab4:	3701      	adds	r7, #1
 8004ab6:	201a      	movs	r0, #26
 8004ab8:	fb00 f008 	mul.w	r0, r0, r8
 8004abc:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8004ac0:	3008      	adds	r0, #8
 8004ac2:	4428      	add	r0, r5
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	3004      	adds	r0, #4
 8004ac8:	f7ff fdd7 	bl	800467a <USBH_ParseEPDesc>
            ep_ix++;
 8004acc:	b2ff      	uxtb	r7, r7
 8004ace:	e7dd      	b.n	8004a8c <USBH_ParseCfgDesc+0x72>
        if_ix++;
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	b2f6      	uxtb	r6, r6
 8004ad4:	e7bf      	b.n	8004a56 <USBH_ParseCfgDesc+0x3c>
}
 8004ad6:	b002      	add	sp, #8
 8004ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004adc <USBH_CtlReq>:
{
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8004ae0:	7883      	ldrb	r3, [r0, #2]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d003      	beq.n	8004aee <USBH_CtlReq+0x12>
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d014      	beq.n	8004b14 <USBH_CtlReq+0x38>
  status = USBH_BUSY;
 8004aea:	2501      	movs	r5, #1
 8004aec:	e010      	b.n	8004b10 <USBH_CtlReq+0x34>
    phost->Control.buff = buff;
 8004aee:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8004af0:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8004af2:	2501      	movs	r5, #1
 8004af4:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8004af6:	2302      	movs	r3, #2
 8004af8:	7083      	strb	r3, [r0, #2]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	f8c0 36d4 	str.w	r3, [r0, #1748]	; 0x6d4
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8004b00:	2300      	movs	r3, #0
 8004b02:	461a      	mov	r2, r3
 8004b04:	f200 61d4 	addw	r1, r0, #1748	; 0x6d4
 8004b08:	f8d0 06cc 	ldr.w	r0, [r0, #1740]	; 0x6cc
 8004b0c:	f000 fa72 	bl	8004ff4 <osMessageQueuePut>
}
 8004b10:	4628      	mov	r0, r5
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
    status = USBH_HandleControl(phost);
 8004b14:	f7ff fddc 	bl	80046d0 <USBH_HandleControl>
    if (status == USBH_OK)
 8004b18:	4605      	mov	r5, r0
 8004b1a:	b130      	cbz	r0, 8004b2a <USBH_CtlReq+0x4e>
    else if (status == USBH_NOT_SUPPORTED)
 8004b1c:	2803      	cmp	r0, #3
 8004b1e:	d009      	beq.n	8004b34 <USBH_CtlReq+0x58>
      if (status == USBH_FAIL)
 8004b20:	2802      	cmp	r0, #2
 8004b22:	d1f5      	bne.n	8004b10 <USBH_CtlReq+0x34>
        phost->RequestState = CMD_SEND;
 8004b24:	2201      	movs	r2, #1
 8004b26:	70a2      	strb	r2, [r4, #2]
 8004b28:	e7f2      	b.n	8004b10 <USBH_CtlReq+0x34>
      phost->RequestState = CMD_SEND;
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8004b2e:	2200      	movs	r2, #0
 8004b30:	7622      	strb	r2, [r4, #24]
 8004b32:	e7ed      	b.n	8004b10 <USBH_CtlReq+0x34>
      phost->RequestState = CMD_SEND;
 8004b34:	2201      	movs	r2, #1
 8004b36:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8004b38:	2200      	movs	r2, #0
 8004b3a:	7622      	strb	r2, [r4, #24]
 8004b3c:	e7e8      	b.n	8004b10 <USBH_CtlReq+0x34>

08004b3e <USBH_GetDescriptor>:
{
 8004b3e:	b538      	push	{r3, r4, r5, lr}
 8004b40:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if(phost->RequestState == CMD_SEND)
 8004b44:	7884      	ldrb	r4, [r0, #2]
 8004b46:	2c01      	cmp	r4, #1
 8004b48:	d004      	beq.n	8004b54 <USBH_GetDescriptor+0x16>
  return USBH_CtlReq(phost, buff, length);
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f7ff ffc5 	bl	8004adc <USBH_CtlReq>
}
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004b54:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8004b58:	7404      	strb	r4, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004b5a:	2106      	movs	r1, #6
 8004b5c:	7441      	strb	r1, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8004b5e:	8242      	strh	r2, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004b60:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004b64:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8004b68:	d003      	beq.n	8004b72 <USBH_GetDescriptor+0x34>
      phost->Control.setup.b.wIndex.w = 0U;
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8004b6e:	82c5      	strh	r5, [r0, #22]
 8004b70:	e7eb      	b.n	8004b4a <USBH_GetDescriptor+0xc>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8004b72:	f240 4209 	movw	r2, #1033	; 0x409
 8004b76:	8282      	strh	r2, [r0, #20]
 8004b78:	e7f9      	b.n	8004b6e <USBH_GetDescriptor+0x30>

08004b7a <USBH_Get_DevDesc>:
{
 8004b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	4604      	mov	r4, r0
                                  phost->device.Data,
 8004b80:	f500 7507 	add.w	r5, r0, #540	; 0x21c
  if((status = USBH_GetDescriptor(phost,
 8004b84:	460e      	mov	r6, r1
 8004b86:	9100      	str	r1, [sp, #0]
 8004b88:	462b      	mov	r3, r5
 8004b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f7ff ffd5 	bl	8004b3e <USBH_GetDescriptor>
 8004b94:	4607      	mov	r7, r0
 8004b96:	b110      	cbz	r0, 8004b9e <USBH_Get_DevDesc+0x24>
}
 8004b98:	4638      	mov	r0, r7
 8004b9a:	b003      	add	sp, #12
 8004b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	f204 6022 	addw	r0, r4, #1570	; 0x622
 8004ba6:	f7ff fd27 	bl	80045f8 <USBH_ParseDevDesc>
 8004baa:	e7f5      	b.n	8004b98 <USBH_Get_DevDesc+0x1e>

08004bac <USBH_Get_CfgDesc>:
{
 8004bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460e      	mov	r6, r1
  pData = phost->device.CfgDesc_Raw;
 8004bb4:	f100 051c 	add.w	r5, r0, #28
  if((status = USBH_GetDescriptor(phost,
 8004bb8:	9100      	str	r1, [sp, #0]
 8004bba:	462b      	mov	r3, r5
 8004bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	f7ff ffbc 	bl	8004b3e <USBH_GetDescriptor>
 8004bc6:	4607      	mov	r7, r0
 8004bc8:	b110      	cbz	r0, 8004bd0 <USBH_Get_CfgDesc+0x24>
}
 8004bca:	4638      	mov	r0, r7
 8004bcc:	b003      	add	sp, #12
 8004bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f204 6034 	addw	r0, r4, #1588	; 0x634
 8004bd8:	f7ff ff1f 	bl	8004a1a <USBH_ParseCfgDesc>
 8004bdc:	e7f5      	b.n	8004bca <USBH_Get_CfgDesc+0x1e>

08004bde <USBH_Get_StringDesc>:
{
 8004bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be0:	b083      	sub	sp, #12
 8004be2:	4617      	mov	r7, r2
 8004be4:	461d      	mov	r5, r3
                                  phost->device.Data,
 8004be6:	f500 7407 	add.w	r4, r0, #540	; 0x21c
  if((status = USBH_GetDescriptor(phost,
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4623      	mov	r3, r4
 8004bee:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	f7ff ffa3 	bl	8004b3e <USBH_GetDescriptor>
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	b110      	cbz	r0, 8004c02 <USBH_Get_StringDesc+0x24>
}
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	b003      	add	sp, #12
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8004c02:	462a      	mov	r2, r5
 8004c04:	4639      	mov	r1, r7
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7ff fd47 	bl	800469a <USBH_ParseStringDesc>
 8004c0c:	e7f6      	b.n	8004bfc <USBH_Get_StringDesc+0x1e>

08004c0e <USBH_SetAddress>:
{
 8004c0e:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004c10:	7883      	ldrb	r3, [r0, #2]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d004      	beq.n	8004c20 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8004c16:	2200      	movs	r2, #0
 8004c18:	4611      	mov	r1, r2
 8004c1a:	f7ff ff5f 	bl	8004adc <USBH_CtlReq>
}
 8004c1e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004c20:	2300      	movs	r3, #0
 8004c22:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004c24:	2205      	movs	r2, #5
 8004c26:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004c28:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004c2a:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c2c:	82c3      	strh	r3, [r0, #22]
 8004c2e:	e7f2      	b.n	8004c16 <USBH_SetAddress+0x8>

08004c30 <USBH_SetCfg>:
{
 8004c30:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004c32:	7883      	ldrb	r3, [r0, #2]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d004      	beq.n	8004c42 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	f7ff ff4e 	bl	8004adc <USBH_CtlReq>
}
 8004c40:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004c42:	2300      	movs	r3, #0
 8004c44:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004c46:	2209      	movs	r2, #9
 8004c48:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004c4a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004c4c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c4e:	82c3      	strh	r3, [r0, #22]
 8004c50:	e7f2      	b.n	8004c38 <USBH_SetCfg+0x8>

08004c52 <USBH_SetFeature>:
{
 8004c52:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004c54:	7883      	ldrb	r3, [r0, #2]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d004      	beq.n	8004c64 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	f7ff ff3d 	bl	8004adc <USBH_CtlReq>
}
 8004c62:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004c64:	2300      	movs	r3, #0
 8004c66:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004c68:	2203      	movs	r2, #3
 8004c6a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004c6c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004c6e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c70:	82c3      	strh	r3, [r0, #22]
 8004c72:	e7f2      	b.n	8004c5a <USBH_SetFeature+0x8>

08004c74 <USBH_ClrFeature>:
{
 8004c74:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8004c76:	7883      	ldrb	r3, [r0, #2]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d004      	beq.n	8004c86 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4611      	mov	r1, r2
 8004c80:	f7ff ff2c 	bl	8004adc <USBH_CtlReq>
}
 8004c84:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004c86:	2302      	movs	r3, #2
 8004c88:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004c92:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c94:	82c3      	strh	r3, [r0, #22]
 8004c96:	e7f1      	b.n	8004c7c <USBH_ClrFeature+0x8>

08004c98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004c98:	b530      	push	{r4, r5, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	4615      	mov	r5, r2

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c9e:	2400      	movs	r4, #0
 8004ca0:	9403      	str	r4, [sp, #12]
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	9101      	str	r1, [sp, #4]
 8004ca8:	9400      	str	r4, [sp, #0]
 8004caa:	4623      	mov	r3, r4
 8004cac:	4622      	mov	r2, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	f002 fce9 	bl	8007686 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	b005      	add	sp, #20
 8004cb8:	bd30      	pop	{r4, r5, pc}

08004cba <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004cba:	b530      	push	{r4, r5, lr}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004cc6:	f890 561d 	ldrb.w	r5, [r0, #1565]	; 0x61d
 8004cca:	b105      	cbz	r5, 8004cce <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8004ccc:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	9202      	str	r2, [sp, #8]
 8004cd2:	9401      	str	r4, [sp, #4]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f002 fcd3 	bl	8007686 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	b005      	add	sp, #20
 8004ce4:	bd30      	pop	{r4, r5, pc}

08004ce6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004ce6:	b530      	push	{r4, r5, lr}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004cec:	2400      	movs	r4, #0
 8004cee:	9403      	str	r4, [sp, #12]
 8004cf0:	9202      	str	r2, [sp, #8]
 8004cf2:	9101      	str	r1, [sp, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	9200      	str	r2, [sp, #0]
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f002 fcc3 	bl	8007686 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004d00:	4620      	mov	r0, r4
 8004d02:	b005      	add	sp, #20
 8004d04:	bd30      	pop	{r4, r5, pc}

08004d06 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t length,
                                uint8_t pipe_num)
{
 8004d06:	b530      	push	{r4, r5, lr}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	9403      	str	r4, [sp, #12]
 8004d10:	9202      	str	r2, [sp, #8]
 8004d12:	9101      	str	r1, [sp, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	9200      	str	r2, [sp, #0]
 8004d18:	2303      	movs	r3, #3
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f002 fcb3 	bl	8007686 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
}
 8004d20:	4620      	mov	r0, r4
 8004d22:	b005      	add	sp, #20
 8004d24:	bd30      	pop	{r4, r5, pc}

08004d26 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b0a      	cmp	r3, #10
 8004d2a:	d80b      	bhi.n	8004d44 <USBH_GetFreePipe+0x1e>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004d2c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004d30:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004d34:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004d38:	d002      	beq.n	8004d40 <USBH_GetFreePipe+0x1a>
  for (idx = 0U ; idx < 11U ; idx++)
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e7f3      	b.n	8004d28 <USBH_GetFreePipe+0x2>
	{
	   return (uint16_t)idx;
 8004d40:	b298      	uxth	r0, r3
 8004d42:	4770      	bx	lr
	}
  }
  return 0xFFFFU;
 8004d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004d48:	4770      	bx	lr

08004d4a <USBH_OpenPipe>:
{
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost,
 8004d4e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004d52:	9402      	str	r4, [sp, #8]
 8004d54:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004d58:	9401      	str	r4, [sp, #4]
 8004d5a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004d5e:	9400      	str	r4, [sp, #0]
 8004d60:	f002 fc76 	bl	8007650 <USBH_LL_OpenPipe>
}
 8004d64:	2000      	movs	r0, #0
 8004d66:	b004      	add	sp, #16
 8004d68:	bd10      	pop	{r4, pc}

08004d6a <USBH_ClosePipe>:
{
 8004d6a:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8004d6c:	f002 fc83 	bl	8007676 <USBH_LL_ClosePipe>
}
 8004d70:	2000      	movs	r0, #0
 8004d72:	bd08      	pop	{r3, pc}

08004d74 <USBH_AllocPipe>:
{
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4605      	mov	r5, r0
 8004d78:	460c      	mov	r4, r1
  pipe =  USBH_GetFreePipe(phost);
 8004d7a:	f7ff ffd4 	bl	8004d26 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8004d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d82:	4298      	cmp	r0, r3
 8004d84:	d005      	beq.n	8004d92 <USBH_AllocPipe+0x1e>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004d86:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004d8a:	f500 73d0 	add.w	r3, r0, #416	; 0x1a0
 8004d8e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 8004d92:	b2c0      	uxtb	r0, r0
 8004d94:	bd38      	pop	{r3, r4, r5, pc}

08004d96 <USBH_FreePipe>:
   if(idx < 11U)
 8004d96:	290a      	cmp	r1, #10
 8004d98:	d807      	bhi.n	8004daa <USBH_FreePipe+0x14>
	 phost->Pipes[idx] &= 0x7FFFU;
 8004d9a:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 8004d9e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004da2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004da6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8004daa:	2000      	movs	r0, #0
 8004dac:	4770      	bx	lr
	...

08004db0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db4:	b99b      	cbnz	r3, 8004dde <osKernelInitialize+0x2e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dba:	b99b      	cbnz	r3, 8004de4 <osKernelInitialize+0x34>
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <osKernelInitialize+0x40>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d005      	beq.n	8004dd0 <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dc4:	b98b      	cbnz	r3, 8004dea <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <osKernelInitialize+0x40>)
 8004dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd0:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	d0f5      	beq.n	8004dc4 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8004dd8:	f06f 0005 	mvn.w	r0, #5
 8004ddc:	4770      	bx	lr
 8004dde:	f06f 0005 	mvn.w	r0, #5
 8004de2:	4770      	bx	lr
 8004de4:	f06f 0005 	mvn.w	r0, #5
 8004de8:	4770      	bx	lr
    } else {
      stat = osError;
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004dee:	4770      	bx	lr
 8004df0:	20001118 	.word	0x20001118

08004df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004df4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dfa:	b9b3      	cbnz	r3, 8004e2a <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004e00:	b9b3      	cbnz	r3, 8004e30 <osKernelStart+0x3c>
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <osKernelStart+0x48>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d008      	beq.n	8004e1c <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d113      	bne.n	8004e36 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8004e0e:	2202      	movs	r2, #2
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <osKernelStart+0x48>)
 8004e12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004e14:	f001 faa8 	bl	8006368 <vTaskStartScheduler>
      stat = osOK;
 8004e18:	2000      	movs	r0, #0
 8004e1a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e1c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	d0f2      	beq.n	8004e0a <osKernelStart+0x16>
    stat = osErrorISR;
 8004e24:	f06f 0005 	mvn.w	r0, #5
 8004e28:	bd08      	pop	{r3, pc}
 8004e2a:	f06f 0005 	mvn.w	r0, #5
 8004e2e:	bd08      	pop	{r3, pc}
 8004e30:	f06f 0005 	mvn.w	r0, #5
 8004e34:	bd08      	pop	{r3, pc}
    } else {
      stat = osError;
 8004e36:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004e3a:	bd08      	pop	{r3, pc}
 8004e3c:	20001118 	.word	0x20001118

08004e40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e42:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e44:	2400      	movs	r4, #0
 8004e46:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e48:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004e4c:	bb54      	cbnz	r4, 8004ea4 <osThreadNew+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	bb3b      	cbnz	r3, 8004ea4 <osThreadNew+0x64>
 8004e54:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <osThreadNew+0xe8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d026      	beq.n	8004eaa <osThreadNew+0x6a>
 8004e5c:	b310      	cbz	r0, 8004ea4 <osThreadNew+0x64>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d032      	beq.n	8004ece <osThreadNew+0x8e>
      if (attr->name != NULL) {
 8004e68:	6816      	ldr	r6, [r2, #0]
 8004e6a:	b31e      	cbz	r6, 8004eb4 <osThreadNew+0x74>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004e6c:	6994      	ldr	r4, [r2, #24]
 8004e6e:	b904      	cbnz	r4, 8004e72 <osThreadNew+0x32>
    prio  = (UBaseType_t)osPriorityNormal;
 8004e70:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e72:	1e63      	subs	r3, r4, #1
 8004e74:	2b37      	cmp	r3, #55	; 0x37
 8004e76:	d852      	bhi.n	8004f1e <osThreadNew+0xde>
 8004e78:	6853      	ldr	r3, [r2, #4]
 8004e7a:	f013 0f01 	tst.w	r3, #1
 8004e7e:	d150      	bne.n	8004f22 <osThreadNew+0xe2>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004e80:	6953      	ldr	r3, [r2, #20]
 8004e82:	b1d3      	cbz	r3, 8004eba <osThreadNew+0x7a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e84:	ea4f 0e93 	mov.w	lr, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e88:	6895      	ldr	r5, [r2, #8]
 8004e8a:	b12d      	cbz	r5, 8004e98 <osThreadNew+0x58>
 8004e8c:	68d7      	ldr	r7, [r2, #12]
 8004e8e:	2f63      	cmp	r7, #99	; 0x63
 8004e90:	d902      	bls.n	8004e98 <osThreadNew+0x58>
 8004e92:	6917      	ldr	r7, [r2, #16]
 8004e94:	b107      	cbz	r7, 8004e98 <osThreadNew+0x58>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e96:	bb0b      	cbnz	r3, 8004edc <osThreadNew+0x9c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e98:	b195      	cbz	r5, 8004ec0 <osThreadNew+0x80>
    mem   = -1;
 8004e9a:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8004e9e:	2d01      	cmp	r5, #1
 8004ea0:	d023      	beq.n	8004eea <osThreadNew+0xaa>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8004ea2:	b375      	cbz	r5, 8004f02 <osThreadNew+0xc2>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ea4:	9804      	ldr	r0, [sp, #16]
}
 8004ea6:	b007      	add	sp, #28
 8004ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eaa:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f8      	bne.n	8004ea4 <osThreadNew+0x64>
 8004eb2:	e7d3      	b.n	8004e5c <osThreadNew+0x1c>
    name  = &empty;
 8004eb4:	f10d 0617 	add.w	r6, sp, #23
 8004eb8:	e7d8      	b.n	8004e6c <osThreadNew+0x2c>
    stack = configMINIMAL_STACK_SIZE;
 8004eba:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8004ebe:	e7e3      	b.n	8004e88 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ec0:	68d3      	ldr	r3, [r2, #12]
 8004ec2:	b96b      	cbnz	r3, 8004ee0 <osThreadNew+0xa0>
 8004ec4:	6913      	ldr	r3, [r2, #16]
 8004ec6:	b173      	cbz	r3, 8004ee6 <osThreadNew+0xa6>
    mem   = -1;
 8004ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ecc:	e7e7      	b.n	8004e9e <osThreadNew+0x5e>
      mem = 0;
 8004ece:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8004ed0:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 8004ed2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    name  = &empty;
 8004ed6:	f10d 0617 	add.w	r6, sp, #23
 8004eda:	e7e0      	b.n	8004e9e <osThreadNew+0x5e>
        mem = 1;
 8004edc:	2501      	movs	r5, #1
 8004ede:	e7de      	b.n	8004e9e <osThreadNew+0x5e>
    mem   = -1;
 8004ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ee4:	e7db      	b.n	8004e9e <osThreadNew+0x5e>
          mem = 0;
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	e7d9      	b.n	8004e9e <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004eea:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004eec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004eee:	9202      	str	r2, [sp, #8]
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	9400      	str	r4, [sp, #0]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4672      	mov	r2, lr
 8004ef8:	4631      	mov	r1, r6
 8004efa:	f001 f9c9 	bl	8006290 <xTaskCreateStatic>
 8004efe:	9004      	str	r0, [sp, #16]
 8004f00:	e7d0      	b.n	8004ea4 <osThreadNew+0x64>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f02:	aa04      	add	r2, sp, #16
 8004f04:	9201      	str	r2, [sp, #4]
 8004f06:	9400      	str	r4, [sp, #0]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	fa1f f28e 	uxth.w	r2, lr
 8004f0e:	4631      	mov	r1, r6
 8004f10:	f001 f9f7 	bl	8006302 <xTaskCreate>
 8004f14:	2801      	cmp	r0, #1
 8004f16:	d0c5      	beq.n	8004ea4 <osThreadNew+0x64>
          hTask = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	e7c2      	b.n	8004ea4 <osThreadNew+0x64>
        return (NULL);
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e7c1      	b.n	8004ea6 <osThreadNew+0x66>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e7bf      	b.n	8004ea6 <osThreadNew+0x66>
 8004f26:	bf00      	nop
 8004f28:	20001118 	.word	0x20001118

08004f2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f2c:	b530      	push	{r4, r5, lr}
 8004f2e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f30:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d153      	bne.n	8004fe0 <osMessageQueueNew+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f38:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d151      	bne.n	8004fe4 <osMessageQueueNew+0xb8>
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <osMessageQueueNew+0xc4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d021      	beq.n	8004f8c <osMessageQueueNew+0x60>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d04d      	beq.n	8004fe8 <osMessageQueueNew+0xbc>
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d04d      	beq.n	8004fec <osMessageQueueNew+0xc0>
    mem = -1;

    if (attr != NULL) {
 8004f50:	b372      	cbz	r2, 8004fb0 <osMessageQueueNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f52:	6893      	ldr	r3, [r2, #8]
 8004f54:	b14b      	cbz	r3, 8004f6a <osMessageQueueNew+0x3e>
 8004f56:	68d4      	ldr	r4, [r2, #12]
 8004f58:	2c4f      	cmp	r4, #79	; 0x4f
 8004f5a:	d906      	bls.n	8004f6a <osMessageQueueNew+0x3e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f5c:	6914      	ldr	r4, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f5e:	b124      	cbz	r4, 8004f6a <osMessageQueueNew+0x3e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f60:	6955      	ldr	r5, [r2, #20]
 8004f62:	fb01 f400 	mul.w	r4, r1, r0
 8004f66:	42a5      	cmp	r5, r4
 8004f68:	d224      	bcs.n	8004fb4 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f6a:	b1ab      	cbz	r3, 8004f98 <osMessageQueueNew+0x6c>
    mem = -1;
 8004f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f70:	4614      	mov	r4, r2
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d025      	beq.n	8004fc2 <osMessageQueueNew+0x96>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8004f76:	b363      	cbz	r3, 8004fd2 <osMessageQueueNew+0xa6>
  hQueue = NULL;
 8004f78:	2500      	movs	r5, #0
        hQueue = xQueueCreate (msg_count, msg_size);
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f7a:	b125      	cbz	r5, 8004f86 <osMessageQueueNew+0x5a>
      if (attr != NULL) {
 8004f7c:	b374      	cbz	r4, 8004fdc <osMessageQueueNew+0xb0>
        name = attr->name;
 8004f7e:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 ffc3 	bl	8005f0c <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004f86:	4628      	mov	r0, r5
 8004f88:	b003      	add	sp, #12
 8004f8a:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f8c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0d9      	beq.n	8004f48 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8004f94:	2500      	movs	r5, #0
 8004f96:	e7f6      	b.n	8004f86 <osMessageQueueNew+0x5a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f98:	68d3      	ldr	r3, [r2, #12]
 8004f9a:	b96b      	cbnz	r3, 8004fb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f9c:	6913      	ldr	r3, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f9e:	b113      	cbz	r3, 8004fa6 <osMessageQueueNew+0x7a>
    mem = -1;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	e7e4      	b.n	8004f70 <osMessageQueueNew+0x44>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fa6:	6953      	ldr	r3, [r2, #20]
 8004fa8:	b14b      	cbz	r3, 8004fbe <osMessageQueueNew+0x92>
    mem = -1;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	e7df      	b.n	8004f70 <osMessageQueueNew+0x44>
      mem = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e7dd      	b.n	8004f70 <osMessageQueueNew+0x44>
        mem = 1;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e7db      	b.n	8004f70 <osMessageQueueNew+0x44>
    mem = -1;
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbc:	e7d8      	b.n	8004f70 <osMessageQueueNew+0x44>
          mem = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e7d6      	b.n	8004f70 <osMessageQueueNew+0x44>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6893      	ldr	r3, [r2, #8]
 8004fc8:	6912      	ldr	r2, [r2, #16]
 8004fca:	f000 fcea 	bl	80059a2 <xQueueGenericCreateStatic>
 8004fce:	4605      	mov	r5, r0
 8004fd0:	e7d3      	b.n	8004f7a <osMessageQueueNew+0x4e>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f000 fd35 	bl	8005a42 <xQueueGenericCreate>
 8004fd8:	4605      	mov	r5, r0
 8004fda:	e7ce      	b.n	8004f7a <osMessageQueueNew+0x4e>
        name = NULL;
 8004fdc:	2100      	movs	r1, #0
 8004fde:	e7cf      	b.n	8004f80 <osMessageQueueNew+0x54>
  hQueue = NULL;
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	e7d0      	b.n	8004f86 <osMessageQueueNew+0x5a>
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	e7ce      	b.n	8004f86 <osMessageQueueNew+0x5a>
 8004fe8:	2500      	movs	r5, #0
 8004fea:	e7cc      	b.n	8004f86 <osMessageQueueNew+0x5a>
 8004fec:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8004fee:	e7ca      	b.n	8004f86 <osMessageQueueNew+0x5a>
 8004ff0:	20001118 	.word	0x20001118

08004ff4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffa:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004ffe:	b9b3      	cbnz	r3, 800502e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005000:	f3ef 8310 	mrs	r3, PRIMASK
 8005004:	b99b      	cbnz	r3, 800502e <osMessageQueuePut+0x3a>
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <osMessageQueuePut+0x9c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d00b      	beq.n	8005026 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800500e:	b3a0      	cbz	r0, 800507a <osMessageQueuePut+0x86>
 8005010:	b3b1      	cbz	r1, 8005080 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005012:	2300      	movs	r3, #0
 8005014:	4622      	mov	r2, r4
 8005016:	f000 fd3b 	bl	8005a90 <xQueueGenericSend>
 800501a:	2801      	cmp	r0, #1
 800501c:	d033      	beq.n	8005086 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 800501e:	b3a4      	cbz	r4, 800508a <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8005020:	f06f 0001 	mvn.w	r0, #1
 8005024:	e019      	b.n	800505a <osMessageQueuePut+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005026:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ef      	beq.n	800500e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800502e:	b1b0      	cbz	r0, 800505e <osMessageQueuePut+0x6a>
 8005030:	b1c1      	cbz	r1, 8005064 <osMessageQueuePut+0x70>
 8005032:	b9d4      	cbnz	r4, 800506a <osMessageQueuePut+0x76>
      yield = pdFALSE;
 8005034:	2300      	movs	r3, #0
 8005036:	aa02      	add	r2, sp, #8
 8005038:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800503c:	f000 fdec 	bl	8005c18 <xQueueGenericSendFromISR>
 8005040:	2801      	cmp	r0, #1
 8005042:	d115      	bne.n	8005070 <osMessageQueuePut+0x7c>
        portYIELD_FROM_ISR (yield);
 8005044:	9b01      	ldr	r3, [sp, #4]
 8005046:	b1b3      	cbz	r3, 8005076 <osMessageQueuePut+0x82>
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <osMessageQueuePut+0xa0>)
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005058:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800505a:	b002      	add	sp, #8
 800505c:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 800505e:	f06f 0003 	mvn.w	r0, #3
 8005062:	e7fa      	b.n	800505a <osMessageQueuePut+0x66>
 8005064:	f06f 0003 	mvn.w	r0, #3
 8005068:	e7f7      	b.n	800505a <osMessageQueuePut+0x66>
 800506a:	f06f 0003 	mvn.w	r0, #3
 800506e:	e7f4      	b.n	800505a <osMessageQueuePut+0x66>
        stat = osErrorResource;
 8005070:	f06f 0002 	mvn.w	r0, #2
 8005074:	e7f1      	b.n	800505a <osMessageQueuePut+0x66>
  stat = osOK;
 8005076:	2000      	movs	r0, #0
 8005078:	e7ef      	b.n	800505a <osMessageQueuePut+0x66>
      stat = osErrorParameter;
 800507a:	f06f 0003 	mvn.w	r0, #3
 800507e:	e7ec      	b.n	800505a <osMessageQueuePut+0x66>
 8005080:	f06f 0003 	mvn.w	r0, #3
 8005084:	e7e9      	b.n	800505a <osMessageQueuePut+0x66>
  stat = osOK;
 8005086:	2000      	movs	r0, #0
 8005088:	e7e7      	b.n	800505a <osMessageQueuePut+0x66>
          stat = osErrorResource;
 800508a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800508e:	e7e4      	b.n	800505a <osMessageQueuePut+0x66>
 8005090:	20001118 	.word	0x20001118
 8005094:	e000ed04 	.word	0xe000ed04

08005098 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005098:	b510      	push	{r4, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80050a2:	b9ab      	cbnz	r3, 80050d0 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	b993      	cbnz	r3, 80050d0 <osMessageQueueGet+0x38>
 80050aa:	4b22      	ldr	r3, [pc, #136]	; (8005134 <osMessageQueueGet+0x9c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d00a      	beq.n	80050c8 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050b2:	b398      	cbz	r0, 800511c <osMessageQueueGet+0x84>
 80050b4:	b3a9      	cbz	r1, 8005122 <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80050b6:	4622      	mov	r2, r4
 80050b8:	f000 fe1e 	bl	8005cf8 <xQueueReceive>
 80050bc:	2801      	cmp	r0, #1
 80050be:	d033      	beq.n	8005128 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 80050c0:	b3a4      	cbz	r4, 800512c <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 80050c2:	f06f 0001 	mvn.w	r0, #1
 80050c6:	e019      	b.n	80050fc <osMessageQueueGet+0x64>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050c8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050d0:	b1b0      	cbz	r0, 8005100 <osMessageQueueGet+0x68>
 80050d2:	b1c1      	cbz	r1, 8005106 <osMessageQueueGet+0x6e>
 80050d4:	b9d4      	cbnz	r4, 800510c <osMessageQueueGet+0x74>
      yield = pdFALSE;
 80050d6:	aa02      	add	r2, sp, #8
 80050d8:	2300      	movs	r3, #0
 80050da:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80050de:	f000 feb9 	bl	8005e54 <xQueueReceiveFromISR>
 80050e2:	2801      	cmp	r0, #1
 80050e4:	d115      	bne.n	8005112 <osMessageQueueGet+0x7a>
        portYIELD_FROM_ISR (yield);
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	b1b3      	cbz	r3, 8005118 <osMessageQueueGet+0x80>
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <osMessageQueueGet+0xa0>)
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80050fa:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80050fc:	b002      	add	sp, #8
 80050fe:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005100:	f06f 0003 	mvn.w	r0, #3
 8005104:	e7fa      	b.n	80050fc <osMessageQueueGet+0x64>
 8005106:	f06f 0003 	mvn.w	r0, #3
 800510a:	e7f7      	b.n	80050fc <osMessageQueueGet+0x64>
 800510c:	f06f 0003 	mvn.w	r0, #3
 8005110:	e7f4      	b.n	80050fc <osMessageQueueGet+0x64>
        stat = osErrorResource;
 8005112:	f06f 0002 	mvn.w	r0, #2
 8005116:	e7f1      	b.n	80050fc <osMessageQueueGet+0x64>
  stat = osOK;
 8005118:	2000      	movs	r0, #0
 800511a:	e7ef      	b.n	80050fc <osMessageQueueGet+0x64>
      stat = osErrorParameter;
 800511c:	f06f 0003 	mvn.w	r0, #3
 8005120:	e7ec      	b.n	80050fc <osMessageQueueGet+0x64>
 8005122:	f06f 0003 	mvn.w	r0, #3
 8005126:	e7e9      	b.n	80050fc <osMessageQueueGet+0x64>
  stat = osOK;
 8005128:	2000      	movs	r0, #0
 800512a:	e7e7      	b.n	80050fc <osMessageQueueGet+0x64>
          stat = osErrorResource;
 800512c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005130:	e7e4      	b.n	80050fc <osMessageQueueGet+0x64>
 8005132:	bf00      	nop
 8005134:	20001118 	.word	0x20001118
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <vApplicationGetIdleTaskMemory+0x10>)
 800513e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <vApplicationGetIdleTaskMemory+0x14>)
 8005142:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4770      	bx	lr
 800514c:	200010b4 	.word	0x200010b4
 8005150:	200000b4 	.word	0x200000b4

08005154 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <vApplicationGetTimerTaskMemory+0x10>)
 8005156:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <vApplicationGetTimerTaskMemory+0x14>)
 800515a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800515c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4770      	bx	lr
 8005164:	2000311c 	.word	0x2000311c
 8005168:	2000111c 	.word	0x2000111c

0800516c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516c:	f100 0308 	add.w	r3, r0, #8
 8005170:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005172:	f04f 32ff 	mov.w	r2, #4294967295
 8005176:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005178:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800517a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	6003      	str	r3, [r0, #0]
 8005180:	4770      	bx	lr

08005182 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	6103      	str	r3, [r0, #16]
 8005186:	4770      	bx	lr

08005188 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005188:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800518a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005194:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005196:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005198:	6803      	ldr	r3, [r0, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	6003      	str	r3, [r0, #0]
 800519e:	4770      	bx	lr

080051a0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051a0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051a8:	d002      	beq.n	80051b0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051aa:	f100 0208 	add.w	r2, r0, #8
 80051ae:	e002      	b.n	80051b6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80051b0:	6902      	ldr	r2, [r0, #16]
 80051b2:	e004      	b.n	80051be <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b4:	461a      	mov	r2, r3
 80051b6:	6853      	ldr	r3, [r2, #4]
 80051b8:	681c      	ldr	r4, [r3, #0]
 80051ba:	42a5      	cmp	r5, r4
 80051bc:	d2fa      	bcs.n	80051b4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051be:	6853      	ldr	r3, [r2, #4]
 80051c0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80051c6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051c8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80051ca:	6803      	ldr	r3, [r0, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	6003      	str	r3, [r0, #0]
}
 80051d0:	bc30      	pop	{r4, r5}
 80051d2:	4770      	bx	lr

080051d4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051d4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051d6:	6842      	ldr	r2, [r0, #4]
 80051d8:	6881      	ldr	r1, [r0, #8]
 80051da:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051dc:	6882      	ldr	r2, [r0, #8]
 80051de:	6841      	ldr	r1, [r0, #4]
 80051e0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4290      	cmp	r0, r2
 80051e6:	d006      	beq.n	80051f6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051e8:	2200      	movs	r2, #0
 80051ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	3a01      	subs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051f2:	6818      	ldr	r0, [r3, #0]
}
 80051f4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051f6:	6882      	ldr	r2, [r0, #8]
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e7f5      	b.n	80051e8 <uxListRemove+0x14>

080051fc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051fc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <prvTaskExitError+0x3c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d008      	beq.n	800521e <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	e7fe      	b.n	800521c <prvTaskExitError+0x20>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0fc      	beq.n	800522e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005234:	b002      	add	sp, #8
 8005236:	4770      	bx	lr
 8005238:	20000028 	.word	0x20000028

0800523c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800523c:	4808      	ldr	r0, [pc, #32]	; (8005260 <prvPortStartFirstTask+0x24>)
 800523e:	6800      	ldr	r0, [r0, #0]
 8005240:	6800      	ldr	r0, [r0, #0]
 8005242:	f380 8808 	msr	MSP, r0
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f380 8814 	msr	CONTROL, r0
 800524e:	b662      	cpsie	i
 8005250:	b661      	cpsie	f
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	df00      	svc	0
 800525c:	bf00      	nop
 800525e:	0000      	.short	0x0000
 8005260:	e000ed08 	.word	0xe000ed08

08005264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005274 <vPortEnableVFP+0x10>
 8005268:	6801      	ldr	r1, [r0, #0]
 800526a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800526e:	6001      	str	r1, [r0, #0]
 8005270:	4770      	bx	lr
 8005272:	0000      	.short	0x0000
 8005274:	e000ed88 	.word	0xe000ed88

08005278 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800527c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005280:	f021 0101 	bic.w	r1, r1, #1
 8005284:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <pxPortInitialiseStack+0x28>)
 800528a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800528e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005292:	f06f 0302 	mvn.w	r3, #2
 8005296:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800529a:	3844      	subs	r0, #68	; 0x44
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	080051fd 	.word	0x080051fd
	...

080052b0 <SVC_Handler>:
	__asm volatile (
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <pxCurrentTCBConst2>)
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	f380 8809 	msr	PSP, r0
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	4770      	bx	lr
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst2>:
 80052d0:	20006da0 	.word	0x20006da0

080052d4 <vPortEnterCritical>:
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <vPortEnterCritical+0x3c>)
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10d      	bne.n	800530c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <vPortEnterCritical+0x40>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052f8:	d008      	beq.n	800530c <vPortEnterCritical+0x38>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	e7fe      	b.n	800530a <vPortEnterCritical+0x36>
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000028 	.word	0x20000028
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <vPortExitCritical+0x28>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b943      	cbnz	r3, 8005330 <vPortExitCritical+0x18>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	e7fe      	b.n	800532e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005330:	3b01      	subs	r3, #1
 8005332:	4a03      	ldr	r2, [pc, #12]	; (8005340 <vPortExitCritical+0x28>)
 8005334:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005336:	b90b      	cbnz	r3, 800533c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000028 	.word	0x20000028
	...

08005350 <PendSV_Handler>:
	__asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f01e 0f10 	tst.w	lr, #16
 8005360:	bf08      	it	eq
 8005362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	6010      	str	r0, [r2, #0]
 800536c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005374:	f380 8811 	msr	BASEPRI, r0
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f001 f986 	bl	8006690 <vTaskSwitchContext>
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f380 8811 	msr	BASEPRI, r0
 800538c:	bc09      	pop	{r0, r3}
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005396:	f01e 0f10 	tst.w	lr, #16
 800539a:	bf08      	it	eq
 800539c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053a0:	f380 8809 	msr	PSP, r0
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst>:
 80053b0:	20006da0 	.word	0x20006da0

080053b4 <SysTick_Handler>:
{
 80053b4:	b508      	push	{r3, lr}
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80053c6:	f001 f82d 	bl	8006424 <xTaskIncrementTick>
 80053ca:	b118      	cbz	r0, 80053d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d0:	4b02      	ldr	r3, [pc, #8]	; (80053dc <SysTick_Handler+0x28>)
 80053d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80053d4:	2300      	movs	r3, #0
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	bd08      	pop	{r3, pc}
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053e0:	4a08      	ldr	r2, [pc, #32]	; (8005404 <vPortSetupTimerInterrupt+0x24>)
 80053e2:	2300      	movs	r3, #0
 80053e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053e6:	4908      	ldr	r1, [pc, #32]	; (8005408 <vPortSetupTimerInterrupt+0x28>)
 80053e8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <vPortSetupTimerInterrupt+0x2c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <vPortSetupTimerInterrupt+0x30>)
 80053f0:	fba1 1303 	umull	r1, r3, r1, r3
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	3b01      	subs	r3, #1
 80053f8:	4906      	ldr	r1, [pc, #24]	; (8005414 <vPortSetupTimerInterrupt+0x34>)
 80053fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053fc:	2307      	movs	r3, #7
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	e000e010 	.word	0xe000e010
 8005408:	e000e018 	.word	0xe000e018
 800540c:	2000002c 	.word	0x2000002c
 8005410:	10624dd3 	.word	0x10624dd3
 8005414:	e000e014 	.word	0xe000e014

08005418 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005418:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <xPortStartScheduler+0xec>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <xPortStartScheduler+0xf0>)
 800541e:	429a      	cmp	r2, r3
 8005420:	d108      	bne.n	8005434 <xPortStartScheduler+0x1c>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	e7fe      	b.n	8005432 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005434:	4b33      	ldr	r3, [pc, #204]	; (8005504 <xPortStartScheduler+0xec>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b34      	ldr	r3, [pc, #208]	; (800550c <xPortStartScheduler+0xf4>)
 800543a:	429a      	cmp	r2, r3
 800543c:	d108      	bne.n	8005450 <xPortStartScheduler+0x38>
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	e7fe      	b.n	800544e <xPortStartScheduler+0x36>
{
 8005450:	b510      	push	{r4, lr}
 8005452:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005454:	4b2e      	ldr	r3, [pc, #184]	; (8005510 <xPortStartScheduler+0xf8>)
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005468:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800546c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005470:	4a28      	ldr	r2, [pc, #160]	; (8005514 <xPortStartScheduler+0xfc>)
 8005472:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005474:	2207      	movs	r2, #7
 8005476:	4b28      	ldr	r3, [pc, #160]	; (8005518 <xPortStartScheduler+0x100>)
 8005478:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547a:	e009      	b.n	8005490 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800547c:	4a26      	ldr	r2, [pc, #152]	; (8005518 <xPortStartScheduler+0x100>)
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005484:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005490:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005494:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005498:	d1f0      	bne.n	800547c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800549a:	4b1f      	ldr	r3, [pc, #124]	; (8005518 <xPortStartScheduler+0x100>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d008      	beq.n	80054b4 <xPortStartScheduler+0x9c>
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	e7fe      	b.n	80054b2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054b4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ba:	4a17      	ldr	r2, [pc, #92]	; (8005518 <xPortStartScheduler+0x100>)
 80054bc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	4a13      	ldr	r2, [pc, #76]	; (8005510 <xPortStartScheduler+0xf8>)
 80054c4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <xPortStartScheduler+0x104>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80054ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80054d6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80054d8:	f7ff ff82 	bl	80053e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80054dc:	2400      	movs	r4, #0
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <xPortStartScheduler+0x108>)
 80054e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80054e2:	f7ff febf 	bl	8005264 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054e6:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <xPortStartScheduler+0x10c>)
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80054f0:	f7ff fea4 	bl	800523c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80054f4:	f001 f8cc 	bl	8006690 <vTaskSwitchContext>
	prvTaskExitError();
 80054f8:	f7ff fe80 	bl	80051fc <prvTaskExitError>
}
 80054fc:	4620      	mov	r0, r4
 80054fe:	b002      	add	sp, #8
 8005500:	bd10      	pop	{r4, pc}
 8005502:	bf00      	nop
 8005504:	e000ed00 	.word	0xe000ed00
 8005508:	410fc271 	.word	0x410fc271
 800550c:	410fc270 	.word	0x410fc270
 8005510:	e000e400 	.word	0xe000e400
 8005514:	20003180 	.word	0x20003180
 8005518:	20003184 	.word	0x20003184
 800551c:	e000ed20 	.word	0xe000ed20
 8005520:	20000028 	.word	0x20000028
 8005524:	e000ef34 	.word	0xe000ef34

08005528 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005528:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d90f      	bls.n	8005550 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005530:	4a10      	ldr	r2, [pc, #64]	; (8005574 <vPortValidateInterruptPriority+0x4c>)
 8005532:	5c9b      	ldrb	r3, [r3, r2]
 8005534:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005536:	4a10      	ldr	r2, [pc, #64]	; (8005578 <vPortValidateInterruptPriority+0x50>)
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	4293      	cmp	r3, r2
 800553c:	d208      	bcs.n	8005550 <vPortValidateInterruptPriority+0x28>
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	e7fe      	b.n	800554e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <vPortValidateInterruptPriority+0x54>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <vPortValidateInterruptPriority+0x58>)
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	4293      	cmp	r3, r2
 800555e:	d908      	bls.n	8005572 <vPortValidateInterruptPriority+0x4a>
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	e7fe      	b.n	8005570 <vPortValidateInterruptPriority+0x48>
 8005572:	4770      	bx	lr
 8005574:	e000e3f0 	.word	0xe000e3f0
 8005578:	20003180 	.word	0x20003180
 800557c:	e000ed0c 	.word	0xe000ed0c
 8005580:	20003184 	.word	0x20003184

08005584 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005584:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005586:	f012 0f07 	tst.w	r2, #7
 800558a:	d01e      	beq.n	80055ca <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800558e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005592:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8005596:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005598:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800559a:	480e      	ldr	r0, [pc, #56]	; (80055d4 <prvHeapInit+0x50>)
 800559c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800559e:	2100      	movs	r1, #0
 80055a0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055a2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80055a4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055a6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80055aa:	480b      	ldr	r0, [pc, #44]	; (80055d8 <prvHeapInit+0x54>)
 80055ac:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80055ae:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055b0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055b2:	1a99      	subs	r1, r3, r2
 80055b4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <prvHeapInit+0x58>)
 80055ba:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055bc:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <prvHeapInit+0x5c>)
 80055be:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <prvHeapInit+0x60>)
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055ce:	e7e4      	b.n	800559a <prvHeapInit+0x16>
 80055d0:	2000318c 	.word	0x2000318c
 80055d4:	20006d98 	.word	0x20006d98
 80055d8:	20003188 	.word	0x20003188
 80055dc:	20006d94 	.word	0x20006d94
 80055e0:	20006d90 	.word	0x20006d90
 80055e4:	20006d8c 	.word	0x20006d8c

080055e8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055e8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <prvInsertBlockIntoFreeList+0x50>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4282      	cmp	r2, r0
 80055f0:	d31b      	bcc.n	800562a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	185c      	adds	r4, r3, r1
 80055f6:	42a0      	cmp	r0, r4
 80055f8:	d103      	bne.n	8005602 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055fa:	6840      	ldr	r0, [r0, #4]
 80055fc:	4401      	add	r1, r0
 80055fe:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005600:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005602:	6841      	ldr	r1, [r0, #4]
 8005604:	1844      	adds	r4, r0, r1
 8005606:	42a2      	cmp	r2, r4
 8005608:	d113      	bne.n	8005632 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800560a:	4c0c      	ldr	r4, [pc, #48]	; (800563c <prvInsertBlockIntoFreeList+0x54>)
 800560c:	6824      	ldr	r4, [r4, #0]
 800560e:	42a2      	cmp	r2, r4
 8005610:	d00d      	beq.n	800562e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005612:	6852      	ldr	r2, [r2, #4]
 8005614:	4411      	add	r1, r2
 8005616:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800561e:	4298      	cmp	r0, r3
 8005620:	d000      	beq.n	8005624 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005622:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005628:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800562a:	4613      	mov	r3, r2
 800562c:	e7de      	b.n	80055ec <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800562e:	6004      	str	r4, [r0, #0]
 8005630:	e7f5      	b.n	800561e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005632:	6002      	str	r2, [r0, #0]
 8005634:	e7f3      	b.n	800561e <prvInsertBlockIntoFreeList+0x36>
 8005636:	bf00      	nop
 8005638:	20006d98 	.word	0x20006d98
 800563c:	20003188 	.word	0x20003188

08005640 <pvPortMalloc>:
{
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005644:	f000 fee0 	bl	8006408 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005648:	4b3c      	ldr	r3, [pc, #240]	; (800573c <pvPortMalloc+0xfc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b1bb      	cbz	r3, 800567e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800564e:	4b3c      	ldr	r3, [pc, #240]	; (8005740 <pvPortMalloc+0x100>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	421c      	tst	r4, r3
 8005654:	d164      	bne.n	8005720 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
 8005656:	b1ac      	cbz	r4, 8005684 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8005658:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800565a:	f014 0f07 	tst.w	r4, #7
 800565e:	d011      	beq.n	8005684 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005660:	f024 0407 	bic.w	r4, r4, #7
 8005664:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005666:	f004 0307 	and.w	r3, r4, #7
 800566a:	b15b      	cbz	r3, 8005684 <pvPortMalloc+0x44>
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	e7fe      	b.n	800567c <pvPortMalloc+0x3c>
			prvHeapInit();
 800567e:	f7ff ff81 	bl	8005584 <prvHeapInit>
 8005682:	e7e4      	b.n	800564e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005684:	2c00      	cmp	r4, #0
 8005686:	d04d      	beq.n	8005724 <pvPortMalloc+0xe4>
 8005688:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <pvPortMalloc+0x104>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429c      	cmp	r4, r3
 800568e:	d84b      	bhi.n	8005728 <pvPortMalloc+0xe8>
				pxBlock = xStart.pxNextFreeBlock;
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <pvPortMalloc+0x108>)
 8005692:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005694:	e001      	b.n	800569a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8005696:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005698:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800569a:	686a      	ldr	r2, [r5, #4]
 800569c:	4294      	cmp	r4, r2
 800569e:	d902      	bls.n	80056a6 <pvPortMalloc+0x66>
 80056a0:	682a      	ldr	r2, [r5, #0]
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d1f7      	bne.n	8005696 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80056a6:	4a25      	ldr	r2, [pc, #148]	; (800573c <pvPortMalloc+0xfc>)
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	4295      	cmp	r5, r2
 80056ac:	d03e      	beq.n	800572c <pvPortMalloc+0xec>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056ae:	681e      	ldr	r6, [r3, #0]
 80056b0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056b2:	682a      	ldr	r2, [r5, #0]
 80056b4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056b6:	686b      	ldr	r3, [r5, #4]
 80056b8:	1b1b      	subs	r3, r3, r4
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d910      	bls.n	80056e0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056be:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c0:	f010 0f07 	tst.w	r0, #7
 80056c4:	d008      	beq.n	80056d8 <pvPortMalloc+0x98>
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	e7fe      	b.n	80056d6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056d8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056da:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056dc:	f7ff ff84 	bl	80055e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056e0:	686a      	ldr	r2, [r5, #4]
 80056e2:	4918      	ldr	r1, [pc, #96]	; (8005744 <pvPortMalloc+0x104>)
 80056e4:	680b      	ldr	r3, [r1, #0]
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ea:	4918      	ldr	r1, [pc, #96]	; (800574c <pvPortMalloc+0x10c>)
 80056ec:	6809      	ldr	r1, [r1, #0]
 80056ee:	428b      	cmp	r3, r1
 80056f0:	d201      	bcs.n	80056f6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056f2:	4916      	ldr	r1, [pc, #88]	; (800574c <pvPortMalloc+0x10c>)
 80056f4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <pvPortMalloc+0x100>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005702:	f000 ff1f 	bl	8006544 <xTaskResumeAll>
		if( pvReturn == NULL )
 8005706:	b19e      	cbz	r6, 8005730 <pvPortMalloc+0xf0>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005708:	f016 0f07 	tst.w	r6, #7
 800570c:	d013      	beq.n	8005736 <pvPortMalloc+0xf6>
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	e7fe      	b.n	800571e <pvPortMalloc+0xde>
void *pvReturn = NULL;
 8005720:	2600      	movs	r6, #0
 8005722:	e7ee      	b.n	8005702 <pvPortMalloc+0xc2>
 8005724:	2600      	movs	r6, #0
 8005726:	e7ec      	b.n	8005702 <pvPortMalloc+0xc2>
 8005728:	2600      	movs	r6, #0
 800572a:	e7ea      	b.n	8005702 <pvPortMalloc+0xc2>
 800572c:	2600      	movs	r6, #0
 800572e:	e7e8      	b.n	8005702 <pvPortMalloc+0xc2>
			vApplicationMallocFailedHook();
 8005730:	f001 fb7c 	bl	8006e2c <vApplicationMallocFailedHook>
 8005734:	e7e8      	b.n	8005708 <pvPortMalloc+0xc8>
}
 8005736:	4630      	mov	r0, r6
 8005738:	bd70      	pop	{r4, r5, r6, pc}
 800573a:	bf00      	nop
 800573c:	20003188 	.word	0x20003188
 8005740:	20006d8c 	.word	0x20006d8c
 8005744:	20006d90 	.word	0x20006d90
 8005748:	20006d98 	.word	0x20006d98
 800574c:	20006d94 	.word	0x20006d94

08005750 <vPortFree>:
	if( pv != NULL )
 8005750:	b380      	cbz	r0, 80057b4 <vPortFree+0x64>
{
 8005752:	b538      	push	{r3, r4, r5, lr}
 8005754:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8005756:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800575a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800575e:	4916      	ldr	r1, [pc, #88]	; (80057b8 <vPortFree+0x68>)
 8005760:	6809      	ldr	r1, [r1, #0]
 8005762:	420a      	tst	r2, r1
 8005764:	d108      	bne.n	8005778 <vPortFree+0x28>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	e7fe      	b.n	8005776 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005778:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800577c:	b140      	cbz	r0, 8005790 <vPortFree+0x40>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	e7fe      	b.n	800578e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005790:	ea22 0201 	bic.w	r2, r2, r1
 8005794:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8005798:	f000 fe36 	bl	8006408 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800579c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80057a0:	4a06      	ldr	r2, [pc, #24]	; (80057bc <vPortFree+0x6c>)
 80057a2:	6813      	ldr	r3, [r2, #0]
 80057a4:	440b      	add	r3, r1
 80057a6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057a8:	4628      	mov	r0, r5
 80057aa:	f7ff ff1d 	bl	80055e8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80057ae:	f000 fec9 	bl	8006544 <xTaskResumeAll>
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20006d8c 	.word	0x20006d8c
 80057bc:	20006d90 	.word	0x20006d90

080057c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057c0:	b510      	push	{r4, lr}
 80057c2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057c4:	f7ff fd86 	bl	80052d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d004      	beq.n	80057da <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80057d0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80057d2:	f7ff fda1 	bl	8005318 <vPortExitCritical>

	return xReturn;
}
 80057d6:	4620      	mov	r0, r4
 80057d8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80057da:	2401      	movs	r4, #1
 80057dc:	e7f9      	b.n	80057d2 <prvIsQueueFull+0x12>

080057de <prvIsQueueEmpty>:
{
 80057de:	b510      	push	{r4, lr}
 80057e0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80057e2:	f7ff fd77 	bl	80052d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057e8:	b123      	cbz	r3, 80057f4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80057ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80057ec:	f7ff fd94 	bl	8005318 <vPortExitCritical>
}
 80057f0:	4620      	mov	r0, r4
 80057f2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80057f4:	2401      	movs	r4, #1
 80057f6:	e7f9      	b.n	80057ec <prvIsQueueEmpty+0xe>

080057f8 <prvCopyDataToQueue>:
{
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4604      	mov	r4, r0
 80057fc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005800:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005802:	b94a      	cbnz	r2, 8005818 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005804:	6803      	ldr	r3, [r0, #0]
 8005806:	bb53      	cbnz	r3, 800585e <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005808:	6840      	ldr	r0, [r0, #4]
 800580a:	f001 f89b 	bl	8006944 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005812:	3501      	adds	r5, #1
 8005814:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005816:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005818:	b96e      	cbnz	r6, 8005836 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800581a:	6880      	ldr	r0, [r0, #8]
 800581c:	f001 ffb0 	bl	8007780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005820:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005822:	68a3      	ldr	r3, [r4, #8]
 8005824:	4413      	add	r3, r2
 8005826:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005828:	6862      	ldr	r2, [r4, #4]
 800582a:	4293      	cmp	r3, r2
 800582c:	d319      	bcc.n	8005862 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005832:	2000      	movs	r0, #0
 8005834:	e7ed      	b.n	8005812 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005836:	68c0      	ldr	r0, [r0, #12]
 8005838:	f001 ffa2 	bl	8007780 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800583c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800583e:	425b      	negs	r3, r3
 8005840:	68e2      	ldr	r2, [r4, #12]
 8005842:	441a      	add	r2, r3
 8005844:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005846:	6821      	ldr	r1, [r4, #0]
 8005848:	428a      	cmp	r2, r1
 800584a:	d202      	bcs.n	8005852 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800584c:	6862      	ldr	r2, [r4, #4]
 800584e:	4413      	add	r3, r2
 8005850:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005852:	2e02      	cmp	r6, #2
 8005854:	d107      	bne.n	8005866 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005856:	b145      	cbz	r5, 800586a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005858:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800585a:	2000      	movs	r0, #0
 800585c:	e7d9      	b.n	8005812 <prvCopyDataToQueue+0x1a>
 800585e:	2000      	movs	r0, #0
 8005860:	e7d7      	b.n	8005812 <prvCopyDataToQueue+0x1a>
 8005862:	2000      	movs	r0, #0
 8005864:	e7d5      	b.n	8005812 <prvCopyDataToQueue+0x1a>
 8005866:	2000      	movs	r0, #0
 8005868:	e7d3      	b.n	8005812 <prvCopyDataToQueue+0x1a>
 800586a:	2000      	movs	r0, #0
 800586c:	e7d1      	b.n	8005812 <prvCopyDataToQueue+0x1a>

0800586e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800586e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005870:	b172      	cbz	r2, 8005890 <prvCopyDataFromQueue+0x22>
{
 8005872:	b510      	push	{r4, lr}
 8005874:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005876:	68c4      	ldr	r4, [r0, #12]
 8005878:	4414      	add	r4, r2
 800587a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800587c:	6840      	ldr	r0, [r0, #4]
 800587e:	4284      	cmp	r4, r0
 8005880:	d301      	bcc.n	8005886 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	60d8      	str	r0, [r3, #12]
 8005886:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005888:	68d9      	ldr	r1, [r3, #12]
 800588a:	f001 ff79 	bl	8007780 <memcpy>
 800588e:	bd10      	pop	{r4, pc}
 8005890:	4770      	bx	lr

08005892 <prvUnlockQueue>:
{
 8005892:	b538      	push	{r3, r4, r5, lr}
 8005894:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005896:	f7ff fd1d 	bl	80052d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800589a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800589e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a0:	e001      	b.n	80058a6 <prvUnlockQueue+0x14>
			--cTxLock;
 80058a2:	3c01      	subs	r4, #1
 80058a4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a6:	2c00      	cmp	r4, #0
 80058a8:	dd0a      	ble.n	80058c0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058ac:	b143      	cbz	r3, 80058c0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80058b2:	f000 ff9f 	bl	80067f4 <xTaskRemoveFromEventList>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d0f3      	beq.n	80058a2 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80058ba:	f001 f82d 	bl	8006918 <vTaskMissedYield>
 80058be:	e7f0      	b.n	80058a2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80058c0:	23ff      	movs	r3, #255	; 0xff
 80058c2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80058c6:	f7ff fd27 	bl	8005318 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058ca:	f7ff fd03 	bl	80052d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80058ce:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80058d2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058d4:	e001      	b.n	80058da <prvUnlockQueue+0x48>
				--cRxLock;
 80058d6:	3c01      	subs	r4, #1
 80058d8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058da:	2c00      	cmp	r4, #0
 80058dc:	dd0a      	ble.n	80058f4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058de:	692b      	ldr	r3, [r5, #16]
 80058e0:	b143      	cbz	r3, 80058f4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e2:	f105 0010 	add.w	r0, r5, #16
 80058e6:	f000 ff85 	bl	80067f4 <xTaskRemoveFromEventList>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d0f3      	beq.n	80058d6 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80058ee:	f001 f813 	bl	8006918 <vTaskMissedYield>
 80058f2:	e7f0      	b.n	80058d6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80058f4:	23ff      	movs	r3, #255	; 0xff
 80058f6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80058fa:	f7ff fd0d 	bl	8005318 <vPortExitCritical>
 80058fe:	bd38      	pop	{r3, r4, r5, pc}

08005900 <xQueueGenericReset>:
{
 8005900:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005902:	b330      	cbz	r0, 8005952 <xQueueGenericReset+0x52>
 8005904:	4604      	mov	r4, r0
 8005906:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8005908:	f7ff fce4 	bl	80052d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800590c:	6821      	ldr	r1, [r4, #0]
 800590e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005912:	fb03 1002 	mla	r0, r3, r2, r1
 8005916:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005918:	2000      	movs	r0, #0
 800591a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800591c:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800591e:	3a01      	subs	r2, #1
 8005920:	fb02 1303 	mla	r3, r2, r3, r1
 8005924:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005926:	23ff      	movs	r3, #255	; 0xff
 8005928:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800592c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005930:	b9c5      	cbnz	r5, 8005964 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	b1f3      	cbz	r3, 8005974 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005936:	f104 0010 	add.w	r0, r4, #16
 800593a:	f000 ff5b 	bl	80067f4 <xTaskRemoveFromEventList>
 800593e:	b1c8      	cbz	r0, 8005974 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 8005940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005944:	4b0d      	ldr	r3, [pc, #52]	; (800597c <xQueueGenericReset+0x7c>)
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	e010      	b.n	8005974 <xQueueGenericReset+0x74>
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	e7fe      	b.n	8005962 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005964:	f104 0010 	add.w	r0, r4, #16
 8005968:	f7ff fc00 	bl	800516c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800596c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005970:	f7ff fbfc 	bl	800516c <vListInitialise>
	taskEXIT_CRITICAL();
 8005974:	f7ff fcd0 	bl	8005318 <vPortExitCritical>
}
 8005978:	2001      	movs	r0, #1
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <prvInitialiseNewQueue>:
{
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	461d      	mov	r5, r3
 8005984:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005986:	460b      	mov	r3, r1
 8005988:	b149      	cbz	r1, 800599e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800598a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800598c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800598e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005990:	2101      	movs	r1, #1
 8005992:	4620      	mov	r0, r4
 8005994:	f7ff ffb4 	bl	8005900 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005998:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800599c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800599e:	6024      	str	r4, [r4, #0]
 80059a0:	e7f4      	b.n	800598c <prvInitialiseNewQueue+0xc>

080059a2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059a2:	b940      	cbnz	r0, 80059b6 <xQueueGenericCreateStatic+0x14>
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	e7fe      	b.n	80059b4 <xQueueGenericCreateStatic+0x12>
	{
 80059b6:	b510      	push	{r4, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80059bc:	b163      	cbz	r3, 80059d8 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059be:	b1a2      	cbz	r2, 80059ea <xQueueGenericCreateStatic+0x48>
 80059c0:	b1a9      	cbz	r1, 80059ee <xQueueGenericCreateStatic+0x4c>
 80059c2:	2001      	movs	r0, #1
 80059c4:	b9a8      	cbnz	r0, 80059f2 <xQueueGenericCreateStatic+0x50>
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	e7fe      	b.n	80059d6 <xQueueGenericCreateStatic+0x34>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericCreateStatic+0x46>
 80059ea:	2001      	movs	r0, #1
 80059ec:	e7ea      	b.n	80059c4 <xQueueGenericCreateStatic+0x22>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e7e8      	b.n	80059c4 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059f2:	b90a      	cbnz	r2, 80059f8 <xQueueGenericCreateStatic+0x56>
 80059f4:	b101      	cbz	r1, 80059f8 <xQueueGenericCreateStatic+0x56>
 80059f6:	2000      	movs	r0, #0
 80059f8:	b940      	cbnz	r0, 8005a0c <xQueueGenericCreateStatic+0x6a>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	e7fe      	b.n	8005a0a <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a0c:	2050      	movs	r0, #80	; 0x50
 8005a0e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a10:	9803      	ldr	r0, [sp, #12]
 8005a12:	2850      	cmp	r0, #80	; 0x50
 8005a14:	d008      	beq.n	8005a28 <xQueueGenericCreateStatic+0x86>
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	e7fe      	b.n	8005a26 <xQueueGenericCreateStatic+0x84>
 8005a28:	4620      	mov	r0, r4
 8005a2a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a32:	9400      	str	r4, [sp, #0]
 8005a34:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005a38:	f7ff ffa2 	bl	8005980 <prvInitialiseNewQueue>
	}
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	b004      	add	sp, #16
 8005a40:	bd10      	pop	{r4, pc}

08005a42 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a42:	b940      	cbnz	r0, 8005a56 <xQueueGenericCreate+0x14>
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	e7fe      	b.n	8005a54 <xQueueGenericCreate+0x12>
	{
 8005a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a5c:	b111      	cbz	r1, 8005a64 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5e:	fb01 f000 	mul.w	r0, r1, r0
 8005a62:	e000      	b.n	8005a66 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8005a64:	2000      	movs	r0, #0
 8005a66:	4617      	mov	r7, r2
 8005a68:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005a6a:	3050      	adds	r0, #80	; 0x50
 8005a6c:	f7ff fde8 	bl	8005640 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005a70:	4605      	mov	r5, r0
 8005a72:	b150      	cbz	r0, 8005a8a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a7a:	9000      	str	r0, [sp, #0]
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005a82:	4621      	mov	r1, r4
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff ff7b 	bl	8005980 <prvInitialiseNewQueue>
	}
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	b003      	add	sp, #12
 8005a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a90 <xQueueGenericSend>:
{
 8005a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a92:	b085      	sub	sp, #20
 8005a94:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005a96:	b160      	cbz	r0, 8005ab2 <xQueueGenericSend+0x22>
 8005a98:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9a:	b199      	cbz	r1, 8005ac4 <xQueueGenericSend+0x34>
 8005a9c:	2501      	movs	r5, #1
 8005a9e:	b9bd      	cbnz	r5, 8005ad0 <xQueueGenericSend+0x40>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericSend+0x20>
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	e7fe      	b.n	8005ac2 <xQueueGenericSend+0x32>
 8005ac4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005ac6:	b90a      	cbnz	r2, 8005acc <xQueueGenericSend+0x3c>
 8005ac8:	2501      	movs	r5, #1
 8005aca:	e7e8      	b.n	8005a9e <xQueueGenericSend+0xe>
 8005acc:	2500      	movs	r5, #0
 8005ace:	e7e6      	b.n	8005a9e <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d009      	beq.n	8005ae8 <xQueueGenericSend+0x58>
 8005ad4:	b96d      	cbnz	r5, 8005af2 <xQueueGenericSend+0x62>
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	e7fe      	b.n	8005ae6 <xQueueGenericSend+0x56>
 8005ae8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	d0f2      	beq.n	8005ad4 <xQueueGenericSend+0x44>
 8005aee:	2500      	movs	r5, #0
 8005af0:	e7f0      	b.n	8005ad4 <xQueueGenericSend+0x44>
 8005af2:	461e      	mov	r6, r3
 8005af4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005af6:	f000 ff15 	bl	8006924 <xTaskGetSchedulerState>
 8005afa:	b910      	cbnz	r0, 8005b02 <xQueueGenericSend+0x72>
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	b103      	cbz	r3, 8005b02 <xQueueGenericSend+0x72>
 8005b00:	2500      	movs	r5, #0
 8005b02:	b945      	cbnz	r5, 8005b16 <xQueueGenericSend+0x86>
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	e7fe      	b.n	8005b14 <xQueueGenericSend+0x84>
 8005b16:	2500      	movs	r5, #0
 8005b18:	e02c      	b.n	8005b74 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff fe6a 	bl	80057f8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b26:	b18b      	cbz	r3, 8005b4c <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b2c:	f000 fe62 	bl	80067f4 <xTaskRemoveFromEventList>
 8005b30:	b138      	cbz	r0, 8005b42 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <xQueueGenericSend+0x184>)
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005b42:	f7ff fbe9 	bl	8005318 <vPortExitCritical>
				return pdPASS;
 8005b46:	2001      	movs	r0, #1
}
 8005b48:	b005      	add	sp, #20
 8005b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d0f8      	beq.n	8005b42 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8005b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b54:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <xQueueGenericSend+0x184>)
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	e7ef      	b.n	8005b42 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8005b62:	f7ff fbd9 	bl	8005318 <vPortExitCritical>
					return errQUEUE_FULL;
 8005b66:	2000      	movs	r0, #0
 8005b68:	e7ee      	b.n	8005b48 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff fe91 	bl	8005892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b70:	f000 fce8 	bl	8006544 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005b74:	f7ff fbae 	bl	80052d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d3cc      	bcc.n	8005b1a <xQueueGenericSend+0x8a>
 8005b80:	2e02      	cmp	r6, #2
 8005b82:	d0ca      	beq.n	8005b1a <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0eb      	beq.n	8005b62 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 8005b8a:	b91d      	cbnz	r5, 8005b94 <xQueueGenericSend+0x104>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b8c:	a802      	add	r0, sp, #8
 8005b8e:	f000 fe77 	bl	8006880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b92:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8005b94:	f7ff fbc0 	bl	8005318 <vPortExitCritical>
		vTaskSuspendAll();
 8005b98:	f000 fc36 	bl	8006408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b9c:	f7ff fb9a 	bl	80052d4 <vPortEnterCritical>
 8005ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d102      	bne.n	8005bb2 <xQueueGenericSend+0x122>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005bb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d102      	bne.n	8005bc4 <xQueueGenericSend+0x134>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bc4:	f7ff fba8 	bl	8005318 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc8:	a901      	add	r1, sp, #4
 8005bca:	a802      	add	r0, sp, #8
 8005bcc:	f000 fe64 	bl	8006898 <xTaskCheckForTimeOut>
 8005bd0:	b9c8      	cbnz	r0, 8005c06 <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fdf4 	bl	80057c0 <prvIsQueueFull>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d0c6      	beq.n	8005b6a <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bdc:	9901      	ldr	r1, [sp, #4]
 8005bde:	f104 0010 	add.w	r0, r4, #16
 8005be2:	f000 fdd3 	bl	800678c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7ff fe53 	bl	8005892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bec:	f000 fcaa 	bl	8006544 <xTaskResumeAll>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1bf      	bne.n	8005b74 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8005bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <xQueueGenericSend+0x184>)
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	e7b6      	b.n	8005b74 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff fe43 	bl	8005892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0c:	f000 fc9a 	bl	8006544 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005c10:	2000      	movs	r0, #0
 8005c12:	e799      	b.n	8005b48 <xQueueGenericSend+0xb8>
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <xQueueGenericSendFromISR>:
{
 8005c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005c1c:	b160      	cbz	r0, 8005c38 <xQueueGenericSendFromISR+0x20>
 8005c1e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c20:	b199      	cbz	r1, 8005c4a <xQueueGenericSendFromISR+0x32>
 8005c22:	2001      	movs	r0, #1
 8005c24:	b9b8      	cbnz	r0, 8005c56 <xQueueGenericSendFromISR+0x3e>
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	e7fe      	b.n	8005c36 <xQueueGenericSendFromISR+0x1e>
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	e7fe      	b.n	8005c48 <xQueueGenericSendFromISR+0x30>
 8005c4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005c4c:	b908      	cbnz	r0, 8005c52 <xQueueGenericSendFromISR+0x3a>
 8005c4e:	2001      	movs	r0, #1
 8005c50:	e7e8      	b.n	8005c24 <xQueueGenericSendFromISR+0xc>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e7e6      	b.n	8005c24 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d009      	beq.n	8005c6e <xQueueGenericSendFromISR+0x56>
 8005c5a:	b968      	cbnz	r0, 8005c78 <xQueueGenericSendFromISR+0x60>
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	e7fe      	b.n	8005c6c <xQueueGenericSendFromISR+0x54>
 8005c6e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005c70:	2d01      	cmp	r5, #1
 8005c72:	d0f2      	beq.n	8005c5a <xQueueGenericSendFromISR+0x42>
 8005c74:	2000      	movs	r0, #0
 8005c76:	e7f0      	b.n	8005c5a <xQueueGenericSendFromISR+0x42>
 8005c78:	461f      	mov	r7, r3
 8005c7a:	4690      	mov	r8, r2
 8005c7c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c7e:	f7ff fc53 	bl	8005528 <vPortValidateInterruptPriority>
	__asm volatile
 8005c82:	f3ef 8611 	mrs	r6, BASEPRI
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d301      	bcc.n	8005ca2 <xQueueGenericSendFromISR+0x8a>
 8005c9e:	2f02      	cmp	r7, #2
 8005ca0:	d121      	bne.n	8005ce6 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ca2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005ca6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ca8:	463a      	mov	r2, r7
 8005caa:	4649      	mov	r1, r9
 8005cac:	4620      	mov	r0, r4
 8005cae:	f7ff fda3 	bl	80057f8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005cb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005cb6:	d110      	bne.n	8005cda <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cba:	b1b3      	cbz	r3, 8005cea <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005cc0:	f000 fd98 	bl	80067f4 <xTaskRemoveFromEventList>
 8005cc4:	b198      	cbz	r0, 8005cee <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 8005cc6:	f1b8 0f00 	cmp.w	r8, #0
 8005cca:	d012      	beq.n	8005cf2 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ccc:	2001      	movs	r0, #1
 8005cce:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8005cd2:	f386 8811 	msr	BASEPRI, r6
}
 8005cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cda:	1c6b      	adds	r3, r5, #1
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	e7f5      	b.n	8005cd2 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e7f3      	b.n	8005cd2 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7f1      	b.n	8005cd2 <xQueueGenericSendFromISR+0xba>
 8005cee:	2001      	movs	r0, #1
 8005cf0:	e7ef      	b.n	8005cd2 <xQueueGenericSendFromISR+0xba>
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7ed      	b.n	8005cd2 <xQueueGenericSendFromISR+0xba>
	...

08005cf8 <xQueueReceive>:
{
 8005cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005cfe:	b160      	cbz	r0, 8005d1a <xQueueReceive+0x22>
 8005d00:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d02:	b199      	cbz	r1, 8005d2c <xQueueReceive+0x34>
 8005d04:	2501      	movs	r5, #1
 8005d06:	b9bd      	cbnz	r5, 8005d38 <xQueueReceive+0x40>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	e7fe      	b.n	8005d18 <xQueueReceive+0x20>
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	e7fe      	b.n	8005d2a <xQueueReceive+0x32>
 8005d2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d2e:	b90b      	cbnz	r3, 8005d34 <xQueueReceive+0x3c>
 8005d30:	2501      	movs	r5, #1
 8005d32:	e7e8      	b.n	8005d06 <xQueueReceive+0xe>
 8005d34:	2500      	movs	r5, #0
 8005d36:	e7e6      	b.n	8005d06 <xQueueReceive+0xe>
 8005d38:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d3a:	f000 fdf3 	bl	8006924 <xTaskGetSchedulerState>
 8005d3e:	b910      	cbnz	r0, 8005d46 <xQueueReceive+0x4e>
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	b103      	cbz	r3, 8005d46 <xQueueReceive+0x4e>
 8005d44:	2500      	movs	r5, #0
 8005d46:	b945      	cbnz	r5, 8005d5a <xQueueReceive+0x62>
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	e7fe      	b.n	8005d58 <xQueueReceive+0x60>
 8005d5a:	2700      	movs	r7, #0
 8005d5c:	e02f      	b.n	8005dbe <xQueueReceive+0xc6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4620      	mov	r0, r4
 8005d62:	f7ff fd84 	bl	800586e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d66:	3d01      	subs	r5, #1
 8005d68:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	b163      	cbz	r3, 8005d88 <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d6e:	f104 0010 	add.w	r0, r4, #16
 8005d72:	f000 fd3f 	bl	80067f4 <xTaskRemoveFromEventList>
 8005d76:	b138      	cbz	r0, 8005d88 <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
 8005d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7c:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <xQueueReceive+0x158>)
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005d88:	f7ff fac6 	bl	8005318 <vPortExitCritical>
				return pdPASS;
 8005d8c:	2001      	movs	r0, #1
}
 8005d8e:	b005      	add	sp, #20
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8005d92:	f7ff fac1 	bl	8005318 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005d96:	2000      	movs	r0, #0
 8005d98:	e7f9      	b.n	8005d8e <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d9a:	a802      	add	r0, sp, #8
 8005d9c:	f000 fd70 	bl	8006880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005da0:	2701      	movs	r7, #1
 8005da2:	e016      	b.n	8005dd2 <xQueueReceive+0xda>
		prvLockQueue( pxQueue );
 8005da4:	2300      	movs	r3, #0
 8005da6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005daa:	e01e      	b.n	8005dea <xQueueReceive+0xf2>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db2:	e020      	b.n	8005df6 <xQueueReceive+0xfe>
				prvUnlockQueue( pxQueue );
 8005db4:	4620      	mov	r0, r4
 8005db6:	f7ff fd6c 	bl	8005892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dba:	f000 fbc3 	bl	8006544 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005dbe:	f7ff fa89 	bl	80052d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d1ca      	bne.n	8005d5e <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dc8:	9b01      	ldr	r3, [sp, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0e1      	beq.n	8005d92 <xQueueReceive+0x9a>
				else if( xEntryTimeSet == pdFALSE )
 8005dce:	2f00      	cmp	r7, #0
 8005dd0:	d0e3      	beq.n	8005d9a <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
 8005dd2:	f7ff faa1 	bl	8005318 <vPortExitCritical>
		vTaskSuspendAll();
 8005dd6:	f000 fb17 	bl	8006408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f7ff fa7b 	bl	80052d4 <vPortEnterCritical>
 8005dde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005de2:	b25b      	sxtb	r3, r3
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d0dc      	beq.n	8005da4 <xQueueReceive+0xac>
 8005dea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d0da      	beq.n	8005dac <xQueueReceive+0xb4>
 8005df6:	f7ff fa8f 	bl	8005318 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dfa:	a901      	add	r1, sp, #4
 8005dfc:	a802      	add	r0, sp, #8
 8005dfe:	f000 fd4b 	bl	8006898 <xTaskCheckForTimeOut>
 8005e02:	b9c8      	cbnz	r0, 8005e38 <xQueueReceive+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff fcea 	bl	80057de <prvIsQueueEmpty>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0d2      	beq.n	8005db4 <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e0e:	9901      	ldr	r1, [sp, #4]
 8005e10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e14:	f000 fcba 	bl	800678c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f7ff fd3a 	bl	8005892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e1e:	f000 fb91 	bl	8006544 <xTaskResumeAll>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d1cb      	bne.n	8005dbe <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <xQueueReceive+0x158>)
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	e7c2      	b.n	8005dbe <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff fd2a 	bl	8005892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3e:	f000 fb81 	bl	8006544 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7ff fccb 	bl	80057de <prvIsQueueEmpty>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d0b8      	beq.n	8005dbe <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e79e      	b.n	8005d8e <xQueueReceive+0x96>
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <xQueueReceiveFromISR>:
{
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005e58:	b160      	cbz	r0, 8005e74 <xQueueReceiveFromISR+0x20>
 8005e5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e5c:	b199      	cbz	r1, 8005e86 <xQueueReceiveFromISR+0x32>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	b9bb      	cbnz	r3, 8005e92 <xQueueReceiveFromISR+0x3e>
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	e7fe      	b.n	8005e72 <xQueueReceiveFromISR+0x1e>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	e7fe      	b.n	8005e84 <xQueueReceiveFromISR+0x30>
 8005e86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e88:	b90b      	cbnz	r3, 8005e8e <xQueueReceiveFromISR+0x3a>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e7e8      	b.n	8005e60 <xQueueReceiveFromISR+0xc>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e7e6      	b.n	8005e60 <xQueueReceiveFromISR+0xc>
 8005e92:	4617      	mov	r7, r2
 8005e94:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e96:	f7ff fb47 	bl	8005528 <vPortValidateInterruptPriority>
	__asm volatile
 8005e9a:	f3ef 8611 	mrs	r6, BASEPRI
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eae:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb2:	f1b8 0f00 	cmp.w	r8, #0
 8005eb6:	d020      	beq.n	8005efa <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005eb8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005ebc:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7ff fcd4 	bl	800586e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ec6:	f108 33ff 	add.w	r3, r8, #4294967295
 8005eca:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005ecc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005ed0:	d10d      	bne.n	8005eee <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	b19b      	cbz	r3, 8005efe <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed6:	f104 0010 	add.w	r0, r4, #16
 8005eda:	f000 fc8b 	bl	80067f4 <xTaskRemoveFromEventList>
 8005ede:	b180      	cbz	r0, 8005f02 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8005ee0:	b18f      	cbz	r7, 8005f06 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	6038      	str	r0, [r7, #0]
	__asm volatile
 8005ee6:	f386 8811 	msr	BASEPRI, r6
}
 8005eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005eee:	1c6b      	adds	r3, r5, #1
 8005ef0:	b25b      	sxtb	r3, r3
 8005ef2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	e7f5      	b.n	8005ee6 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8005efa:	2000      	movs	r0, #0
 8005efc:	e7f3      	b.n	8005ee6 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7f1      	b.n	8005ee6 <xQueueReceiveFromISR+0x92>
 8005f02:	2001      	movs	r0, #1
 8005f04:	e7ef      	b.n	8005ee6 <xQueueReceiveFromISR+0x92>
 8005f06:	2001      	movs	r0, #1
 8005f08:	e7ed      	b.n	8005ee6 <xQueueReceiveFromISR+0x92>
	...

08005f0c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b07      	cmp	r3, #7
 8005f10:	d80c      	bhi.n	8005f2c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f12:	4a07      	ldr	r2, [pc, #28]	; (8005f30 <vQueueAddToRegistry+0x24>)
 8005f14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005f18:	b10a      	cbz	r2, 8005f1e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	e7f7      	b.n	8005f0e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f1e:	4a04      	ldr	r2, [pc, #16]	; (8005f30 <vQueueAddToRegistry+0x24>)
 8005f20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f28:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f2a:	4770      	bx	lr
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20007408 	.word	0x20007408

08005f34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	4604      	mov	r4, r0
 8005f38:	460d      	mov	r5, r1
 8005f3a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f3c:	f7ff f9ca 	bl	80052d4 <vPortEnterCritical>
 8005f40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d00d      	beq.n	8005f68 <vQueueWaitForMessageRestricted+0x34>
 8005f4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d00b      	beq.n	8005f70 <vQueueWaitForMessageRestricted+0x3c>
 8005f58:	f7ff f9de 	bl	8005318 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f5e:	b15b      	cbz	r3, 8005f78 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff fc96 	bl	8005892 <prvUnlockQueue>
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005f6e:	e7ed      	b.n	8005f4c <vQueueWaitForMessageRestricted+0x18>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f76:	e7ef      	b.n	8005f58 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005f80:	f000 fc1c 	bl	80067bc <vTaskPlaceOnEventListRestricted>
 8005f84:	e7ec      	b.n	8005f60 <vQueueWaitForMessageRestricted+0x2c>
	...

08005f88 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <prvResetNextTaskUnblockTime+0x2c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	b94b      	cbnz	r3, 8005fa4 <prvResetNextTaskUnblockTime+0x1c>
 8005f90:	2301      	movs	r3, #1
 8005f92:	b94b      	cbnz	r3, 8005fa8 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <prvResetNextTaskUnblockTime+0x2c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <prvResetNextTaskUnblockTime+0x30>)
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e7f4      	b.n	8005f92 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <prvResetNextTaskUnblockTime+0x30>)
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20006da4 	.word	0x20006da4
 8005fb8:	20007254 	.word	0x20007254

08005fbc <prvInitialiseNewTask>:
{
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	4617      	mov	r7, r2
 8005fc6:	469a      	mov	sl, r3
 8005fc8:	9e08      	ldr	r6, [sp, #32]
 8005fca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005fce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fd0:	0092      	lsls	r2, r2, #2
 8005fd2:	21a5      	movs	r1, #165	; 0xa5
 8005fd4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005fd6:	f001 fbde 	bl	8007796 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fdc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005fe0:	3a01      	subs	r2, #1
 8005fe2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fe6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005fea:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d807      	bhi.n	8006002 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff2:	5ce9      	ldrb	r1, [r5, r3]
 8005ff4:	18e2      	adds	r2, r4, r3
 8005ff6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8005ffa:	5cea      	ldrb	r2, [r5, r3]
 8005ffc:	b10a      	cbz	r2, 8006002 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffe:	3301      	adds	r3, #1
 8006000:	e7f5      	b.n	8005fee <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006002:	2300      	movs	r3, #0
 8006004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006008:	2e37      	cmp	r6, #55	; 0x37
 800600a:	d900      	bls.n	800600e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800600c:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800600e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006010:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006012:	2500      	movs	r5, #0
 8006014:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006016:	1d20      	adds	r0, r4, #4
 8006018:	f7ff f8b3 	bl	8005182 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800601c:	f104 0018 	add.w	r0, r4, #24
 8006020:	f7ff f8af 	bl	8005182 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006024:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800602a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 800602e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8006030:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006032:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006036:	4652      	mov	r2, sl
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	f7ff f91c 	bl	8005278 <pxPortInitialiseStack>
 8006040:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006042:	f1b8 0f00 	cmp.w	r8, #0
 8006046:	d001      	beq.n	800604c <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006048:	f8c8 4000 	str.w	r4, [r8]
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006050 <prvInitialiseTaskLists>:
{
 8006050:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006052:	2400      	movs	r4, #0
 8006054:	e007      	b.n	8006066 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006056:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800605a:	0093      	lsls	r3, r2, #2
 800605c:	480e      	ldr	r0, [pc, #56]	; (8006098 <prvInitialiseTaskLists+0x48>)
 800605e:	4418      	add	r0, r3
 8006060:	f7ff f884 	bl	800516c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006064:	3401      	adds	r4, #1
 8006066:	2c37      	cmp	r4, #55	; 0x37
 8006068:	d9f5      	bls.n	8006056 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800606a:	4d0c      	ldr	r5, [pc, #48]	; (800609c <prvInitialiseTaskLists+0x4c>)
 800606c:	4628      	mov	r0, r5
 800606e:	f7ff f87d 	bl	800516c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006072:	4c0b      	ldr	r4, [pc, #44]	; (80060a0 <prvInitialiseTaskLists+0x50>)
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff f879 	bl	800516c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800607a:	480a      	ldr	r0, [pc, #40]	; (80060a4 <prvInitialiseTaskLists+0x54>)
 800607c:	f7ff f876 	bl	800516c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006080:	4809      	ldr	r0, [pc, #36]	; (80060a8 <prvInitialiseTaskLists+0x58>)
 8006082:	f7ff f873 	bl	800516c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006086:	4809      	ldr	r0, [pc, #36]	; (80060ac <prvInitialiseTaskLists+0x5c>)
 8006088:	f7ff f870 	bl	800516c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <prvInitialiseTaskLists+0x60>)
 800608e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <prvInitialiseTaskLists+0x64>)
 8006092:	601c      	str	r4, [r3, #0]
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	bf00      	nop
 8006098:	20006dac 	.word	0x20006dac
 800609c:	2000722c 	.word	0x2000722c
 80060a0:	20007240 	.word	0x20007240
 80060a4:	2000725c 	.word	0x2000725c
 80060a8:	20007288 	.word	0x20007288
 80060ac:	20007274 	.word	0x20007274
 80060b0:	20006da4 	.word	0x20006da4
 80060b4:	20006da8 	.word	0x20006da8

080060b8 <prvAddNewTaskToReadyList>:
{
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80060bc:	f7ff f90a 	bl	80052d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80060c0:	4a21      	ldr	r2, [pc, #132]	; (8006148 <prvAddNewTaskToReadyList+0x90>)
 80060c2:	6813      	ldr	r3, [r2, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <prvAddNewTaskToReadyList+0x94>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d032      	beq.n	8006136 <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
 80060d0:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <prvAddNewTaskToReadyList+0x98>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b93b      	cbnz	r3, 80060e6 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <prvAddNewTaskToReadyList+0x94>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d801      	bhi.n	80060e6 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 80060e2:	4b1a      	ldr	r3, [pc, #104]	; (800614c <prvAddNewTaskToReadyList+0x94>)
 80060e4:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80060e6:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <prvAddNewTaskToReadyList+0x9c>)
 80060e8:	6813      	ldr	r3, [r2, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060ee:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80060f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060f2:	4a19      	ldr	r2, [pc, #100]	; (8006158 <prvAddNewTaskToReadyList+0xa0>)
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <prvAddNewTaskToReadyList+0x46>
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <prvAddNewTaskToReadyList+0xa0>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006102:	009a      	lsls	r2, r3, #2
 8006104:	1d21      	adds	r1, r4, #4
 8006106:	4815      	ldr	r0, [pc, #84]	; (800615c <prvAddNewTaskToReadyList+0xa4>)
 8006108:	4410      	add	r0, r2
 800610a:	f7ff f83d 	bl	8005188 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800610e:	f7ff f903 	bl	8005318 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <prvAddNewTaskToReadyList+0x98>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b16b      	cbz	r3, 8006134 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <prvAddNewTaskToReadyList+0x94>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006120:	429a      	cmp	r2, r3
 8006122:	d207      	bcs.n	8006134 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
 8006124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <prvAddNewTaskToReadyList+0xa8>)
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <prvAddNewTaskToReadyList+0x94>)
 8006138:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d1d2      	bne.n	80060e6 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 8006140:	f7ff ff86 	bl	8006050 <prvInitialiseTaskLists>
 8006144:	e7cf      	b.n	80060e6 <prvAddNewTaskToReadyList+0x2e>
 8006146:	bf00      	nop
 8006148:	20007214 	.word	0x20007214
 800614c:	20006da0 	.word	0x20006da0
 8006150:	20007270 	.word	0x20007270
 8006154:	20007224 	.word	0x20007224
 8006158:	20007228 	.word	0x20007228
 800615c:	20006dac 	.word	0x20006dac
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <prvDeleteTCB>:
	{
 8006164:	b510      	push	{r4, lr}
 8006166:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006168:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800616c:	b163      	cbz	r3, 8006188 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800616e:	2b01      	cmp	r3, #1
 8006170:	d011      	beq.n	8006196 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006172:	2b02      	cmp	r3, #2
 8006174:	d012      	beq.n	800619c <prvDeleteTCB+0x38>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	e7fe      	b.n	8006186 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006188:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800618a:	f7ff fae1 	bl	8005750 <vPortFree>
				vPortFree( pxTCB );
 800618e:	4620      	mov	r0, r4
 8006190:	f7ff fade 	bl	8005750 <vPortFree>
 8006194:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006196:	f7ff fadb 	bl	8005750 <vPortFree>
 800619a:	bd10      	pop	{r4, pc}
 800619c:	bd10      	pop	{r4, pc}
	...

080061a0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <prvCheckTasksWaitingTermination+0x40>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b1d3      	cbz	r3, 80061dc <prvCheckTasksWaitingTermination+0x3c>
{
 80061a6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80061a8:	f7ff f894 	bl	80052d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <prvCheckTasksWaitingTermination+0x44>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b2:	1d20      	adds	r0, r4, #4
 80061b4:	f7ff f80e 	bl	80051d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061b8:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <prvCheckTasksWaitingTermination+0x48>)
 80061ba:	6813      	ldr	r3, [r2, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c0:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <prvCheckTasksWaitingTermination+0x40>)
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80061c8:	f7ff f8a6 	bl	8005318 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff ffc9 	bl	8006164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061d2:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <prvCheckTasksWaitingTermination+0x40>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <prvCheckTasksWaitingTermination+0x8>
}
 80061da:	bd10      	pop	{r4, pc}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20007218 	.word	0x20007218
 80061e4:	20007288 	.word	0x20007288
 80061e8:	20007214 	.word	0x20007214

080061ec <prvIdleTask>:
{
 80061ec:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80061ee:	f7ff ffd7 	bl	80061a0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <prvIdleTask+0x20>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d9f9      	bls.n	80061ee <prvIdleTask+0x2>
				taskYIELD();
 80061fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fe:	4b04      	ldr	r3, [pc, #16]	; (8006210 <prvIdleTask+0x24>)
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	e7f0      	b.n	80061ee <prvIdleTask+0x2>
 800620c:	20006dac 	.word	0x20006dac
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <prvAddCurrentTaskToDelayedList+0x64>)
 800621c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800621e:	4b17      	ldr	r3, [pc, #92]	; (800627c <prvAddCurrentTaskToDelayedList+0x68>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	3004      	adds	r0, #4
 8006224:	f7fe ffd6 	bl	80051d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006228:	f1b4 3fff 	cmp.w	r4, #4294967295
 800622c:	d013      	beq.n	8006256 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800622e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <prvAddCurrentTaskToDelayedList+0x68>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006236:	42a5      	cmp	r5, r4
 8006238:	d816      	bhi.n	8006268 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <prvAddCurrentTaskToDelayedList+0x6c>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <prvAddCurrentTaskToDelayedList+0x68>)
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	3104      	adds	r1, #4
 8006244:	f7fe ffac 	bl	80051a0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006248:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <prvAddCurrentTaskToDelayedList+0x70>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	429c      	cmp	r4, r3
 800624e:	d201      	bcs.n	8006254 <prvAddCurrentTaskToDelayedList+0x40>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <prvAddCurrentTaskToDelayedList+0x70>)
 8006252:	601c      	str	r4, [r3, #0]
 8006254:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006256:	2e00      	cmp	r6, #0
 8006258:	d0e9      	beq.n	800622e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <prvAddCurrentTaskToDelayedList+0x68>)
 800625c:	6819      	ldr	r1, [r3, #0]
 800625e:	3104      	adds	r1, #4
 8006260:	4809      	ldr	r0, [pc, #36]	; (8006288 <prvAddCurrentTaskToDelayedList+0x74>)
 8006262:	f7fe ff91 	bl	8005188 <vListInsertEnd>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <prvAddCurrentTaskToDelayedList+0x78>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <prvAddCurrentTaskToDelayedList+0x68>)
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	3104      	adds	r1, #4
 8006272:	f7fe ff95 	bl	80051a0 <vListInsert>
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	2000729c 	.word	0x2000729c
 800627c:	20006da0 	.word	0x20006da0
 8006280:	20006da4 	.word	0x20006da4
 8006284:	20007254 	.word	0x20007254
 8006288:	20007274 	.word	0x20007274
 800628c:	20006da8 	.word	0x20006da8

08006290 <xTaskCreateStatic>:
	{
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006296:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006298:	b175      	cbz	r5, 80062b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800629a:	b1b4      	cbz	r4, 80062ca <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800629c:	2664      	movs	r6, #100	; 0x64
 800629e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062a0:	9e04      	ldr	r6, [sp, #16]
 80062a2:	2e64      	cmp	r6, #100	; 0x64
 80062a4:	d01a      	beq.n	80062dc <xTaskCreateStatic+0x4c>
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	e7fe      	b.n	80062b6 <xTaskCreateStatic+0x26>
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	e7fe      	b.n	80062c8 <xTaskCreateStatic+0x38>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	e7fe      	b.n	80062da <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062dc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062de:	2502      	movs	r5, #2
 80062e0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062e4:	2500      	movs	r5, #0
 80062e6:	9503      	str	r5, [sp, #12]
 80062e8:	9402      	str	r4, [sp, #8]
 80062ea:	ad05      	add	r5, sp, #20
 80062ec:	9501      	str	r5, [sp, #4]
 80062ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80062f0:	9500      	str	r5, [sp, #0]
 80062f2:	f7ff fe63 	bl	8005fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062f6:	4620      	mov	r0, r4
 80062f8:	f7ff fede 	bl	80060b8 <prvAddNewTaskToReadyList>
	}
 80062fc:	9805      	ldr	r0, [sp, #20]
 80062fe:	b006      	add	sp, #24
 8006300:	bd70      	pop	{r4, r5, r6, pc}

08006302 <xTaskCreate>:
	{
 8006302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006306:	b085      	sub	sp, #20
 8006308:	4606      	mov	r6, r0
 800630a:	460f      	mov	r7, r1
 800630c:	4615      	mov	r5, r2
 800630e:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006310:	0090      	lsls	r0, r2, #2
 8006312:	f7ff f995 	bl	8005640 <pvPortMalloc>
			if( pxStack != NULL )
 8006316:	b310      	cbz	r0, 800635e <xTaskCreate+0x5c>
 8006318:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800631a:	2064      	movs	r0, #100	; 0x64
 800631c:	f7ff f990 	bl	8005640 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006320:	4604      	mov	r4, r0
 8006322:	b1c0      	cbz	r0, 8006356 <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 8006324:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006328:	b1dc      	cbz	r4, 8006362 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800632a:	2300      	movs	r3, #0
 800632c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	9402      	str	r4, [sp, #8]
 8006334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4643      	mov	r3, r8
 800633e:	462a      	mov	r2, r5
 8006340:	4639      	mov	r1, r7
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff fe3a 	bl	8005fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff feb5 	bl	80060b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800634e:	2001      	movs	r0, #1
	}
 8006350:	b005      	add	sp, #20
 8006352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006356:	4648      	mov	r0, r9
 8006358:	f7ff f9fa 	bl	8005750 <vPortFree>
 800635c:	e7e4      	b.n	8006328 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 800635e:	2400      	movs	r4, #0
 8006360:	e7e2      	b.n	8006328 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006362:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006366:	e7f3      	b.n	8006350 <xTaskCreate+0x4e>

08006368 <vTaskStartScheduler>:
{
 8006368:	b510      	push	{r4, lr}
 800636a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800636c:	2400      	movs	r4, #0
 800636e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006370:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006372:	aa07      	add	r2, sp, #28
 8006374:	a906      	add	r1, sp, #24
 8006376:	a805      	add	r0, sp, #20
 8006378:	f7fe fee0 	bl	800513c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800637c:	9b05      	ldr	r3, [sp, #20]
 800637e:	9302      	str	r3, [sp, #8]
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	9400      	str	r4, [sp, #0]
 8006386:	4623      	mov	r3, r4
 8006388:	9a07      	ldr	r2, [sp, #28]
 800638a:	491a      	ldr	r1, [pc, #104]	; (80063f4 <vTaskStartScheduler+0x8c>)
 800638c:	481a      	ldr	r0, [pc, #104]	; (80063f8 <vTaskStartScheduler+0x90>)
 800638e:	f7ff ff7f 	bl	8006290 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006392:	b148      	cbz	r0, 80063a8 <vTaskStartScheduler+0x40>
			xReturn = pdPASS;
 8006394:	2001      	movs	r0, #1
		if( xReturn == pdPASS )
 8006396:	2801      	cmp	r0, #1
 8006398:	d008      	beq.n	80063ac <vTaskStartScheduler+0x44>
	if( xReturn == pdPASS )
 800639a:	2801      	cmp	r0, #1
 800639c:	d009      	beq.n	80063b2 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800639e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063a2:	d01d      	beq.n	80063e0 <vTaskStartScheduler+0x78>
}
 80063a4:	b008      	add	sp, #32
 80063a6:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80063a8:	2000      	movs	r0, #0
 80063aa:	e7f4      	b.n	8006396 <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
 80063ac:	f000 fb7e 	bl	8006aac <xTimerCreateTimerTask>
 80063b0:	e7f3      	b.n	800639a <vTaskStartScheduler+0x32>
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <vTaskStartScheduler+0x94>)
 80063c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ca:	2201      	movs	r2, #1
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <vTaskStartScheduler+0x98>)
 80063ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063d0:	2200      	movs	r2, #0
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <vTaskStartScheduler+0x9c>)
 80063d4:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80063d6:	f000 fd15 	bl	8006e04 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80063da:	f7ff f81d 	bl	8005418 <xPortStartScheduler>
 80063de:	e7e1      	b.n	80063a4 <vTaskStartScheduler+0x3c>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	e7fe      	b.n	80063f0 <vTaskStartScheduler+0x88>
 80063f2:	bf00      	nop
 80063f4:	08008ed0 	.word	0x08008ed0
 80063f8:	080061ed 	.word	0x080061ed
 80063fc:	20007254 	.word	0x20007254
 8006400:	20007270 	.word	0x20007270
 8006404:	2000729c 	.word	0x2000729c

08006408 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006408:	4a02      	ldr	r2, [pc, #8]	; (8006414 <vTaskSuspendAll+0xc>)
 800640a:	6813      	ldr	r3, [r2, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20007220 	.word	0x20007220

08006418 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <xTaskGetTickCount+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	2000729c 	.word	0x2000729c

08006424 <xTaskIncrementTick>:
{
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006426:	4b3c      	ldr	r3, [pc, #240]	; (8006518 <xTaskIncrementTick+0xf4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d168      	bne.n	8006500 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800642e:	4b3b      	ldr	r3, [pc, #236]	; (800651c <xTaskIncrementTick+0xf8>)
 8006430:	681d      	ldr	r5, [r3, #0]
 8006432:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006434:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006436:	b9c5      	cbnz	r5, 800646a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006438:	4b39      	ldr	r3, [pc, #228]	; (8006520 <xTaskIncrementTick+0xfc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	b143      	cbz	r3, 8006452 <xTaskIncrementTick+0x2e>
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	e7fe      	b.n	8006450 <xTaskIncrementTick+0x2c>
 8006452:	4a33      	ldr	r2, [pc, #204]	; (8006520 <xTaskIncrementTick+0xfc>)
 8006454:	6811      	ldr	r1, [r2, #0]
 8006456:	4b33      	ldr	r3, [pc, #204]	; (8006524 <xTaskIncrementTick+0x100>)
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	4a32      	ldr	r2, [pc, #200]	; (8006528 <xTaskIncrementTick+0x104>)
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	f7ff fd8f 	bl	8005f88 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800646a:	4b30      	ldr	r3, [pc, #192]	; (800652c <xTaskIncrementTick+0x108>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429d      	cmp	r5, r3
 8006470:	d23a      	bcs.n	80064e8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8006472:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006474:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <xTaskIncrementTick+0x10c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800647e:	009a      	lsls	r2, r3, #2
 8006480:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <xTaskIncrementTick+0x110>)
 8006482:	589b      	ldr	r3, [r3, r2]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d940      	bls.n	800650a <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8006488:	2401      	movs	r4, #1
 800648a:	e03e      	b.n	800650a <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 800648c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <xTaskIncrementTick+0xfc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b353      	cbz	r3, 80064ec <xTaskIncrementTick+0xc8>
 8006496:	2300      	movs	r3, #0
 8006498:	bb53      	cbnz	r3, 80064f0 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800649a:	4b21      	ldr	r3, [pc, #132]	; (8006520 <xTaskIncrementTick+0xfc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064a2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80064a4:	429d      	cmp	r5, r3
 80064a6:	d328      	bcc.n	80064fa <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a8:	1d37      	adds	r7, r6, #4
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7fe fe92 	bl	80051d4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80064b2:	b11b      	cbz	r3, 80064bc <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b4:	f106 0018 	add.w	r0, r6, #24
 80064b8:	f7fe fe8c 	bl	80051d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064bc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80064be:	4a1e      	ldr	r2, [pc, #120]	; (8006538 <xTaskIncrementTick+0x114>)
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <xTaskIncrementTick+0xa6>
 80064c6:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <xTaskIncrementTick+0x114>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064ce:	009a      	lsls	r2, r3, #2
 80064d0:	4639      	mov	r1, r7
 80064d2:	4818      	ldr	r0, [pc, #96]	; (8006534 <xTaskIncrementTick+0x110>)
 80064d4:	4410      	add	r0, r2
 80064d6:	f7fe fe57 	bl	8005188 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064da:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80064dc:	4b14      	ldr	r3, [pc, #80]	; (8006530 <xTaskIncrementTick+0x10c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d2d2      	bcs.n	800648c <xTaskIncrementTick+0x68>
 80064e6:	e7d2      	b.n	800648e <xTaskIncrementTick+0x6a>
 80064e8:	2400      	movs	r4, #0
 80064ea:	e7d0      	b.n	800648e <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ec:	2301      	movs	r3, #1
 80064ee:	e7d3      	b.n	8006498 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f0:	f04f 32ff 	mov.w	r2, #4294967295
 80064f4:	4b0d      	ldr	r3, [pc, #52]	; (800652c <xTaskIncrementTick+0x108>)
 80064f6:	601a      	str	r2, [r3, #0]
					break;
 80064f8:	e7bc      	b.n	8006474 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80064fa:	4a0c      	ldr	r2, [pc, #48]	; (800652c <xTaskIncrementTick+0x108>)
 80064fc:	6013      	str	r3, [r2, #0]
						break;
 80064fe:	e7b9      	b.n	8006474 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8006500:	4a0e      	ldr	r2, [pc, #56]	; (800653c <xTaskIncrementTick+0x118>)
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006508:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800650a:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <xTaskIncrementTick+0x11c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	b103      	cbz	r3, 8006512 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8006510:	2401      	movs	r4, #1
}
 8006512:	4620      	mov	r0, r4
 8006514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006516:	bf00      	nop
 8006518:	20007220 	.word	0x20007220
 800651c:	2000729c 	.word	0x2000729c
 8006520:	20006da4 	.word	0x20006da4
 8006524:	20006da8 	.word	0x20006da8
 8006528:	20007258 	.word	0x20007258
 800652c:	20007254 	.word	0x20007254
 8006530:	20006da0 	.word	0x20006da0
 8006534:	20006dac 	.word	0x20006dac
 8006538:	20007228 	.word	0x20007228
 800653c:	2000721c 	.word	0x2000721c
 8006540:	200072a0 	.word	0x200072a0

08006544 <xTaskResumeAll>:
{
 8006544:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006546:	4b35      	ldr	r3, [pc, #212]	; (800661c <xTaskResumeAll+0xd8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	b943      	cbnz	r3, 800655e <xTaskResumeAll+0x1a>
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	e7fe      	b.n	800655c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800655e:	f7fe feb9 	bl	80052d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006562:	4b2e      	ldr	r3, [pc, #184]	; (800661c <xTaskResumeAll+0xd8>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	3a01      	subs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d150      	bne.n	8006612 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006570:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <xTaskResumeAll+0xdc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	b923      	cbnz	r3, 8006580 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006576:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006578:	f7fe fece 	bl	8005318 <vPortExitCritical>
}
 800657c:	4620      	mov	r0, r4
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006582:	4b28      	ldr	r3, [pc, #160]	; (8006624 <xTaskResumeAll+0xe0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	b31b      	cbz	r3, 80065d0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006588:	4b26      	ldr	r3, [pc, #152]	; (8006624 <xTaskResumeAll+0xe0>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658e:	f104 0018 	add.w	r0, r4, #24
 8006592:	f7fe fe1f 	bl	80051d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006596:	1d25      	adds	r5, r4, #4
 8006598:	4628      	mov	r0, r5
 800659a:	f7fe fe1b 	bl	80051d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800659e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065a0:	4a21      	ldr	r2, [pc, #132]	; (8006628 <xTaskResumeAll+0xe4>)
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <xTaskResumeAll+0x68>
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <xTaskResumeAll+0xe4>)
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065b0:	009a      	lsls	r2, r3, #2
 80065b2:	4629      	mov	r1, r5
 80065b4:	481d      	ldr	r0, [pc, #116]	; (800662c <xTaskResumeAll+0xe8>)
 80065b6:	4410      	add	r0, r2
 80065b8:	f7fe fde6 	bl	8005188 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065be:	4b1c      	ldr	r3, [pc, #112]	; (8006630 <xTaskResumeAll+0xec>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d3dc      	bcc.n	8006582 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80065c8:	2201      	movs	r2, #1
 80065ca:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <xTaskResumeAll+0xf0>)
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e7d8      	b.n	8006582 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80065d0:	b10c      	cbz	r4, 80065d6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80065d2:	f7ff fcd9 	bl	8005f88 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <xTaskResumeAll+0xf4>)
 80065d8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065da:	b974      	cbnz	r4, 80065fa <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <xTaskResumeAll+0xf0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	b1cb      	cbz	r3, 8006616 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <xTaskResumeAll+0xf8>)
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80065f2:	2401      	movs	r4, #1
 80065f4:	e7c0      	b.n	8006578 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065f6:	3c01      	subs	r4, #1
 80065f8:	d007      	beq.n	800660a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80065fa:	f7ff ff13 	bl	8006424 <xTaskIncrementTick>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0f9      	beq.n	80065f6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8006602:	2201      	movs	r2, #1
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <xTaskResumeAll+0xf0>)
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e7f5      	b.n	80065f6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 800660a:	2200      	movs	r2, #0
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <xTaskResumeAll+0xf4>)
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e7e4      	b.n	80065dc <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8006612:	2400      	movs	r4, #0
 8006614:	e7b0      	b.n	8006578 <xTaskResumeAll+0x34>
 8006616:	2400      	movs	r4, #0
 8006618:	e7ae      	b.n	8006578 <xTaskResumeAll+0x34>
 800661a:	bf00      	nop
 800661c:	20007220 	.word	0x20007220
 8006620:	20007214 	.word	0x20007214
 8006624:	2000725c 	.word	0x2000725c
 8006628:	20007228 	.word	0x20007228
 800662c:	20006dac 	.word	0x20006dac
 8006630:	20006da0 	.word	0x20006da0
 8006634:	200072a0 	.word	0x200072a0
 8006638:	2000721c 	.word	0x2000721c
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <vTaskDelay>:
	{
 8006640:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006642:	b1a8      	cbz	r0, 8006670 <vTaskDelay+0x30>
 8006644:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <vTaskDelay+0x48>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	b143      	cbz	r3, 800665e <vTaskDelay+0x1e>
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	e7fe      	b.n	800665c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800665e:	f7ff fed3 	bl	8006408 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006662:	2100      	movs	r1, #0
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff fdd5 	bl	8006214 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800666a:	f7ff ff6b 	bl	8006544 <xTaskResumeAll>
 800666e:	e000      	b.n	8006672 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8006670:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8006672:	b938      	cbnz	r0, 8006684 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <vTaskDelay+0x4c>)
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	bd10      	pop	{r4, pc}
 8006686:	bf00      	nop
 8006688:	20007220 	.word	0x20007220
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006690:	4b37      	ldr	r3, [pc, #220]	; (8006770 <vTaskSwitchContext+0xe0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	b11b      	cbz	r3, 800669e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006696:	2201      	movs	r2, #1
 8006698:	4b36      	ldr	r3, [pc, #216]	; (8006774 <vTaskSwitchContext+0xe4>)
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	4770      	bx	lr
{
 800669e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 80066a0:	2200      	movs	r2, #0
 80066a2:	4b34      	ldr	r3, [pc, #208]	; (8006774 <vTaskSwitchContext+0xe4>)
 80066a4:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80066a6:	f000 fbb3 	bl	8006e10 <getRunTimeCounterValue>
 80066aa:	4b33      	ldr	r3, [pc, #204]	; (8006778 <vTaskSwitchContext+0xe8>)
 80066ac:	6018      	str	r0, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a32      	ldr	r2, [pc, #200]	; (800677c <vTaskSwitchContext+0xec>)
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d907      	bls.n	80066c8 <vTaskSwitchContext+0x38>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80066b8:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <vTaskSwitchContext+0xe8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	1a9a      	subs	r2, r3, r2
 80066be:	4b30      	ldr	r3, [pc, #192]	; (8006780 <vTaskSwitchContext+0xf0>)
 80066c0:	6819      	ldr	r1, [r3, #0]
 80066c2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80066c4:	4413      	add	r3, r2
 80066c6:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80066c8:	4b2b      	ldr	r3, [pc, #172]	; (8006778 <vTaskSwitchContext+0xe8>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <vTaskSwitchContext+0xec>)
 80066ce:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80066d0:	4b2b      	ldr	r3, [pc, #172]	; (8006780 <vTaskSwitchContext+0xf0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80066dc:	d103      	bne.n	80066e6 <vTaskSwitchContext+0x56>
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80066e4:	d010      	beq.n	8006708 <vTaskSwitchContext+0x78>
 80066e6:	4b26      	ldr	r3, [pc, #152]	; (8006780 <vTaskSwitchContext+0xf0>)
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	6819      	ldr	r1, [r3, #0]
 80066ec:	3134      	adds	r1, #52	; 0x34
 80066ee:	f000 fb95 	bl	8006e1c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066f2:	4b24      	ldr	r3, [pc, #144]	; (8006784 <vTaskSwitchContext+0xf4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80066fa:	008a      	lsls	r2, r1, #2
 80066fc:	4922      	ldr	r1, [pc, #136]	; (8006788 <vTaskSwitchContext+0xf8>)
 80066fe:	588a      	ldr	r2, [r1, r2]
 8006700:	b9a2      	cbnz	r2, 800672c <vTaskSwitchContext+0x9c>
 8006702:	b153      	cbz	r3, 800671a <vTaskSwitchContext+0x8a>
 8006704:	3b01      	subs	r3, #1
 8006706:	e7f6      	b.n	80066f6 <vTaskSwitchContext+0x66>
		taskCHECK_FOR_STACK_OVERFLOW();
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800670e:	d1ea      	bne.n	80066e6 <vTaskSwitchContext+0x56>
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8006716:	d1e6      	bne.n	80066e6 <vTaskSwitchContext+0x56>
 8006718:	e7eb      	b.n	80066f2 <vTaskSwitchContext+0x62>
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	e7fe      	b.n	800672a <vTaskSwitchContext+0x9a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800672c:	4608      	mov	r0, r1
 800672e:	009a      	lsls	r2, r3, #2
 8006730:	18d4      	adds	r4, r2, r3
 8006732:	00a1      	lsls	r1, r4, #2
 8006734:	4401      	add	r1, r0
 8006736:	684c      	ldr	r4, [r1, #4]
 8006738:	6864      	ldr	r4, [r4, #4]
 800673a:	604c      	str	r4, [r1, #4]
 800673c:	441a      	add	r2, r3
 800673e:	0091      	lsls	r1, r2, #2
 8006740:	3108      	adds	r1, #8
 8006742:	4408      	add	r0, r1
 8006744:	4284      	cmp	r4, r0
 8006746:	d00b      	beq.n	8006760 <vTaskSwitchContext+0xd0>
 8006748:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800674c:	0091      	lsls	r1, r2, #2
 800674e:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <vTaskSwitchContext+0xf8>)
 8006750:	440a      	add	r2, r1
 8006752:	6852      	ldr	r2, [r2, #4]
 8006754:	68d1      	ldr	r1, [r2, #12]
 8006756:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <vTaskSwitchContext+0xf0>)
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	4a0a      	ldr	r2, [pc, #40]	; (8006784 <vTaskSwitchContext+0xf4>)
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	bd10      	pop	{r4, pc}
 8006760:	6860      	ldr	r0, [r4, #4]
 8006762:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006766:	0091      	lsls	r1, r2, #2
 8006768:	4a07      	ldr	r2, [pc, #28]	; (8006788 <vTaskSwitchContext+0xf8>)
 800676a:	440a      	add	r2, r1
 800676c:	6050      	str	r0, [r2, #4]
 800676e:	e7eb      	b.n	8006748 <vTaskSwitchContext+0xb8>
 8006770:	20007220 	.word	0x20007220
 8006774:	200072a0 	.word	0x200072a0
 8006778:	20007210 	.word	0x20007210
 800677c:	2000720c 	.word	0x2000720c
 8006780:	20006da0 	.word	0x20006da0
 8006784:	20007228 	.word	0x20007228
 8006788:	20006dac 	.word	0x20006dac

0800678c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800678c:	b940      	cbnz	r0, 80067a0 <vTaskPlaceOnEventList+0x14>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	e7fe      	b.n	800679e <vTaskPlaceOnEventList+0x12>
{
 80067a0:	b510      	push	{r4, lr}
 80067a2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <vTaskPlaceOnEventList+0x2c>)
 80067a6:	6819      	ldr	r1, [r3, #0]
 80067a8:	3118      	adds	r1, #24
 80067aa:	f7fe fcf9 	bl	80051a0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067ae:	2101      	movs	r1, #1
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7ff fd2f 	bl	8006214 <prvAddCurrentTaskToDelayedList>
 80067b6:	bd10      	pop	{r4, pc}
 80067b8:	20006da0 	.word	0x20006da0

080067bc <vTaskPlaceOnEventListRestricted>:
	{
 80067bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80067be:	b170      	cbz	r0, 80067de <vTaskPlaceOnEventListRestricted+0x22>
 80067c0:	460c      	mov	r4, r1
 80067c2:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067c4:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <vTaskPlaceOnEventListRestricted+0x34>)
 80067c6:	6811      	ldr	r1, [r2, #0]
 80067c8:	3118      	adds	r1, #24
 80067ca:	f7fe fcdd 	bl	8005188 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80067ce:	b10d      	cbz	r5, 80067d4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80067d0:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7ff fd1c 	bl	8006214 <prvAddCurrentTaskToDelayedList>
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	e7fe      	b.n	80067ee <vTaskPlaceOnEventListRestricted+0x32>
 80067f0:	20006da0 	.word	0x20006da0

080067f4 <xTaskRemoveFromEventList>:
{
 80067f4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067f6:	68c3      	ldr	r3, [r0, #12]
 80067f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80067fa:	b324      	cbz	r4, 8006846 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067fc:	f104 0518 	add.w	r5, r4, #24
 8006800:	4628      	mov	r0, r5
 8006802:	f7fe fce7 	bl	80051d4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <xTaskRemoveFromEventList+0x74>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	bb2b      	cbnz	r3, 8006858 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800680c:	1d25      	adds	r5, r4, #4
 800680e:	4628      	mov	r0, r5
 8006810:	f7fe fce0 	bl	80051d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <xTaskRemoveFromEventList+0x78>)
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <xTaskRemoveFromEventList+0x2e>
 800681e:	4a13      	ldr	r2, [pc, #76]	; (800686c <xTaskRemoveFromEventList+0x78>)
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006826:	009a      	lsls	r2, r3, #2
 8006828:	4629      	mov	r1, r5
 800682a:	4811      	ldr	r0, [pc, #68]	; (8006870 <xTaskRemoveFromEventList+0x7c>)
 800682c:	4410      	add	r0, r2
 800682e:	f7fe fcab 	bl	8005188 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <xTaskRemoveFromEventList+0x80>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	429a      	cmp	r2, r3
 800683c:	d911      	bls.n	8006862 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800683e:	2001      	movs	r0, #1
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <xTaskRemoveFromEventList+0x84>)
 8006842:	6018      	str	r0, [r3, #0]
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	e7fe      	b.n	8006856 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006858:	4629      	mov	r1, r5
 800685a:	4808      	ldr	r0, [pc, #32]	; (800687c <xTaskRemoveFromEventList+0x88>)
 800685c:	f7fe fc94 	bl	8005188 <vListInsertEnd>
 8006860:	e7e7      	b.n	8006832 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8006862:	2000      	movs	r0, #0
}
 8006864:	bd38      	pop	{r3, r4, r5, pc}
 8006866:	bf00      	nop
 8006868:	20007220 	.word	0x20007220
 800686c:	20007228 	.word	0x20007228
 8006870:	20006dac 	.word	0x20006dac
 8006874:	20006da0 	.word	0x20006da0
 8006878:	200072a0 	.word	0x200072a0
 800687c:	2000725c 	.word	0x2000725c

08006880 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <vTaskInternalSetTimeOutState+0x10>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006886:	4b03      	ldr	r3, [pc, #12]	; (8006894 <vTaskInternalSetTimeOutState+0x14>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6043      	str	r3, [r0, #4]
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20007258 	.word	0x20007258
 8006894:	2000729c 	.word	0x2000729c

08006898 <xTaskCheckForTimeOut>:
{
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800689a:	b1e0      	cbz	r0, 80068d6 <xTaskCheckForTimeOut+0x3e>
 800689c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800689e:	b319      	cbz	r1, 80068e8 <xTaskCheckForTimeOut+0x50>
 80068a0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 80068a2:	f7fe fd17 	bl	80052d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <xTaskCheckForTimeOut+0x78>)
 80068a8:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068aa:	6869      	ldr	r1, [r5, #4]
 80068ac:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d028      	beq.n	8006908 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068b6:	682f      	ldr	r7, [r5, #0]
 80068b8:	4e16      	ldr	r6, [pc, #88]	; (8006914 <xTaskCheckForTimeOut+0x7c>)
 80068ba:	6836      	ldr	r6, [r6, #0]
 80068bc:	42b7      	cmp	r7, r6
 80068be:	d001      	beq.n	80068c4 <xTaskCheckForTimeOut+0x2c>
 80068c0:	4288      	cmp	r0, r1
 80068c2:	d223      	bcs.n	800690c <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d318      	bcc.n	80068fa <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80068cc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80068ce:	f7fe fd23 	bl	8005318 <vPortExitCritical>
}
 80068d2:	4620      	mov	r0, r4
 80068d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	e7fe      	b.n	80068e6 <xTaskCheckForTimeOut+0x4e>
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	e7fe      	b.n	80068f8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 80068fa:	1a9b      	subs	r3, r3, r2
 80068fc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068fe:	4628      	mov	r0, r5
 8006900:	f7ff ffbe 	bl	8006880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006904:	2400      	movs	r4, #0
 8006906:	e7e2      	b.n	80068ce <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 8006908:	2400      	movs	r4, #0
 800690a:	e7e0      	b.n	80068ce <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800690c:	2401      	movs	r4, #1
 800690e:	e7de      	b.n	80068ce <xTaskCheckForTimeOut+0x36>
 8006910:	2000729c 	.word	0x2000729c
 8006914:	20007258 	.word	0x20007258

08006918 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006918:	2201      	movs	r2, #1
 800691a:	4b01      	ldr	r3, [pc, #4]	; (8006920 <vTaskMissedYield+0x8>)
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	4770      	bx	lr
 8006920:	200072a0 	.word	0x200072a0

08006924 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <xTaskGetSchedulerState+0x18>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	b123      	cbz	r3, 8006934 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <xTaskGetSchedulerState+0x1c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	b91b      	cbnz	r3, 8006938 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8006930:	2002      	movs	r0, #2
 8006932:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006934:	2001      	movs	r0, #1
 8006936:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8006938:	2000      	movs	r0, #0
	}
 800693a:	4770      	bx	lr
 800693c:	20007270 	.word	0x20007270
 8006940:	20007220 	.word	0x20007220

08006944 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006944:	2800      	cmp	r0, #0
 8006946:	d039      	beq.n	80069bc <xTaskPriorityDisinherit+0x78>
	{
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800694c:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <xTaskPriorityDisinherit+0x84>)
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	4290      	cmp	r0, r2
 8006952:	d008      	beq.n	8006966 <xTaskPriorityDisinherit+0x22>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	e7fe      	b.n	8006964 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006966:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006968:	b942      	cbnz	r2, 800697c <xTaskPriorityDisinherit+0x38>
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	e7fe      	b.n	800697a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800697c:	3a01      	subs	r2, #1
 800697e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006980:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006982:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006984:	4288      	cmp	r0, r1
 8006986:	d01b      	beq.n	80069c0 <xTaskPriorityDisinherit+0x7c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006988:	b9e2      	cbnz	r2, 80069c4 <xTaskPriorityDisinherit+0x80>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800698a:	1d25      	adds	r5, r4, #4
 800698c:	4628      	mov	r0, r5
 800698e:	f7fe fc21 	bl	80051d4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006992:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006994:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800699a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800699c:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <xTaskPriorityDisinherit+0x88>)
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <xTaskPriorityDisinherit+0x64>
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <xTaskPriorityDisinherit+0x88>)
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069ac:	009a      	lsls	r2, r3, #2
 80069ae:	4629      	mov	r1, r5
 80069b0:	4807      	ldr	r0, [pc, #28]	; (80069d0 <xTaskPriorityDisinherit+0x8c>)
 80069b2:	4410      	add	r0, r2
 80069b4:	f7fe fbe8 	bl	8005188 <vListInsertEnd>
					xReturn = pdTRUE;
 80069b8:	2001      	movs	r0, #1
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80069bc:	2000      	movs	r0, #0
 80069be:	4770      	bx	lr
 80069c0:	2000      	movs	r0, #0
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	2000      	movs	r0, #0
	}
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20006da0 	.word	0x20006da0
 80069cc:	20007228 	.word	0x20007228
 80069d0:	20006dac 	.word	0x20006dac

080069d4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <prvGetNextExpireTime+0x1c>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	6813      	ldr	r3, [r2, #0]
 80069da:	fab3 f383 	clz	r3, r3
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069e2:	b913      	cbnz	r3, 80069ea <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069e4:	68d3      	ldr	r3, [r2, #12]
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069ea:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200072a4 	.word	0x200072a4

080069f4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069f4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069f6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069f8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d80c      	bhi.n	8006a18 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	6983      	ldr	r3, [r0, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d301      	bcc.n	8006a0a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a06:	2001      	movs	r0, #1
 8006a08:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a0a:	1d01      	adds	r1, r0, #4
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <prvInsertTimerInActiveList+0x40>)
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	f7fe fbc6 	bl	80051a0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006a14:	2000      	movs	r0, #0
 8006a16:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d201      	bcs.n	8006a20 <prvInsertTimerInActiveList+0x2c>
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	d206      	bcs.n	8006a2e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a20:	1d01      	adds	r1, r0, #4
 8006a22:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <prvInsertTimerInActiveList+0x44>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f7fe fbbb 	bl	80051a0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8006a2e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
 8006a30:	bd08      	pop	{r3, pc}
 8006a32:	bf00      	nop
 8006a34:	200072a8 	.word	0x200072a8
 8006a38:	200072a4 	.word	0x200072a4

08006a3c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a3c:	b530      	push	{r4, r5, lr}
 8006a3e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a40:	f7fe fc48 	bl	80052d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a44:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <prvCheckForValidListAndQueue+0x50>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	b11b      	cbz	r3, 8006a52 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f7fe fc65 	bl	8005318 <vPortExitCritical>
}
 8006a4e:	b003      	add	sp, #12
 8006a50:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006a52:	4d0f      	ldr	r5, [pc, #60]	; (8006a90 <prvCheckForValidListAndQueue+0x54>)
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7fe fb89 	bl	800516c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a5a:	4c0e      	ldr	r4, [pc, #56]	; (8006a94 <prvCheckForValidListAndQueue+0x58>)
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7fe fb85 	bl	800516c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <prvCheckForValidListAndQueue+0x5c>)
 8006a64:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <prvCheckForValidListAndQueue+0x60>)
 8006a68:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <prvCheckForValidListAndQueue+0x64>)
 8006a70:	4a0c      	ldr	r2, [pc, #48]	; (8006aa4 <prvCheckForValidListAndQueue+0x68>)
 8006a72:	210c      	movs	r1, #12
 8006a74:	200a      	movs	r0, #10
 8006a76:	f7fe ff94 	bl	80059a2 <xQueueGenericCreateStatic>
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <prvCheckForValidListAndQueue+0x50>)
 8006a7c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d0e3      	beq.n	8006a4a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a82:	4909      	ldr	r1, [pc, #36]	; (8006aa8 <prvCheckForValidListAndQueue+0x6c>)
 8006a84:	f7ff fa42 	bl	8005f0c <vQueueAddToRegistry>
 8006a88:	e7df      	b.n	8006a4a <prvCheckForValidListAndQueue+0xe>
 8006a8a:	bf00      	nop
 8006a8c:	200073a0 	.word	0x200073a0
 8006a90:	20007324 	.word	0x20007324
 8006a94:	20007338 	.word	0x20007338
 8006a98:	200072a4 	.word	0x200072a4
 8006a9c:	200072a8 	.word	0x200072a8
 8006aa0:	20007350 	.word	0x20007350
 8006aa4:	200072ac 	.word	0x200072ac
 8006aa8:	08008ed8 	.word	0x08008ed8

08006aac <xTimerCreateTimerTask>:
{
 8006aac:	b510      	push	{r4, lr}
 8006aae:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006ab0:	f7ff ffc4 	bl	8006a3c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <xTimerCreateTimerTask+0x60>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	b31b      	cbz	r3, 8006b02 <xTimerCreateTimerTask+0x56>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aba:	2400      	movs	r4, #0
 8006abc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006abe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ac0:	aa07      	add	r2, sp, #28
 8006ac2:	a906      	add	r1, sp, #24
 8006ac4:	a805      	add	r0, sp, #20
 8006ac6:	f7fe fb45 	bl	8005154 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	9302      	str	r3, [sp, #8]
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	9a07      	ldr	r2, [sp, #28]
 8006ada:	490d      	ldr	r1, [pc, #52]	; (8006b10 <xTimerCreateTimerTask+0x64>)
 8006adc:	480d      	ldr	r0, [pc, #52]	; (8006b14 <xTimerCreateTimerTask+0x68>)
 8006ade:	f7ff fbd7 	bl	8006290 <xTaskCreateStatic>
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <xTimerCreateTimerTask+0x6c>)
 8006ae4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006ae6:	b150      	cbz	r0, 8006afe <xTimerCreateTimerTask+0x52>
				xReturn = pdPASS;
 8006ae8:	2001      	movs	r0, #1
	configASSERT( xReturn );
 8006aea:	b960      	cbnz	r0, 8006b06 <xTimerCreateTimerTask+0x5a>
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	e7fe      	b.n	8006afc <xTimerCreateTimerTask+0x50>
BaseType_t xReturn = pdFAIL;
 8006afe:	4620      	mov	r0, r4
 8006b00:	e7f3      	b.n	8006aea <xTimerCreateTimerTask+0x3e>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e7f1      	b.n	8006aea <xTimerCreateTimerTask+0x3e>
}
 8006b06:	b008      	add	sp, #32
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200073a0 	.word	0x200073a0
 8006b10:	08008ee0 	.word	0x08008ee0
 8006b14:	08006de9 	.word	0x08006de9
 8006b18:	200073a4 	.word	0x200073a4

08006b1c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006b1c:	b1c0      	cbz	r0, 8006b50 <xTimerGenericCommand+0x34>
{
 8006b1e:	b530      	push	{r4, r5, lr}
 8006b20:	b085      	sub	sp, #20
 8006b22:	4615      	mov	r5, r2
 8006b24:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8006b26:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <xTimerGenericCommand+0x68>)
 8006b28:	6810      	ldr	r0, [r2, #0]
 8006b2a:	b340      	cbz	r0, 8006b7e <xTimerGenericCommand+0x62>
 8006b2c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8006b2e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b30:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006b32:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b34:	2905      	cmp	r1, #5
 8006b36:	dc1c      	bgt.n	8006b72 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b38:	f7ff fef4 	bl	8006924 <xTaskGetSchedulerState>
 8006b3c:	2802      	cmp	r0, #2
 8006b3e:	d010      	beq.n	8006b62 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b40:	2300      	movs	r3, #0
 8006b42:	461a      	mov	r2, r3
 8006b44:	a901      	add	r1, sp, #4
 8006b46:	480f      	ldr	r0, [pc, #60]	; (8006b84 <xTimerGenericCommand+0x68>)
 8006b48:	6800      	ldr	r0, [r0, #0]
 8006b4a:	f7fe ffa1 	bl	8005a90 <xQueueGenericSend>
 8006b4e:	e014      	b.n	8006b7a <xTimerGenericCommand+0x5e>
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	e7fe      	b.n	8006b60 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b62:	2300      	movs	r3, #0
 8006b64:	9a08      	ldr	r2, [sp, #32]
 8006b66:	a901      	add	r1, sp, #4
 8006b68:	4806      	ldr	r0, [pc, #24]	; (8006b84 <xTimerGenericCommand+0x68>)
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	f7fe ff90 	bl	8005a90 <xQueueGenericSend>
 8006b70:	e003      	b.n	8006b7a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b72:	2300      	movs	r3, #0
 8006b74:	a901      	add	r1, sp, #4
 8006b76:	f7ff f84f 	bl	8005c18 <xQueueGenericSendFromISR>
}
 8006b7a:	b005      	add	sp, #20
 8006b7c:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8006b7e:	2000      	movs	r0, #0
	return xReturn;
 8006b80:	e7fb      	b.n	8006b7a <xTimerGenericCommand+0x5e>
 8006b82:	bf00      	nop
 8006b84:	200073a0 	.word	0x200073a0

08006b88 <prvSwitchTimerLists>:
{
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <prvSwitchTimerLists+0x70>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	b352      	cbz	r2, 8006bea <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b98:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b9a:	1d25      	adds	r5, r4, #4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f7fe fb19 	bl	80051d4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ba8:	69e3      	ldr	r3, [r4, #28]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d1ee      	bne.n	8006b8c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bae:	69a3      	ldr	r3, [r4, #24]
 8006bb0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8006bb2:	429e      	cmp	r6, r3
 8006bb4:	d207      	bcs.n	8006bc6 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bb6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bb8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <prvSwitchTimerLists+0x70>)
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	f7fe faee 	bl	80051a0 <vListInsert>
 8006bc4:	e7e2      	b.n	8006b8c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	9100      	str	r1, [sp, #0]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4632      	mov	r2, r6
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff ffa4 	bl	8006b1c <xTimerGenericCommand>
				configASSERT( xResult );
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d1d9      	bne.n	8006b8c <prvSwitchTimerLists+0x4>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	e7fe      	b.n	8006be8 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8006bea:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <prvSwitchTimerLists+0x74>)
 8006bec:	6810      	ldr	r0, [r2, #0]
 8006bee:	4902      	ldr	r1, [pc, #8]	; (8006bf8 <prvSwitchTimerLists+0x70>)
 8006bf0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006bf2:	6013      	str	r3, [r2, #0]
}
 8006bf4:	b002      	add	sp, #8
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	200072a4 	.word	0x200072a4
 8006bfc:	200072a8 	.word	0x200072a8

08006c00 <prvSampleTimeNow>:
{
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8006c04:	f7ff fc08 	bl	8006418 <xTaskGetTickCount>
 8006c08:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <prvSampleTimeNow+0x28>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4298      	cmp	r0, r3
 8006c10:	d305      	bcc.n	8006c1e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8006c16:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <prvSampleTimeNow+0x28>)
 8006c18:	601c      	str	r4, [r3, #0]
}
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8006c1e:	f7ff ffb3 	bl	8006b88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	602b      	str	r3, [r5, #0]
 8006c26:	e7f6      	b.n	8006c16 <prvSampleTimeNow+0x16>
 8006c28:	2000734c 	.word	0x2000734c

08006c2c <prvProcessExpiredTimer>:
{
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	4605      	mov	r5, r0
 8006c32:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c34:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <prvProcessExpiredTimer+0x5c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c3c:	1d20      	adds	r0, r4, #4
 8006c3e:	f7fe fac9 	bl	80051d4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c42:	69e3      	ldr	r3, [r4, #28]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d004      	beq.n	8006c52 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4798      	blx	r3
}
 8006c4e:	b002      	add	sp, #8
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c52:	69a1      	ldr	r1, [r4, #24]
 8006c54:	462b      	mov	r3, r5
 8006c56:	4632      	mov	r2, r6
 8006c58:	4429      	add	r1, r5
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7ff feca 	bl	80069f4 <prvInsertTimerInActiveList>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d0f1      	beq.n	8006c48 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c64:	2100      	movs	r1, #0
 8006c66:	9100      	str	r1, [sp, #0]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7ff ff55 	bl	8006b1c <xTimerGenericCommand>
			configASSERT( xResult );
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1e8      	bne.n	8006c48 <prvProcessExpiredTimer+0x1c>
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	e7fe      	b.n	8006c86 <prvProcessExpiredTimer+0x5a>
 8006c88:	200072a4 	.word	0x200072a4

08006c8c <prvProcessTimerOrBlockTask>:
{
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	4606      	mov	r6, r0
 8006c92:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8006c94:	f7ff fbb8 	bl	8006408 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c98:	a801      	add	r0, sp, #4
 8006c9a:	f7ff ffb1 	bl	8006c00 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	bb23      	cbnz	r3, 8006cec <prvProcessTimerOrBlockTask+0x60>
 8006ca2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ca4:	b90c      	cbnz	r4, 8006caa <prvProcessTimerOrBlockTask+0x1e>
 8006ca6:	42b0      	cmp	r0, r6
 8006ca8:	d219      	bcs.n	8006cde <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8006caa:	b12c      	cbz	r4, 8006cb8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <prvProcessTimerOrBlockTask+0x68>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681c      	ldr	r4, [r3, #0]
 8006cb2:	fab4 f484 	clz	r4, r4
 8006cb6:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cb8:	4622      	mov	r2, r4
 8006cba:	1b71      	subs	r1, r6, r5
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <prvProcessTimerOrBlockTask+0x6c>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	f7ff f938 	bl	8005f34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cc4:	f7ff fc3e 	bl	8006544 <xTaskResumeAll>
 8006cc8:	b938      	cbnz	r0, 8006cda <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <prvProcessTimerOrBlockTask+0x70>)
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
}
 8006cda:	b002      	add	sp, #8
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 8006cde:	f7ff fc31 	bl	8006544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff ffa1 	bl	8006c2c <prvProcessExpiredTimer>
 8006cea:	e7f6      	b.n	8006cda <prvProcessTimerOrBlockTask+0x4e>
			( void ) xTaskResumeAll();
 8006cec:	f7ff fc2a 	bl	8006544 <xTaskResumeAll>
}
 8006cf0:	e7f3      	b.n	8006cda <prvProcessTimerOrBlockTask+0x4e>
 8006cf2:	bf00      	nop
 8006cf4:	200072a8 	.word	0x200072a8
 8006cf8:	200073a0 	.word	0x200073a0
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <prvProcessReceivedCommands>:
{
 8006d00:	b530      	push	{r4, r5, lr}
 8006d02:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d04:	2200      	movs	r2, #0
 8006d06:	a903      	add	r1, sp, #12
 8006d08:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <prvProcessReceivedCommands+0xe4>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	f7fe fff4 	bl	8005cf8 <xQueueReceive>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d064      	beq.n	8006dde <prvProcessReceivedCommands+0xde>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dbf4      	blt.n	8006d04 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d1a:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d1c:	6963      	ldr	r3, [r4, #20]
 8006d1e:	b113      	cbz	r3, 8006d26 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d20:	1d20      	adds	r0, r4, #4
 8006d22:	f7fe fa57 	bl	80051d4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d26:	a802      	add	r0, sp, #8
 8006d28:	f7ff ff6a 	bl	8006c00 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	2b09      	cmp	r3, #9
 8006d30:	d8e8      	bhi.n	8006d04 <prvProcessReceivedCommands+0x4>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <prvProcessReceivedCommands+0x38>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d61 	.word	0x08006d61
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d05 	.word	0x08006d05
 8006d48:	08006da9 	.word	0x08006da9
 8006d4c:	08006dcf 	.word	0x08006dcf
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d61 	.word	0x08006d61
 8006d58:	08006d05 	.word	0x08006d05
 8006d5c:	08006da9 	.word	0x08006da9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d60:	9904      	ldr	r1, [sp, #16]
 8006d62:	69a5      	ldr	r5, [r4, #24]
 8006d64:	460b      	mov	r3, r1
 8006d66:	4602      	mov	r2, r0
 8006d68:	4429      	add	r1, r5
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7ff fe42 	bl	80069f4 <prvInsertTimerInActiveList>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d0c7      	beq.n	8006d04 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d76:	4620      	mov	r0, r4
 8006d78:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d7a:	69e3      	ldr	r3, [r4, #28]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d1c1      	bne.n	8006d04 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d80:	69a2      	ldr	r2, [r4, #24]
 8006d82:	2100      	movs	r1, #0
 8006d84:	9100      	str	r1, [sp, #0]
 8006d86:	460b      	mov	r3, r1
 8006d88:	9804      	ldr	r0, [sp, #16]
 8006d8a:	4402      	add	r2, r0
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7ff fec5 	bl	8006b1c <xTimerGenericCommand>
							configASSERT( xResult );
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d1b6      	bne.n	8006d04 <prvProcessReceivedCommands+0x4>
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	e7fe      	b.n	8006da6 <prvProcessReceivedCommands+0xa6>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006da8:	9904      	ldr	r1, [sp, #16]
 8006daa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dac:	b131      	cbz	r1, 8006dbc <prvProcessReceivedCommands+0xbc>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dae:	4603      	mov	r3, r0
 8006db0:	4602      	mov	r2, r0
 8006db2:	4401      	add	r1, r0
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff fe1d 	bl	80069f4 <prvInsertTimerInActiveList>
					break;
 8006dba:	e7a3      	b.n	8006d04 <prvProcessReceivedCommands+0x4>
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	e7fe      	b.n	8006dcc <prvProcessReceivedCommands+0xcc>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006dce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d196      	bne.n	8006d04 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f7fe fcba 	bl	8005750 <vPortFree>
 8006ddc:	e792      	b.n	8006d04 <prvProcessReceivedCommands+0x4>
}
 8006dde:	b007      	add	sp, #28
 8006de0:	bd30      	pop	{r4, r5, pc}
 8006de2:	bf00      	nop
 8006de4:	200073a0 	.word	0x200073a0

08006de8 <prvTimerTask>:
{
 8006de8:	b500      	push	{lr}
 8006dea:	b083      	sub	sp, #12
		vApplicationDaemonTaskStartupHook();
 8006dec:	f000 f826 	bl	8006e3c <vApplicationDaemonTaskStartupHook>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006df0:	a801      	add	r0, sp, #4
 8006df2:	f7ff fdef 	bl	80069d4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006df6:	9901      	ldr	r1, [sp, #4]
 8006df8:	f7ff ff48 	bl	8006c8c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8006dfc:	f7ff ff80 	bl	8006d00 <prvProcessReceivedCommands>
 8006e00:	e7f6      	b.n	8006df0 <prvTimerTask+0x8>
	...

08006e04 <configureTimerForRunTimeStats>:
volatile unsigned long ulHighFrequencyTimerTicks = 0;

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
	ulHighFrequencyTimerTicks = 0UL;
 8006e04:	2200      	movs	r2, #0
 8006e06:	4b01      	ldr	r3, [pc, #4]	; (8006e0c <configureTimerForRunTimeStats+0x8>)
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	4770      	bx	lr
 8006e0c:	200073a8 	.word	0x200073a8

08006e10 <getRunTimeCounterValue>:
}

unsigned long getRunTimeCounterValue(void)
{
	//printf("getRunTimeCounterValue %d\n",ulHighFrequencyTimerTicks);
	return ulHighFrequencyTimerTicks;
 8006e10:	4b01      	ldr	r3, [pc, #4]	; (8006e18 <getRunTimeCounterValue+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	200073a8 	.word	0x200073a8

08006e1c <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8006e1c:	b508      	push	{r3, lr}
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("vApplicationStackOverflowHook\n");
 8006e1e:	4802      	ldr	r0, [pc, #8]	; (8006e28 <vApplicationStackOverflowHook+0xc>)
 8006e20:	f000 fdf6 	bl	8007a10 <puts>
 8006e24:	bd08      	pop	{r3, pc}
 8006e26:	bf00      	nop
 8006e28:	08008f2c 	.word	0x08008f2c

08006e2c <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8006e2c:	b508      	push	{r3, lr}
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	printf("vApplicationMallocFailedHook\n");
 8006e2e:	4802      	ldr	r0, [pc, #8]	; (8006e38 <vApplicationMallocFailedHook+0xc>)
 8006e30:	f000 fdee 	bl	8007a10 <puts>
 8006e34:	bd08      	pop	{r3, pc}
 8006e36:	bf00      	nop
 8006e38:	08008f0c 	.word	0x08008f0c

08006e3c <vApplicationDaemonTaskStartupHook>:
}
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8006e3c:	b508      	push	{r3, lr}
	printf("vApplicationDaemonTaskStartupHook\n");
 8006e3e:	4802      	ldr	r0, [pc, #8]	; (8006e48 <vApplicationDaemonTaskStartupHook+0xc>)
 8006e40:	f000 fde6 	bl	8007a10 <puts>
 8006e44:	bd08      	pop	{r3, pc}
 8006e46:	bf00      	nop
 8006e48:	08008ee8 	.word	0x08008ee8

08006e4c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8006e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e50:	2400      	movs	r4, #0
 8006e52:	9405      	str	r4, [sp, #20]
 8006e54:	9406      	str	r4, [sp, #24]
 8006e56:	9407      	str	r4, [sp, #28]
 8006e58:	9408      	str	r4, [sp, #32]
 8006e5a:	9409      	str	r4, [sp, #36]	; 0x24

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8006e5c:	9401      	str	r4, [sp, #4]
 8006e5e:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <MX_GPIO_Init+0xb4>)
 8006e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
 8006e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006e6e:	9201      	str	r2, [sp, #4]
 8006e70:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006e72:	9402      	str	r4, [sp, #8]
 8006e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e76:	f042 0204 	orr.w	r2, r2, #4
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7e:	f002 0204 	and.w	r2, r2, #4
 8006e82:	9202      	str	r2, [sp, #8]
 8006e84:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006e86:	9403      	str	r4, [sp, #12]
 8006e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8a:	f042 0201 	orr.w	r2, r2, #1
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e92:	f002 0201 	and.w	r2, r2, #1
 8006e96:	9203      	str	r2, [sp, #12]
 8006e98:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006e9a:	9404      	str	r4, [sp, #16]
 8006e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9e:	f042 0202 	orr.w	r2, r2, #2
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(KEY2_GPIO_Port, KEY2_Pin, GPIO_PIN_RESET);
 8006eae:	4f15      	ldr	r7, [pc, #84]	; (8006f04 <MX_GPIO_Init+0xb8>)
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7f9 fd9d 	bl	80009f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TST2_Pin|TST1_Pin, GPIO_PIN_RESET);
 8006eba:	4e13      	ldr	r6, [pc, #76]	; (8006f08 <MX_GPIO_Init+0xbc>)
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	2106      	movs	r1, #6
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7f9 fd97 	bl	80009f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : KEY1_Pin */
	GPIO_InitStruct.Pin = KEY1_Pin;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eca:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006ecc:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8006ece:	a905      	add	r1, sp, #20
 8006ed0:	480e      	ldr	r0, [pc, #56]	; (8006f0c <MX_GPIO_Init+0xc0>)
 8006ed2:	f7f9 fc0f 	bl	80006f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : KEY2_Pin */
	GPIO_InitStruct.Pin = KEY2_Pin;
 8006ed6:	2501      	movs	r5, #1
 8006ed8:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eda:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006edc:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ede:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8006ee0:	a905      	add	r1, sp, #20
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f7f9 fc06 	bl	80006f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TST2_Pin TST1_Pin */
	GPIO_InitStruct.Pin = TST2_Pin|TST1_Pin;
 8006ee8:	2306      	movs	r3, #6
 8006eea:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eec:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef0:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef2:	a905      	add	r1, sp, #20
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f7f9 fbfd 	bl	80006f4 <HAL_GPIO_Init>

}
 8006efa:	b00b      	add	sp, #44	; 0x2c
 8006efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40023800 	.word	0x40023800
 8006f04:	40020000 	.word	0x40020000
 8006f08:	40020400 	.word	0x40020400
 8006f0c:	40020800 	.word	0x40020800

08006f10 <MX_TIM4_Init>:
{
 8006f10:	b530      	push	{r4, r5, lr}
 8006f12:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f14:	2400      	movs	r4, #0
 8006f16:	940a      	str	r4, [sp, #40]	; 0x28
 8006f18:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f1a:	940c      	str	r4, [sp, #48]	; 0x30
 8006f1c:	940d      	str	r4, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f1e:	9408      	str	r4, [sp, #32]
 8006f20:	9409      	str	r4, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006f22:	9401      	str	r4, [sp, #4]
 8006f24:	9402      	str	r4, [sp, #8]
 8006f26:	9403      	str	r4, [sp, #12]
 8006f28:	9404      	str	r4, [sp, #16]
 8006f2a:	9405      	str	r4, [sp, #20]
 8006f2c:	9406      	str	r4, [sp, #24]
 8006f2e:	9407      	str	r4, [sp, #28]
	htim4.Instance = TIM4;
 8006f30:	4d14      	ldr	r5, [pc, #80]	; (8006f84 <MX_TIM4_Init+0x74>)
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <MX_TIM4_Init+0x78>)
 8006f34:	602b      	str	r3, [r5, #0]
	htim4.Init.Prescaler = 840;
 8006f36:	f44f 7352 	mov.w	r3, #840	; 0x348
 8006f3a:	606b      	str	r3, [r5, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f3c:	60ac      	str	r4, [r5, #8]
	htim4.Init.Period = 100;
 8006f3e:	2364      	movs	r3, #100	; 0x64
 8006f40:	60eb      	str	r3, [r5, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f42:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f44:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7fb f9fe 	bl	8002348 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f50:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006f52:	a90a      	add	r1, sp, #40	; 0x28
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7fb fc55 	bl	8002804 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7fb fa74 	bl	8002448 <HAL_TIM_OC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f60:	9408      	str	r4, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f62:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006f64:	a908      	add	r1, sp, #32
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7fb fe90 	bl	8002c8c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006f6c:	9401      	str	r4, [sp, #4]
	sConfigOC.Pulse = 50;
 8006f6e:	2332      	movs	r3, #50	; 0x32
 8006f70:	9302      	str	r3, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f72:	9403      	str	r4, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f74:	9405      	str	r4, [sp, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f76:	4622      	mov	r2, r4
 8006f78:	a901      	add	r1, sp, #4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7fb fb44 	bl	8002608 <HAL_TIM_OC_ConfigChannel>
}
 8006f80:	b00f      	add	sp, #60	; 0x3c
 8006f82:	bd30      	pop	{r4, r5, pc}
 8006f84:	2000744c 	.word	0x2000744c
 8006f88:	40000800 	.word	0x40000800

08006f8c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006f8c:	b508      	push	{r3, lr}
	uint16_t ii=0;
	/* Infinite loop */
	for(;;)
	{
		//printf("StartDefaultTask %d\n",ii++);
		vTaskDelay(1);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f7ff fb56 	bl	8006640 <vTaskDelay>
 8006f94:	e7fb      	b.n	8006f8e <StartDefaultTask+0x2>
	...

08006f98 <SystemClock_Config>:
{
 8006f98:	b530      	push	{r4, r5, lr}
 8006f9a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f9c:	2230      	movs	r2, #48	; 0x30
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	a808      	add	r0, sp, #32
 8006fa2:	f000 fbf8 	bl	8007796 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fa6:	2400      	movs	r4, #0
 8006fa8:	9403      	str	r4, [sp, #12]
 8006faa:	9404      	str	r4, [sp, #16]
 8006fac:	9405      	str	r4, [sp, #20]
 8006fae:	9406      	str	r4, [sp, #24]
 8006fb0:	9407      	str	r4, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 8006fb2:	9401      	str	r4, [sp, #4]
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <SystemClock_Config+0x90>)
 8006fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fc8:	9402      	str	r4, [sp, #8]
 8006fca:	4b18      	ldr	r3, [pc, #96]	; (800702c <SystemClock_Config+0x94>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fda:	9302      	str	r3, [sp, #8]
 8006fdc:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fe6:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fe8:	2502      	movs	r5, #2
 8006fea:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006fec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ff0:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8006ff2:	2304      	movs	r3, #4
 8006ff4:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8006ff6:	23a8      	movs	r3, #168	; 0xa8
 8006ff8:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ffa:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007000:	a808      	add	r0, sp, #32
 8007002:	f7fa fae1 	bl	80015c8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007006:	230f      	movs	r3, #15
 8007008:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800700a:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800700c:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800700e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007012:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007018:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800701a:	2105      	movs	r1, #5
 800701c:	a803      	add	r0, sp, #12
 800701e:	f7fa fdb1 	bl	8001b84 <HAL_RCC_ClockConfig>
}
 8007022:	b015      	add	sp, #84	; 0x54
 8007024:	bd30      	pop	{r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800
 800702c:	40007000 	.word	0x40007000

08007030 <main>:
{
 8007030:	b500      	push	{lr}
 8007032:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8007034:	f7f9 faa4 	bl	8000580 <HAL_Init>
	SystemClock_Config();
 8007038:	f7ff ffae 	bl	8006f98 <SystemClock_Config>
	MX_GPIO_Init();
 800703c:	f7ff ff06 	bl	8006e4c <MX_GPIO_Init>
	MX_TIM4_Init();
 8007040:	f7ff ff66 	bl	8006f10 <MX_TIM4_Init>
	printf("start\n");
 8007044:	480f      	ldr	r0, [pc, #60]	; (8007084 <main+0x54>)
 8007046:	f000 fce3 	bl	8007a10 <puts>
	HAL_TIM_Base_Start_IT(&htim4);
 800704a:	480f      	ldr	r0, [pc, #60]	; (8007088 <main+0x58>)
 800704c:	f7fb f800 	bl	8002050 <HAL_TIM_Base_Start_IT>
	osKernelInitialize(); // Initialize CMSIS-RTOS
 8007050:	f7fd feae 	bl	8004db0 <osKernelInitialize>
	const osThreadAttr_t defaultTask_attributes = {
 8007054:	2224      	movs	r2, #36	; 0x24
 8007056:	2100      	movs	r1, #0
 8007058:	a801      	add	r0, sp, #4
 800705a:	f000 fb9c 	bl	8007796 <memset>
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <main+0x5c>)
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8007066:	9306      	str	r3, [sp, #24]
 8007068:	2310      	movs	r3, #16
 800706a:	9307      	str	r3, [sp, #28]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800706c:	aa01      	add	r2, sp, #4
 800706e:	2100      	movs	r1, #0
 8007070:	4807      	ldr	r0, [pc, #28]	; (8007090 <main+0x60>)
 8007072:	f7fd fee5 	bl	8004e40 <osThreadNew>
 8007076:	4b07      	ldr	r3, [pc, #28]	; (8007094 <main+0x64>)
 8007078:	6018      	str	r0, [r3, #0]
	MX_USB_HOST_Init();
 800707a:	f000 f9d3 	bl	8007424 <MX_USB_HOST_Init>
	osKernelStart();
 800707e:	f7fd feb9 	bl	8004df4 <osKernelStart>
 8007082:	e7fe      	b.n	8007082 <main+0x52>
 8007084:	08008f90 	.word	0x08008f90
 8007088:	2000744c 	.word	0x2000744c
 800708c:	08008f98 	.word	0x08008f98
 8007090:	08006f8d 	.word	0x08006f8d
 8007094:	20007448 	.word	0x20007448

08007098 <USBH_HID_EventCallback>:
{
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4604      	mov	r4, r0
	printf("\nUSBH_HID_EventCallback\n");
 800709c:	480f      	ldr	r0, [pc, #60]	; (80070dc <USBH_HID_EventCallback+0x44>)
 800709e:	f000 fcb7 	bl	8007a10 <puts>
	k_pinfo = USBH_HID_GetKeybdInfo(phost);
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7fc fd9c 	bl	8003be0 <USBH_HID_GetKeybdInfo>
	if (k_pinfo != 0)
 80070a8:	b1b8      	cbz	r0, 80070da <USBH_HID_EventCallback+0x42>
 80070aa:	4605      	mov	r5, r0
		uint8_t ch = USBH_HID_GetASCIICode(k_pinfo);
 80070ac:	f7fc fda2 	bl	8003bf4 <USBH_HID_GetASCIICode>
		printf("USBH_HID_GetASCIICode = %c\n",ch);
 80070b0:	4601      	mov	r1, r0
 80070b2:	480b      	ldr	r0, [pc, #44]	; (80070e0 <USBH_HID_EventCallback+0x48>)
 80070b4:	f000 fc24 	bl	8007900 <iprintf>
		printf("all : ");
 80070b8:	480a      	ldr	r0, [pc, #40]	; (80070e4 <USBH_HID_EventCallback+0x4c>)
 80070ba:	f000 fc21 	bl	8007900 <iprintf>
		for (uint8_t i = 0; i < 6; i++)
 80070be:	2400      	movs	r4, #0
 80070c0:	e006      	b.n	80070d0 <USBH_HID_EventCallback+0x38>
			ch = k_pinfo->keys[i];
 80070c2:	192b      	adds	r3, r5, r4
			printf(" %0.2X",ch);
 80070c4:	7a59      	ldrb	r1, [r3, #9]
 80070c6:	4808      	ldr	r0, [pc, #32]	; (80070e8 <USBH_HID_EventCallback+0x50>)
 80070c8:	f000 fc1a 	bl	8007900 <iprintf>
		for (uint8_t i = 0; i < 6; i++)
 80070cc:	3401      	adds	r4, #1
 80070ce:	b2e4      	uxtb	r4, r4
 80070d0:	2c05      	cmp	r4, #5
 80070d2:	d9f6      	bls.n	80070c2 <USBH_HID_EventCallback+0x2a>
		printf("\n");
 80070d4:	200a      	movs	r0, #10
 80070d6:	f000 fc2b 	bl	8007930 <putchar>
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	08008f4c 	.word	0x08008f4c
 80070e0:	08008f64 	.word	0x08008f64
 80070e4:	08008f80 	.word	0x08008f80
 80070e8:	08008f88 	.word	0x08008f88

080070ec <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80070ee:	6803      	ldr	r3, [r0, #0]
 80070f0:	4a07      	ldr	r2, [pc, #28]	; (8007110 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <HAL_TIM_PeriodElapsedCallback+0x12>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else if (htim->Instance == TIM4)
 80070f6:	4a07      	ldr	r2, [pc, #28]	; (8007114 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <HAL_TIM_PeriodElapsedCallback+0x18>
 80070fc:	bd08      	pop	{r3, pc}
		HAL_IncTick();
 80070fe:	f7f9 fa59 	bl	80005b4 <HAL_IncTick>
 8007102:	bd08      	pop	{r3, pc}
	{
		//printf("HAL_TIM_PeriodElapsedCallback\n");
		ulHighFrequencyTimerTicks++;
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007106:	6813      	ldr	r3, [r2, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END Callback 1 */
}
 800710c:	e7f6      	b.n	80070fc <HAL_TIM_PeriodElapsedCallback+0x10>
 800710e:	bf00      	nop
 8007110:	40002000 	.word	0x40002000
 8007114:	40000800 	.word	0x40000800
 8007118:	200073a8 	.word	0x200073a8

0800711c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800711c:	4770      	bx	lr

0800711e <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800711e:	4770      	bx	lr

08007120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007120:	b500      	push	{lr}
 8007122:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007124:	2200      	movs	r2, #0
 8007126:	9200      	str	r2, [sp, #0]
 8007128:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <HAL_MspInit+0x40>)
 800712a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800712c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007130:	6459      	str	r1, [r3, #68]	; 0x44
 8007132:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007134:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007138:	9100      	str	r1, [sp, #0]
 800713a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800713c:	9201      	str	r2, [sp, #4]
 800713e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007140:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007144:	6419      	str	r1, [r3, #64]	; 0x40
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007150:	210f      	movs	r1, #15
 8007152:	f06f 0001 	mvn.w	r0, #1
 8007156:	f7f9 fa71 	bl	800063c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800715a:	b003      	add	sp, #12
 800715c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007160:	40023800 	.word	0x40023800

08007164 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8007164:	6802      	ldr	r2, [r0, #0]
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <HAL_TIM_Base_MspInit+0x3c>)
 8007168:	429a      	cmp	r2, r3
 800716a:	d000      	beq.n	800716e <HAL_TIM_Base_MspInit+0xa>
 800716c:	4770      	bx	lr
{
 800716e:	b500      	push	{lr}
 8007170:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007172:	2200      	movs	r2, #0
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800717a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800717c:	f041 0104 	orr.w	r1, r1, #4
 8007180:	6419      	str	r1, [r3, #64]	; 0x40
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800718c:	2105      	movs	r1, #5
 800718e:	201e      	movs	r0, #30
 8007190:	f7f9 fa54 	bl	800063c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007194:	201e      	movs	r0, #30
 8007196:	f7f9 fa95 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800719a:	b003      	add	sp, #12
 800719c:	f85d fb04 	ldr.w	pc, [sp], #4
 80071a0:	40000800 	.word	0x40000800

080071a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071a4:	b510      	push	{r4, lr}
 80071a6:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80071a8:	2200      	movs	r2, #0
 80071aa:	4601      	mov	r1, r0
 80071ac:	202d      	movs	r0, #45	; 0x2d
 80071ae:	f7f9 fa45 	bl	800063c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80071b2:	202d      	movs	r0, #45	; 0x2d
 80071b4:	f7f9 fa86 	bl	80006c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80071b8:	2400      	movs	r4, #0
 80071ba:	9401      	str	r4, [sp, #4]
 80071bc:	4b14      	ldr	r3, [pc, #80]	; (8007210 <HAL_InitTick+0x6c>)
 80071be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	9301      	str	r3, [sp, #4]
 80071ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80071d0:	a902      	add	r1, sp, #8
 80071d2:	a803      	add	r0, sp, #12
 80071d4:	f7fa fdf6 	bl	8001dc4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80071d8:	f7fa fde4 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 80071dc:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80071de:	480d      	ldr	r0, [pc, #52]	; (8007214 <HAL_InitTick+0x70>)
 80071e0:	fba0 2303 	umull	r2, r3, r0, r3
 80071e4:	0c9b      	lsrs	r3, r3, #18
 80071e6:	3b01      	subs	r3, #1
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80071e8:	480b      	ldr	r0, [pc, #44]	; (8007218 <HAL_InitTick+0x74>)
 80071ea:	4a0c      	ldr	r2, [pc, #48]	; (800721c <HAL_InitTick+0x78>)
 80071ec:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80071ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80071f2:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80071f4:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80071f6:	6104      	str	r4, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071f8:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80071fa:	f7fb f8a5 	bl	8002348 <HAL_TIM_Base_Init>
 80071fe:	b110      	cbz	r0, 8007206 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007200:	2001      	movs	r0, #1
}
 8007202:	b008      	add	sp, #32
 8007204:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim14);
 8007206:	4804      	ldr	r0, [pc, #16]	; (8007218 <HAL_InitTick+0x74>)
 8007208:	f7fa ff22 	bl	8002050 <HAL_TIM_Base_Start_IT>
 800720c:	e7f9      	b.n	8007202 <HAL_InitTick+0x5e>
 800720e:	bf00      	nop
 8007210:	40023800 	.word	0x40023800
 8007214:	431bde83 	.word	0x431bde83
 8007218:	20007874 	.word	0x20007874
 800721c:	40002000 	.word	0x40002000

08007220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007220:	4770      	bx	lr
	...

08007224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("HardFault_Handler");
 8007226:	4802      	ldr	r0, [pc, #8]	; (8007230 <HardFault_Handler+0xc>)
 8007228:	f000 fb6a 	bl	8007900 <iprintf>
 800722c:	e7fe      	b.n	800722c <HardFault_Handler+0x8>
 800722e:	bf00      	nop
 8007230:	08008fcc 	.word	0x08008fcc

08007234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemManage_Handler\n");
 8007236:	4802      	ldr	r0, [pc, #8]	; (8007240 <MemManage_Handler+0xc>)
 8007238:	f000 fbea 	bl	8007a10 <puts>
 800723c:	e7fe      	b.n	800723c <MemManage_Handler+0x8>
 800723e:	bf00      	nop
 8007240:	08008fe0 	.word	0x08008fe0

08007244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007244:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	printf("BusFault_Handler\n");
 8007246:	4802      	ldr	r0, [pc, #8]	; (8007250 <BusFault_Handler+0xc>)
 8007248:	f000 fbe2 	bl	8007a10 <puts>
 800724c:	e7fe      	b.n	800724c <BusFault_Handler+0x8>
 800724e:	bf00      	nop
 8007250:	08008fa4 	.word	0x08008fa4

08007254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007254:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	printf("UsageFault_Handler\n");
 8007256:	4802      	ldr	r0, [pc, #8]	; (8007260 <UsageFault_Handler+0xc>)
 8007258:	f000 fbda 	bl	8007a10 <puts>
 800725c:	e7fe      	b.n	800725c <UsageFault_Handler+0x8>
 800725e:	bf00      	nop
 8007260:	08008ff4 	.word	0x08008ff4

08007264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007264:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler\n");
 8007266:	4802      	ldr	r0, [pc, #8]	; (8007270 <DebugMon_Handler+0xc>)
 8007268:	f000 fbd2 	bl	8007a10 <puts>
 800726c:	bd08      	pop	{r3, pc}
 800726e:	bf00      	nop
 8007270:	08008fb8 	.word	0x08008fb8

08007274 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007276:	4802      	ldr	r0, [pc, #8]	; (8007280 <TIM4_IRQHandler+0xc>)
 8007278:	f7fa ff43 	bl	8002102 <HAL_TIM_IRQHandler>
 800727c:	bd08      	pop	{r3, pc}
 800727e:	bf00      	nop
 8007280:	2000744c 	.word	0x2000744c

08007284 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007284:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007286:	4802      	ldr	r0, [pc, #8]	; (8007290 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8007288:	f7fa ff3b 	bl	8002102 <HAL_TIM_IRQHandler>
 800728c:	bd08      	pop	{r3, pc}
 800728e:	bf00      	nop
 8007290:	20007874 	.word	0x20007874

08007294 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007294:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007296:	4802      	ldr	r0, [pc, #8]	; (80072a0 <OTG_FS_IRQHandler+0xc>)
 8007298:	f7fa f8af 	bl	80013fa <HAL_HCD_IRQHandler>
 800729c:	bd08      	pop	{r3, pc}
 800729e:	bf00      	nop
 80072a0:	20007f8c 	.word	0x20007f8c

080072a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	460d      	mov	r5, r1
 80072a8:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072aa:	2400      	movs	r4, #0
 80072ac:	e005      	b.n	80072ba <_read+0x16>
	{
		*ptr++ = __io_getchar();
 80072ae:	1c6e      	adds	r6, r5, #1
 80072b0:	f3af 8000 	nop.w
 80072b4:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072b6:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 80072b8:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072ba:	42bc      	cmp	r4, r7
 80072bc:	dbf7      	blt.n	80072ae <_read+0xa>
	}

return len;
}
 80072be:	4638      	mov	r0, r7
 80072c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80072c2:	b430      	push	{r4, r5}
	int DataIdx;


	
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072c4:	2400      	movs	r4, #0
 80072c6:	e00a      	b.n	80072de <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80072c8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80072ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f9      	beq.n	80072c8 <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80072d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072d8:	7019      	strb	r1, [r3, #0]
 80072da:	3401      	adds	r4, #1
		{
				/* USER CODE BEGIN 1 */
				//__io_putchar(*ptr++);
				ITM_SendChar(*ptr++);
 80072dc:	4629      	mov	r1, r5
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072de:	4294      	cmp	r4, r2
 80072e0:	da10      	bge.n	8007304 <_write+0x42>
				ITM_SendChar(*ptr++);
 80072e2:	1c4d      	adds	r5, r1, #1
 80072e4:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80072e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072ea:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80072ee:	f013 0f01 	tst.w	r3, #1
 80072f2:	d0f2      	beq.n	80072da <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80072f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80072fc:	f013 0f01 	tst.w	r3, #1
 8007300:	d1e3      	bne.n	80072ca <_write+0x8>
 8007302:	e7ea      	b.n	80072da <_write+0x18>
				/* USER CODE END 1 */
		}
	
	
	return len;
}
 8007304:	4610      	mov	r0, r2
 8007306:	bc30      	pop	{r4, r5}
 8007308:	4770      	bx	lr
	...

0800730c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800730c:	b508      	push	{r3, lr}
 800730e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007310:	4a0b      	ldr	r2, [pc, #44]	; (8007340 <_sbrk+0x34>)
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	b142      	cbz	r2, 8007328 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007316:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <_sbrk+0x34>)
 8007318:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800731a:	4403      	add	r3, r0
 800731c:	466a      	mov	r2, sp
 800731e:	4293      	cmp	r3, r2
 8007320:	d806      	bhi.n	8007330 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007322:	4a07      	ldr	r2, [pc, #28]	; (8007340 <_sbrk+0x34>)
 8007324:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007326:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007328:	4906      	ldr	r1, [pc, #24]	; (8007344 <_sbrk+0x38>)
 800732a:	4a05      	ldr	r2, [pc, #20]	; (8007340 <_sbrk+0x34>)
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	e7f2      	b.n	8007316 <_sbrk+0xa>
		errno = ENOMEM;
 8007330:	f000 f9f4 	bl	800771c <__errno>
 8007334:	230c      	movs	r3, #12
 8007336:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	bd08      	pop	{r3, pc}
 800733e:	bf00      	nop
 8007340:	200073ac 	.word	0x200073ac
 8007344:	20008254 	.word	0x20008254

08007348 <_close>:

int _close(int file)
{
	return -1;
}
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	4770      	bx	lr

0800734e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800734e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007352:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007354:	2000      	movs	r0, #0
 8007356:	4770      	bx	lr

08007358 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007358:	2001      	movs	r0, #1
 800735a:	4770      	bx	lr

0800735c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800735c:	2000      	movs	r0, #0
 800735e:	4770      	bx	lr

08007360 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007360:	490f      	ldr	r1, [pc, #60]	; (80073a0 <SystemInit+0x40>)
 8007362:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800736a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <SystemInit+0x44>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007378:	2000      	movs	r0, #0
 800737a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007386:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007388:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <SystemInit+0x48>)
 800738a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007392:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007394:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800739a:	608b      	str	r3, [r1, #8]
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	e000ed00 	.word	0xe000ed00
 80073a4:	40023800 	.word	0x40023800
 80073a8:	24003010 	.word	0x24003010

080073ac <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80073ac:	b510      	push	{r4, lr}
 80073ae:	460c      	mov	r4, r1
	/* USER CODE BEGIN CALL_BACK_1 */

	printf("USBH_UserProcess id=%d ",id);
 80073b0:	4815      	ldr	r0, [pc, #84]	; (8007408 <USBH_UserProcess+0x5c>)
 80073b2:	f000 faa5 	bl	8007900 <iprintf>

	switch(id)
 80073b6:	1e61      	subs	r1, r4, #1
 80073b8:	2904      	cmp	r1, #4
 80073ba:	d820      	bhi.n	80073fe <USBH_UserProcess+0x52>
 80073bc:	e8df f001 	tbb	[pc, r1]
 80073c0:	181f1103 	.word	0x181f1103
 80073c4:	0a          	.byte	0x0a
 80073c5:	00          	.byte	0x00
	{
	case HOST_USER_SELECT_CONFIGURATION:
		printf("HOST_USER_SELECT_CONFIGURATION");
 80073c6:	4811      	ldr	r0, [pc, #68]	; (800740c <USBH_UserProcess+0x60>)
 80073c8:	f000 fa9a 	bl	8007900 <iprintf>

	default:
		printf("????");
		break;
	}
	printf("\n");
 80073cc:	200a      	movs	r0, #10
 80073ce:	f000 faaf 	bl	8007930 <putchar>
 80073d2:	bd10      	pop	{r4, pc}
		Appli_state = APPLICATION_DISCONNECT;
 80073d4:	2203      	movs	r2, #3
 80073d6:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <USBH_UserProcess+0x64>)
 80073d8:	701a      	strb	r2, [r3, #0]
		printf("APPLICATION_DISCONNECT");
 80073da:	480e      	ldr	r0, [pc, #56]	; (8007414 <USBH_UserProcess+0x68>)
 80073dc:	f000 fa90 	bl	8007900 <iprintf>
		break;
 80073e0:	e7f4      	b.n	80073cc <USBH_UserProcess+0x20>
		Appli_state = APPLICATION_READY;
 80073e2:	2202      	movs	r2, #2
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <USBH_UserProcess+0x64>)
 80073e6:	701a      	strb	r2, [r3, #0]
		printf("APPLICATION_READY");
 80073e8:	480b      	ldr	r0, [pc, #44]	; (8007418 <USBH_UserProcess+0x6c>)
 80073ea:	f000 fa89 	bl	8007900 <iprintf>
		break;
 80073ee:	e7ed      	b.n	80073cc <USBH_UserProcess+0x20>
		Appli_state = APPLICATION_START;
 80073f0:	2201      	movs	r2, #1
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <USBH_UserProcess+0x64>)
 80073f4:	701a      	strb	r2, [r3, #0]
		printf("APPLICATION_START");
 80073f6:	4809      	ldr	r0, [pc, #36]	; (800741c <USBH_UserProcess+0x70>)
 80073f8:	f000 fa82 	bl	8007900 <iprintf>
		break;
 80073fc:	e7e6      	b.n	80073cc <USBH_UserProcess+0x20>
		printf("????");
 80073fe:	4808      	ldr	r0, [pc, #32]	; (8007420 <USBH_UserProcess+0x74>)
 8007400:	f000 fa7e 	bl	8007900 <iprintf>
		break;
 8007404:	e7e2      	b.n	80073cc <USBH_UserProcess+0x20>
 8007406:	bf00      	nop
 8007408:	08009038 	.word	0x08009038
 800740c:	08009050 	.word	0x08009050
 8007410:	200073b0 	.word	0x200073b0
 8007414:	08009070 	.word	0x08009070
 8007418:	08009088 	.word	0x08009088
 800741c:	0800909c 	.word	0x0800909c
 8007420:	080090b0 	.word	0x080090b0

08007424 <MX_USB_HOST_Init>:
{
 8007424:	b508      	push	{r3, lr}
	printf("-- MX_USB_HOST_Init --\n");
 8007426:	480e      	ldr	r0, [pc, #56]	; (8007460 <MX_USB_HOST_Init+0x3c>)
 8007428:	f000 faf2 	bl	8007a10 <puts>
	if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800742c:	2201      	movs	r2, #1
 800742e:	490d      	ldr	r1, [pc, #52]	; (8007464 <MX_USB_HOST_Init+0x40>)
 8007430:	480d      	ldr	r0, [pc, #52]	; (8007468 <MX_USB_HOST_Init+0x44>)
 8007432:	f7fc fdd1 	bl	8003fd8 <USBH_Init>
 8007436:	b948      	cbnz	r0, 800744c <MX_USB_HOST_Init+0x28>
	if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007438:	490c      	ldr	r1, [pc, #48]	; (800746c <MX_USB_HOST_Init+0x48>)
 800743a:	480b      	ldr	r0, [pc, #44]	; (8007468 <MX_USB_HOST_Init+0x44>)
 800743c:	f7fc fe0c 	bl	8004058 <USBH_RegisterClass>
 8007440:	b938      	cbnz	r0, 8007452 <MX_USB_HOST_Init+0x2e>
	if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007442:	4809      	ldr	r0, [pc, #36]	; (8007468 <MX_USB_HOST_Init+0x44>)
 8007444:	f7fc fea1 	bl	800418a <USBH_Start>
 8007448:	b930      	cbnz	r0, 8007458 <MX_USB_HOST_Init+0x34>
 800744a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800744c:	f7ff fe66 	bl	800711c <Error_Handler>
 8007450:	e7f2      	b.n	8007438 <MX_USB_HOST_Init+0x14>
		Error_Handler();
 8007452:	f7ff fe63 	bl	800711c <Error_Handler>
 8007456:	e7f4      	b.n	8007442 <MX_USB_HOST_Init+0x1e>
		Error_Handler();
 8007458:	f7ff fe60 	bl	800711c <Error_Handler>
}
 800745c:	e7f5      	b.n	800744a <MX_USB_HOST_Init+0x26>
 800745e:	bf00      	nop
 8007460:	08009020 	.word	0x08009020
 8007464:	080073ad 	.word	0x080073ad
 8007468:	200078b4 	.word	0x200078b4
 800746c:	20000008 	.word	0x20000008

08007470 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007470:	b530      	push	{r4, r5, lr}
 8007472:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007474:	2300      	movs	r3, #0
 8007476:	9303      	str	r3, [sp, #12]
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	9306      	str	r3, [sp, #24]
 800747e:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007480:	6803      	ldr	r3, [r0, #0]
 8007482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007486:	d001      	beq.n	800748c <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007488:	b009      	add	sp, #36	; 0x24
 800748a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800748c:	2500      	movs	r5, #0
 800748e:	9501      	str	r5, [sp, #4]
 8007490:	4c16      	ldr	r4, [pc, #88]	; (80074ec <HAL_HCD_MspInit+0x7c>)
 8007492:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007494:	f043 0301 	orr.w	r3, r3, #1
 8007498:	6323      	str	r3, [r4, #48]	; 0x30
 800749a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074aa:	2302      	movs	r3, #2
 80074ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074ae:	2303      	movs	r3, #3
 80074b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074b2:	230a      	movs	r3, #10
 80074b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b6:	a903      	add	r1, sp, #12
 80074b8:	480d      	ldr	r0, [pc, #52]	; (80074f0 <HAL_HCD_MspInit+0x80>)
 80074ba:	f7f9 f91b 	bl	80006f4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	6363      	str	r3, [r4, #52]	; 0x34
 80074c6:	9502      	str	r5, [sp, #8]
 80074c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ce:	6463      	str	r3, [r4, #68]	; 0x44
 80074d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80074da:	462a      	mov	r2, r5
 80074dc:	2105      	movs	r1, #5
 80074de:	2043      	movs	r0, #67	; 0x43
 80074e0:	f7f9 f8ac 	bl	800063c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074e4:	2043      	movs	r0, #67	; 0x43
 80074e6:	f7f9 f8ed 	bl	80006c4 <HAL_NVIC_EnableIRQ>
}
 80074ea:	e7cd      	b.n	8007488 <HAL_HCD_MspInit+0x18>
 80074ec:	40023800 	.word	0x40023800
 80074f0:	40020000 	.word	0x40020000

080074f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80074f4:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 80074f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80074fa:	f7fc fe53 	bl	80041a4 <USBH_LL_IncTimer>
 80074fe:	bd08      	pop	{r3, pc}

08007500 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007500:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8007502:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007506:	f7fd f818 	bl	800453a <USBH_LL_Connect>
 800750a:	bd08      	pop	{r3, pc}

0800750c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800750c:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800750e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007512:	f7fd f833 	bl	800457c <USBH_LL_Disconnect>
 8007516:	bd08      	pop	{r3, pc}

08007518 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007518:	b508      	push	{r3, lr}
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800751a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800751e:	f7fd f85d 	bl	80045dc <USBH_LL_NotifyURBChange>
 8007522:	bd08      	pop	{r3, pc}

08007524 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007524:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8007526:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800752a:	f7fc fe44 	bl	80041b6 <USBH_LL_PortEnabled>
 800752e:	bd08      	pop	{r3, pc}

08007530 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007530:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8007532:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007536:	f7fc fe42 	bl	80041be <USBH_LL_PortDisabled>
 800753a:	bd08      	pop	{r3, pc}

0800753c <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800753c:	f890 36c0 	ldrb.w	r3, [r0, #1728]	; 0x6c0
 8007540:	2b01      	cmp	r3, #1
 8007542:	d001      	beq.n	8007548 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8007544:	2000      	movs	r0, #0
 8007546:	4770      	bx	lr
{
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 800754c:	480f      	ldr	r0, [pc, #60]	; (800758c <USBH_LL_Init+0x50>)
 800754e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007552:	f8c4 06c4 	str.w	r0, [r4, #1732]	; 0x6c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800755a:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800755c:	2308      	movs	r3, #8
 800755e:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007560:	2301      	movs	r3, #1
 8007562:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007564:	2300      	movs	r3, #0
 8007566:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007568:	2202      	movs	r2, #2
 800756a:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800756c:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800756e:	f7f9 fafb 	bl	8000b68 <HAL_HCD_Init>
 8007572:	b940      	cbnz	r0, 8007586 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007574:	4805      	ldr	r0, [pc, #20]	; (800758c <USBH_LL_Init+0x50>)
 8007576:	f7fa f81d 	bl	80015b4 <HAL_HCD_GetCurrentFrame>
 800757a:	4601      	mov	r1, r0
 800757c:	4620      	mov	r0, r4
 800757e:	f7fc fe0e 	bl	800419e <USBH_LL_SetTimer>
}
 8007582:	2000      	movs	r0, #0
 8007584:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007586:	f7ff fdc9 	bl	800711c <Error_Handler>
 800758a:	e7f3      	b.n	8007574 <USBH_LL_Init+0x38>
 800758c:	20007f8c 	.word	0x20007f8c

08007590 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007590:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007592:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 8007596:	f7fa f812 	bl	80015be <HAL_HCD_GetCurrentSpeed>
 800759a:	b118      	cbz	r0, 80075a4 <USBH_LL_GetSpeed+0x14>
 800759c:	2802      	cmp	r0, #2
 800759e:	d003      	beq.n	80075a8 <USBH_LL_GetSpeed+0x18>
  case 0 :
    speed = USBH_SPEED_HIGH;
    break;

  case 1 :
    speed = USBH_SPEED_FULL;
 80075a0:	2001      	movs	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80075a2:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_HIGH;
 80075a4:	2000      	movs	r0, #0
 80075a6:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_LOW;
 80075a8:	2002      	movs	r0, #2
    break;
 80075aa:	bd08      	pop	{r3, pc}

080075ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075ac:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80075ae:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 80075b2:	f7f9 fff8 	bl	80015a6 <HAL_HCD_HC_GetURBState>
}
 80075b6:	bd08      	pop	{r3, pc}

080075b8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80075b8:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 80075ba:	f890 36c0 	ldrb.w	r3, [r0, #1728]	; 0x6c0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d004      	beq.n	80075cc <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80075c2:	20c8      	movs	r0, #200	; 0xc8
 80075c4:	f7f9 f808 	bl	80005d8 <HAL_Delay>
  return USBH_OK;
}
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 80075cc:	4608      	mov	r0, r1
 80075ce:	f000 f86f 	bl	80076b0 <MX_DriverVbusFS>
 80075d2:	e7f6      	b.n	80075c2 <USBH_LL_DriverVBUS+0xa>

080075d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80075d4:	b410      	push	{r4}
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80075d6:	f8d0 36c4 	ldr.w	r3, [r0, #1732]	; 0x6c4

  if(pHandle->hc[pipe].ep_is_in)
 80075da:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80075de:	00e0      	lsls	r0, r4, #3
 80075e0:	4604      	mov	r4, r0
 80075e2:	4418      	add	r0, r3
 80075e4:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 80075e8:	b948      	cbnz	r0, 80075fe <USBH_LL_SetToggle+0x2a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80075ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80075ee:	00c8      	lsls	r0, r1, #3
 80075f0:	4403      	add	r3, r0
 80075f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  return USBH_OK;
}
 80075f6:	2000      	movs	r0, #0
 80075f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fc:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 80075fe:	4423      	add	r3, r4
 8007600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007604:	e7f7      	b.n	80075f6 <USBH_LL_SetToggle+0x22>

08007606 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007606:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8007608:	f7f8 ffe6 	bl	80005d8 <HAL_Delay>
 800760c:	bd08      	pop	{r3, pc}

0800760e <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800760e:	b118      	cbz	r0, 8007618 <USBH_Get_USB_Status+0xa>
 8007610:	2802      	cmp	r0, #2
 8007612:	d003      	beq.n	800761c <USBH_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBH_OK;
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007614:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007616:	4770      	bx	lr
      usb_status = USBH_OK;
 8007618:	2000      	movs	r0, #0
 800761a:	4770      	bx	lr
      usb_status = USBH_BUSY;
 800761c:	2001      	movs	r0, #1
    break;
 800761e:	4770      	bx	lr

08007620 <USBH_LL_Start>:
{
 8007620:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8007622:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 8007626:	f7f9 ff91 	bl	800154c <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 800762a:	f7ff fff0 	bl	800760e <USBH_Get_USB_Status>
}
 800762e:	bd08      	pop	{r3, pc}

08007630 <USBH_LL_Stop>:
{
 8007630:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8007632:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 8007636:	f7f9 ff9f 	bl	8001578 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 800763a:	f7ff ffe8 	bl	800760e <USBH_Get_USB_Status>
}
 800763e:	bd08      	pop	{r3, pc}

08007640 <USBH_LL_ResetPort>:
{
 8007640:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007642:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 8007646:	f7f9 ffa9 	bl	800159c <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 800764a:	f7ff ffe0 	bl	800760e <USBH_Get_USB_Status>
}
 800764e:	bd08      	pop	{r3, pc}

08007650 <USBH_LL_OpenPipe>:
{
 8007650:	b510      	push	{r4, lr}
 8007652:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007654:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 8007658:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800765c:	9402      	str	r4, [sp, #8]
 800765e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8007662:	9401      	str	r4, [sp, #4]
 8007664:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007668:	9400      	str	r4, [sp, #0]
 800766a:	f7f9 fa1b 	bl	8000aa4 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 800766e:	f7ff ffce 	bl	800760e <USBH_Get_USB_Status>
}
 8007672:	b004      	add	sp, #16
 8007674:	bd10      	pop	{r4, pc}

08007676 <USBH_LL_ClosePipe>:
{
 8007676:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007678:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 800767c:	f7f9 fa62 	bl	8000b44 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007680:	f7ff ffc5 	bl	800760e <USBH_Get_USB_Status>
}
 8007684:	bd08      	pop	{r3, pc}

08007686 <USBH_LL_SubmitURB>:
{
 8007686:	b510      	push	{r4, lr}
 8007688:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800768a:	f8d0 06c4 	ldr.w	r0, [r0, #1732]	; 0x6c4
 800768e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007692:	9403      	str	r4, [sp, #12]
 8007694:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007698:	9402      	str	r4, [sp, #8]
 800769a:	9c07      	ldr	r4, [sp, #28]
 800769c:	9401      	str	r4, [sp, #4]
 800769e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80076a2:	9400      	str	r4, [sp, #0]
 80076a4:	f7f9 faba 	bl	8000c1c <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 80076a8:	f7ff ffb1 	bl	800760e <USBH_Get_USB_Status>
}
 80076ac:	b004      	add	sp, #16
 80076ae:	bd10      	pop	{r4, pc}

080076b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80076b0:	b508      	push	{r3, lr}
  uint8_t data = state; 
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80076b2:	b128      	cbz	r0, 80076c0 <MX_DriverVbusFS+0x10>
    data = GPIO_PIN_SET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80076b4:	2200      	movs	r2, #0
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,(GPIO_PinState)data);
 80076b6:	2102      	movs	r1, #2
 80076b8:	4802      	ldr	r0, [pc, #8]	; (80076c4 <MX_DriverVbusFS+0x14>)
 80076ba:	f7f9 f99b 	bl	80009f4 <HAL_GPIO_WritePin>
 80076be:	bd08      	pop	{r3, pc}
    data = GPIO_PIN_SET;
 80076c0:	2201      	movs	r2, #1
 80076c2:	e7f8      	b.n	80076b6 <MX_DriverVbusFS+0x6>
 80076c4:	40020400 	.word	0x40020400

080076c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80076c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007700 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80076cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80076ce:	e003      	b.n	80076d8 <LoopCopyDataInit>

080076d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80076d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80076d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80076d6:	3104      	adds	r1, #4

080076d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80076d8:	480b      	ldr	r0, [pc, #44]	; (8007708 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80076dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80076de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80076e0:	d3f6      	bcc.n	80076d0 <CopyDataInit>
  ldr  r2, =_sbss
 80076e2:	4a0b      	ldr	r2, [pc, #44]	; (8007710 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80076e4:	e002      	b.n	80076ec <LoopFillZerobss>

080076e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80076e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80076e8:	f842 3b04 	str.w	r3, [r2], #4

080076ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80076ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80076f0:	d3f9      	bcc.n	80076e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80076f2:	f7ff fe35 	bl	8007360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076f6:	f000 f817 	bl	8007728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076fa:	f7ff fc99 	bl	8007030 <main>
  bx  lr    
 80076fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007700:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007704:	08009160 	.word	0x08009160
  ldr  r0, =_sdata
 8007708:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800770c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8007710:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8007714:	20008254 	.word	0x20008254

08007718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007718:	e7fe      	b.n	8007718 <ADC_IRQHandler>
	...

0800771c <__errno>:
 800771c:	4b01      	ldr	r3, [pc, #4]	; (8007724 <__errno+0x8>)
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000030 	.word	0x20000030

08007728 <__libc_init_array>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	4e0d      	ldr	r6, [pc, #52]	; (8007760 <__libc_init_array+0x38>)
 800772c:	4c0d      	ldr	r4, [pc, #52]	; (8007764 <__libc_init_array+0x3c>)
 800772e:	1ba4      	subs	r4, r4, r6
 8007730:	10a4      	asrs	r4, r4, #2
 8007732:	2500      	movs	r5, #0
 8007734:	42a5      	cmp	r5, r4
 8007736:	d109      	bne.n	800774c <__libc_init_array+0x24>
 8007738:	4e0b      	ldr	r6, [pc, #44]	; (8007768 <__libc_init_array+0x40>)
 800773a:	4c0c      	ldr	r4, [pc, #48]	; (800776c <__libc_init_array+0x44>)
 800773c:	f000 ffda 	bl	80086f4 <_init>
 8007740:	1ba4      	subs	r4, r4, r6
 8007742:	10a4      	asrs	r4, r4, #2
 8007744:	2500      	movs	r5, #0
 8007746:	42a5      	cmp	r5, r4
 8007748:	d105      	bne.n	8007756 <__libc_init_array+0x2e>
 800774a:	bd70      	pop	{r4, r5, r6, pc}
 800774c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007750:	4798      	blx	r3
 8007752:	3501      	adds	r5, #1
 8007754:	e7ee      	b.n	8007734 <__libc_init_array+0xc>
 8007756:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800775a:	4798      	blx	r3
 800775c:	3501      	adds	r5, #1
 800775e:	e7f2      	b.n	8007746 <__libc_init_array+0x1e>
 8007760:	08009158 	.word	0x08009158
 8007764:	08009158 	.word	0x08009158
 8007768:	08009158 	.word	0x08009158
 800776c:	0800915c 	.word	0x0800915c

08007770 <free>:
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <free+0xc>)
 8007772:	4601      	mov	r1, r0
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f000 b817 	b.w	80077a8 <_free_r>
 800777a:	bf00      	nop
 800777c:	20000030 	.word	0x20000030

08007780 <memcpy>:
 8007780:	b510      	push	{r4, lr}
 8007782:	1e43      	subs	r3, r0, #1
 8007784:	440a      	add	r2, r1
 8007786:	4291      	cmp	r1, r2
 8007788:	d100      	bne.n	800778c <memcpy+0xc>
 800778a:	bd10      	pop	{r4, pc}
 800778c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007794:	e7f7      	b.n	8007786 <memcpy+0x6>

08007796 <memset>:
 8007796:	4402      	add	r2, r0
 8007798:	4603      	mov	r3, r0
 800779a:	4293      	cmp	r3, r2
 800779c:	d100      	bne.n	80077a0 <memset+0xa>
 800779e:	4770      	bx	lr
 80077a0:	f803 1b01 	strb.w	r1, [r3], #1
 80077a4:	e7f9      	b.n	800779a <memset+0x4>
	...

080077a8 <_free_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4605      	mov	r5, r0
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d045      	beq.n	800783c <_free_r+0x94>
 80077b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b4:	1f0c      	subs	r4, r1, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfb8      	it	lt
 80077ba:	18e4      	addlt	r4, r4, r3
 80077bc:	f000 fbe0 	bl	8007f80 <__malloc_lock>
 80077c0:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <_free_r+0x98>)
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	4610      	mov	r0, r2
 80077c6:	b933      	cbnz	r3, 80077d6 <_free_r+0x2e>
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	6014      	str	r4, [r2, #0]
 80077cc:	4628      	mov	r0, r5
 80077ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077d2:	f000 bbd6 	b.w	8007f82 <__malloc_unlock>
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	d90c      	bls.n	80077f4 <_free_r+0x4c>
 80077da:	6821      	ldr	r1, [r4, #0]
 80077dc:	1862      	adds	r2, r4, r1
 80077de:	4293      	cmp	r3, r2
 80077e0:	bf04      	itt	eq
 80077e2:	681a      	ldreq	r2, [r3, #0]
 80077e4:	685b      	ldreq	r3, [r3, #4]
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	bf04      	itt	eq
 80077ea:	1852      	addeq	r2, r2, r1
 80077ec:	6022      	streq	r2, [r4, #0]
 80077ee:	6004      	str	r4, [r0, #0]
 80077f0:	e7ec      	b.n	80077cc <_free_r+0x24>
 80077f2:	4613      	mov	r3, r2
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	b10a      	cbz	r2, 80077fc <_free_r+0x54>
 80077f8:	42a2      	cmp	r2, r4
 80077fa:	d9fa      	bls.n	80077f2 <_free_r+0x4a>
 80077fc:	6819      	ldr	r1, [r3, #0]
 80077fe:	1858      	adds	r0, r3, r1
 8007800:	42a0      	cmp	r0, r4
 8007802:	d10b      	bne.n	800781c <_free_r+0x74>
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	4401      	add	r1, r0
 8007808:	1858      	adds	r0, r3, r1
 800780a:	4282      	cmp	r2, r0
 800780c:	6019      	str	r1, [r3, #0]
 800780e:	d1dd      	bne.n	80077cc <_free_r+0x24>
 8007810:	6810      	ldr	r0, [r2, #0]
 8007812:	6852      	ldr	r2, [r2, #4]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	4401      	add	r1, r0
 8007818:	6019      	str	r1, [r3, #0]
 800781a:	e7d7      	b.n	80077cc <_free_r+0x24>
 800781c:	d902      	bls.n	8007824 <_free_r+0x7c>
 800781e:	230c      	movs	r3, #12
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	e7d3      	b.n	80077cc <_free_r+0x24>
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	1821      	adds	r1, r4, r0
 8007828:	428a      	cmp	r2, r1
 800782a:	bf04      	itt	eq
 800782c:	6811      	ldreq	r1, [r2, #0]
 800782e:	6852      	ldreq	r2, [r2, #4]
 8007830:	6062      	str	r2, [r4, #4]
 8007832:	bf04      	itt	eq
 8007834:	1809      	addeq	r1, r1, r0
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	605c      	str	r4, [r3, #4]
 800783a:	e7c7      	b.n	80077cc <_free_r+0x24>
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	bf00      	nop
 8007840:	200073b4 	.word	0x200073b4

08007844 <_malloc_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	1ccd      	adds	r5, r1, #3
 8007848:	f025 0503 	bic.w	r5, r5, #3
 800784c:	3508      	adds	r5, #8
 800784e:	2d0c      	cmp	r5, #12
 8007850:	bf38      	it	cc
 8007852:	250c      	movcc	r5, #12
 8007854:	2d00      	cmp	r5, #0
 8007856:	4606      	mov	r6, r0
 8007858:	db01      	blt.n	800785e <_malloc_r+0x1a>
 800785a:	42a9      	cmp	r1, r5
 800785c:	d903      	bls.n	8007866 <_malloc_r+0x22>
 800785e:	230c      	movs	r3, #12
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	2000      	movs	r0, #0
 8007864:	bd70      	pop	{r4, r5, r6, pc}
 8007866:	f000 fb8b 	bl	8007f80 <__malloc_lock>
 800786a:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <_malloc_r+0xb4>)
 800786c:	6814      	ldr	r4, [r2, #0]
 800786e:	4621      	mov	r1, r4
 8007870:	b991      	cbnz	r1, 8007898 <_malloc_r+0x54>
 8007872:	4c22      	ldr	r4, [pc, #136]	; (80078fc <_malloc_r+0xb8>)
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	b91b      	cbnz	r3, 8007880 <_malloc_r+0x3c>
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f8d1 	bl	8007a20 <_sbrk_r>
 800787e:	6020      	str	r0, [r4, #0]
 8007880:	4629      	mov	r1, r5
 8007882:	4630      	mov	r0, r6
 8007884:	f000 f8cc 	bl	8007a20 <_sbrk_r>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d126      	bne.n	80078da <_malloc_r+0x96>
 800788c:	230c      	movs	r3, #12
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	4630      	mov	r0, r6
 8007892:	f000 fb76 	bl	8007f82 <__malloc_unlock>
 8007896:	e7e4      	b.n	8007862 <_malloc_r+0x1e>
 8007898:	680b      	ldr	r3, [r1, #0]
 800789a:	1b5b      	subs	r3, r3, r5
 800789c:	d41a      	bmi.n	80078d4 <_malloc_r+0x90>
 800789e:	2b0b      	cmp	r3, #11
 80078a0:	d90f      	bls.n	80078c2 <_malloc_r+0x7e>
 80078a2:	600b      	str	r3, [r1, #0]
 80078a4:	50cd      	str	r5, [r1, r3]
 80078a6:	18cc      	adds	r4, r1, r3
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 fb6a 	bl	8007f82 <__malloc_unlock>
 80078ae:	f104 000b 	add.w	r0, r4, #11
 80078b2:	1d23      	adds	r3, r4, #4
 80078b4:	f020 0007 	bic.w	r0, r0, #7
 80078b8:	1ac3      	subs	r3, r0, r3
 80078ba:	d01b      	beq.n	80078f4 <_malloc_r+0xb0>
 80078bc:	425a      	negs	r2, r3
 80078be:	50e2      	str	r2, [r4, r3]
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
 80078c2:	428c      	cmp	r4, r1
 80078c4:	bf0d      	iteet	eq
 80078c6:	6863      	ldreq	r3, [r4, #4]
 80078c8:	684b      	ldrne	r3, [r1, #4]
 80078ca:	6063      	strne	r3, [r4, #4]
 80078cc:	6013      	streq	r3, [r2, #0]
 80078ce:	bf18      	it	ne
 80078d0:	460c      	movne	r4, r1
 80078d2:	e7e9      	b.n	80078a8 <_malloc_r+0x64>
 80078d4:	460c      	mov	r4, r1
 80078d6:	6849      	ldr	r1, [r1, #4]
 80078d8:	e7ca      	b.n	8007870 <_malloc_r+0x2c>
 80078da:	1cc4      	adds	r4, r0, #3
 80078dc:	f024 0403 	bic.w	r4, r4, #3
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d005      	beq.n	80078f0 <_malloc_r+0xac>
 80078e4:	1a21      	subs	r1, r4, r0
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 f89a 	bl	8007a20 <_sbrk_r>
 80078ec:	3001      	adds	r0, #1
 80078ee:	d0cd      	beq.n	800788c <_malloc_r+0x48>
 80078f0:	6025      	str	r5, [r4, #0]
 80078f2:	e7d9      	b.n	80078a8 <_malloc_r+0x64>
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
 80078f6:	bf00      	nop
 80078f8:	200073b4 	.word	0x200073b4
 80078fc:	200073b8 	.word	0x200073b8

08007900 <iprintf>:
 8007900:	b40f      	push	{r0, r1, r2, r3}
 8007902:	4b0a      	ldr	r3, [pc, #40]	; (800792c <iprintf+0x2c>)
 8007904:	b513      	push	{r0, r1, r4, lr}
 8007906:	681c      	ldr	r4, [r3, #0]
 8007908:	b124      	cbz	r4, 8007914 <iprintf+0x14>
 800790a:	69a3      	ldr	r3, [r4, #24]
 800790c:	b913      	cbnz	r3, 8007914 <iprintf+0x14>
 800790e:	4620      	mov	r0, r4
 8007910:	f000 fa48 	bl	8007da4 <__sinit>
 8007914:	ab05      	add	r3, sp, #20
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	68a1      	ldr	r1, [r4, #8]
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fb5b 	bl	8007fd8 <_vfiprintf_r>
 8007922:	b002      	add	sp, #8
 8007924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007928:	b004      	add	sp, #16
 800792a:	4770      	bx	lr
 800792c:	20000030 	.word	0x20000030

08007930 <putchar>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4b08      	ldr	r3, [pc, #32]	; (8007954 <putchar+0x24>)
 8007934:	681c      	ldr	r4, [r3, #0]
 8007936:	4605      	mov	r5, r0
 8007938:	b124      	cbz	r4, 8007944 <putchar+0x14>
 800793a:	69a3      	ldr	r3, [r4, #24]
 800793c:	b913      	cbnz	r3, 8007944 <putchar+0x14>
 800793e:	4620      	mov	r0, r4
 8007940:	f000 fa30 	bl	8007da4 <__sinit>
 8007944:	68a2      	ldr	r2, [r4, #8]
 8007946:	4629      	mov	r1, r5
 8007948:	4620      	mov	r0, r4
 800794a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800794e:	f000 bdef 	b.w	8008530 <_putc_r>
 8007952:	bf00      	nop
 8007954:	20000030 	.word	0x20000030

08007958 <_puts_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	460e      	mov	r6, r1
 800795c:	4605      	mov	r5, r0
 800795e:	b118      	cbz	r0, 8007968 <_puts_r+0x10>
 8007960:	6983      	ldr	r3, [r0, #24]
 8007962:	b90b      	cbnz	r3, 8007968 <_puts_r+0x10>
 8007964:	f000 fa1e 	bl	8007da4 <__sinit>
 8007968:	69ab      	ldr	r3, [r5, #24]
 800796a:	68ac      	ldr	r4, [r5, #8]
 800796c:	b913      	cbnz	r3, 8007974 <_puts_r+0x1c>
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fa18 	bl	8007da4 <__sinit>
 8007974:	4b23      	ldr	r3, [pc, #140]	; (8007a04 <_puts_r+0xac>)
 8007976:	429c      	cmp	r4, r3
 8007978:	d117      	bne.n	80079aa <_puts_r+0x52>
 800797a:	686c      	ldr	r4, [r5, #4]
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	071b      	lsls	r3, r3, #28
 8007980:	d51d      	bpl.n	80079be <_puts_r+0x66>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	b1db      	cbz	r3, 80079be <_puts_r+0x66>
 8007986:	3e01      	subs	r6, #1
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800798e:	3b01      	subs	r3, #1
 8007990:	60a3      	str	r3, [r4, #8]
 8007992:	b9e9      	cbnz	r1, 80079d0 <_puts_r+0x78>
 8007994:	2b00      	cmp	r3, #0
 8007996:	da2e      	bge.n	80079f6 <_puts_r+0x9e>
 8007998:	4622      	mov	r2, r4
 800799a:	210a      	movs	r1, #10
 800799c:	4628      	mov	r0, r5
 800799e:	f000 f84f 	bl	8007a40 <__swbuf_r>
 80079a2:	3001      	adds	r0, #1
 80079a4:	d011      	beq.n	80079ca <_puts_r+0x72>
 80079a6:	200a      	movs	r0, #10
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
 80079aa:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <_puts_r+0xb0>)
 80079ac:	429c      	cmp	r4, r3
 80079ae:	d101      	bne.n	80079b4 <_puts_r+0x5c>
 80079b0:	68ac      	ldr	r4, [r5, #8]
 80079b2:	e7e3      	b.n	800797c <_puts_r+0x24>
 80079b4:	4b15      	ldr	r3, [pc, #84]	; (8007a0c <_puts_r+0xb4>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	bf08      	it	eq
 80079ba:	68ec      	ldreq	r4, [r5, #12]
 80079bc:	e7de      	b.n	800797c <_puts_r+0x24>
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 f88f 	bl	8007ae4 <__swsetup_r>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d0dd      	beq.n	8007986 <_puts_r+0x2e>
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da04      	bge.n	80079de <_puts_r+0x86>
 80079d4:	69a2      	ldr	r2, [r4, #24]
 80079d6:	4293      	cmp	r3, r2
 80079d8:	db06      	blt.n	80079e8 <_puts_r+0x90>
 80079da:	290a      	cmp	r1, #10
 80079dc:	d004      	beq.n	80079e8 <_puts_r+0x90>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	7019      	strb	r1, [r3, #0]
 80079e6:	e7cf      	b.n	8007988 <_puts_r+0x30>
 80079e8:	4622      	mov	r2, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f828 	bl	8007a40 <__swbuf_r>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d1c9      	bne.n	8007988 <_puts_r+0x30>
 80079f4:	e7e9      	b.n	80079ca <_puts_r+0x72>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	200a      	movs	r0, #10
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	6022      	str	r2, [r4, #0]
 80079fe:	7018      	strb	r0, [r3, #0]
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
 8007a02:	bf00      	nop
 8007a04:	080090dc 	.word	0x080090dc
 8007a08:	080090fc 	.word	0x080090fc
 8007a0c:	080090bc 	.word	0x080090bc

08007a10 <puts>:
 8007a10:	4b02      	ldr	r3, [pc, #8]	; (8007a1c <puts+0xc>)
 8007a12:	4601      	mov	r1, r0
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	f7ff bf9f 	b.w	8007958 <_puts_r>
 8007a1a:	bf00      	nop
 8007a1c:	20000030 	.word	0x20000030

08007a20 <_sbrk_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4c06      	ldr	r4, [pc, #24]	; (8007a3c <_sbrk_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4605      	mov	r5, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	f7ff fc6e 	bl	800730c <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_sbrk_r+0x1a>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_sbrk_r+0x1a>
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20008250 	.word	0x20008250

08007a40 <__swbuf_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	460e      	mov	r6, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	4605      	mov	r5, r0
 8007a48:	b118      	cbz	r0, 8007a52 <__swbuf_r+0x12>
 8007a4a:	6983      	ldr	r3, [r0, #24]
 8007a4c:	b90b      	cbnz	r3, 8007a52 <__swbuf_r+0x12>
 8007a4e:	f000 f9a9 	bl	8007da4 <__sinit>
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <__swbuf_r+0x98>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	d12a      	bne.n	8007aae <__swbuf_r+0x6e>
 8007a58:	686c      	ldr	r4, [r5, #4]
 8007a5a:	69a3      	ldr	r3, [r4, #24]
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	071a      	lsls	r2, r3, #28
 8007a62:	d52e      	bpl.n	8007ac2 <__swbuf_r+0x82>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	b363      	cbz	r3, 8007ac2 <__swbuf_r+0x82>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	1ac0      	subs	r0, r0, r3
 8007a6e:	6963      	ldr	r3, [r4, #20]
 8007a70:	b2f6      	uxtb	r6, r6
 8007a72:	4298      	cmp	r0, r3
 8007a74:	4637      	mov	r7, r6
 8007a76:	db04      	blt.n	8007a82 <__swbuf_r+0x42>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f928 	bl	8007cd0 <_fflush_r>
 8007a80:	bb28      	cbnz	r0, 8007ace <__swbuf_r+0x8e>
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	60a3      	str	r3, [r4, #8]
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	6022      	str	r2, [r4, #0]
 8007a8e:	701e      	strb	r6, [r3, #0]
 8007a90:	6963      	ldr	r3, [r4, #20]
 8007a92:	3001      	adds	r0, #1
 8007a94:	4298      	cmp	r0, r3
 8007a96:	d004      	beq.n	8007aa2 <__swbuf_r+0x62>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	07db      	lsls	r3, r3, #31
 8007a9c:	d519      	bpl.n	8007ad2 <__swbuf_r+0x92>
 8007a9e:	2e0a      	cmp	r6, #10
 8007aa0:	d117      	bne.n	8007ad2 <__swbuf_r+0x92>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 f913 	bl	8007cd0 <_fflush_r>
 8007aaa:	b190      	cbz	r0, 8007ad2 <__swbuf_r+0x92>
 8007aac:	e00f      	b.n	8007ace <__swbuf_r+0x8e>
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <__swbuf_r+0x9c>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	d101      	bne.n	8007ab8 <__swbuf_r+0x78>
 8007ab4:	68ac      	ldr	r4, [r5, #8]
 8007ab6:	e7d0      	b.n	8007a5a <__swbuf_r+0x1a>
 8007ab8:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <__swbuf_r+0xa0>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	bf08      	it	eq
 8007abe:	68ec      	ldreq	r4, [r5, #12]
 8007ac0:	e7cb      	b.n	8007a5a <__swbuf_r+0x1a>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f80d 	bl	8007ae4 <__swsetup_r>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0cc      	beq.n	8007a68 <__swbuf_r+0x28>
 8007ace:	f04f 37ff 	mov.w	r7, #4294967295
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	080090dc 	.word	0x080090dc
 8007adc:	080090fc 	.word	0x080090fc
 8007ae0:	080090bc 	.word	0x080090bc

08007ae4 <__swsetup_r>:
 8007ae4:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <__swsetup_r+0xcc>)
 8007ae6:	b570      	push	{r4, r5, r6, lr}
 8007ae8:	681d      	ldr	r5, [r3, #0]
 8007aea:	4606      	mov	r6, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	b125      	cbz	r5, 8007afa <__swsetup_r+0x16>
 8007af0:	69ab      	ldr	r3, [r5, #24]
 8007af2:	b913      	cbnz	r3, 8007afa <__swsetup_r+0x16>
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 f955 	bl	8007da4 <__sinit>
 8007afa:	4b2e      	ldr	r3, [pc, #184]	; (8007bb4 <__swsetup_r+0xd0>)
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d10f      	bne.n	8007b20 <__swsetup_r+0x3c>
 8007b00:	686c      	ldr	r4, [r5, #4]
 8007b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	0715      	lsls	r5, r2, #28
 8007b0a:	d42c      	bmi.n	8007b66 <__swsetup_r+0x82>
 8007b0c:	06d0      	lsls	r0, r2, #27
 8007b0e:	d411      	bmi.n	8007b34 <__swsetup_r+0x50>
 8007b10:	2209      	movs	r2, #9
 8007b12:	6032      	str	r2, [r6, #0]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <__swsetup_r+0xd4>)
 8007b22:	429c      	cmp	r4, r3
 8007b24:	d101      	bne.n	8007b2a <__swsetup_r+0x46>
 8007b26:	68ac      	ldr	r4, [r5, #8]
 8007b28:	e7eb      	b.n	8007b02 <__swsetup_r+0x1e>
 8007b2a:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <__swsetup_r+0xd8>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	bf08      	it	eq
 8007b30:	68ec      	ldreq	r4, [r5, #12]
 8007b32:	e7e6      	b.n	8007b02 <__swsetup_r+0x1e>
 8007b34:	0751      	lsls	r1, r2, #29
 8007b36:	d512      	bpl.n	8007b5e <__swsetup_r+0x7a>
 8007b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3a:	b141      	cbz	r1, 8007b4e <__swsetup_r+0x6a>
 8007b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b40:	4299      	cmp	r1, r3
 8007b42:	d002      	beq.n	8007b4a <__swsetup_r+0x66>
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff fe2f 	bl	80077a8 <_free_r>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	2300      	movs	r3, #0
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f043 0308 	orr.w	r3, r3, #8
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	b94b      	cbnz	r3, 8007b7e <__swsetup_r+0x9a>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b74:	d003      	beq.n	8007b7e <__swsetup_r+0x9a>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f9c1 	bl	8007f00 <__smakebuf_r>
 8007b7e:	89a2      	ldrh	r2, [r4, #12]
 8007b80:	f012 0301 	ands.w	r3, r2, #1
 8007b84:	d00c      	beq.n	8007ba0 <__swsetup_r+0xbc>
 8007b86:	2300      	movs	r3, #0
 8007b88:	60a3      	str	r3, [r4, #8]
 8007b8a:	6963      	ldr	r3, [r4, #20]
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	61a3      	str	r3, [r4, #24]
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	b953      	cbnz	r3, 8007baa <__swsetup_r+0xc6>
 8007b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b9c:	d1ba      	bne.n	8007b14 <__swsetup_r+0x30>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	0792      	lsls	r2, r2, #30
 8007ba2:	bf58      	it	pl
 8007ba4:	6963      	ldrpl	r3, [r4, #20]
 8007ba6:	60a3      	str	r3, [r4, #8]
 8007ba8:	e7f2      	b.n	8007b90 <__swsetup_r+0xac>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e7f7      	b.n	8007b9e <__swsetup_r+0xba>
 8007bae:	bf00      	nop
 8007bb0:	20000030 	.word	0x20000030
 8007bb4:	080090dc 	.word	0x080090dc
 8007bb8:	080090fc 	.word	0x080090fc
 8007bbc:	080090bc 	.word	0x080090bc

08007bc0 <__sflush_r>:
 8007bc0:	898a      	ldrh	r2, [r1, #12]
 8007bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	0710      	lsls	r0, r2, #28
 8007bca:	460c      	mov	r4, r1
 8007bcc:	d45a      	bmi.n	8007c84 <__sflush_r+0xc4>
 8007bce:	684b      	ldr	r3, [r1, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dc05      	bgt.n	8007be0 <__sflush_r+0x20>
 8007bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dc02      	bgt.n	8007be0 <__sflush_r+0x20>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	d0f9      	beq.n	8007bda <__sflush_r+0x1a>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bec:	682f      	ldr	r7, [r5, #0]
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	d033      	beq.n	8007c5a <__sflush_r+0x9a>
 8007bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	075a      	lsls	r2, r3, #29
 8007bf8:	d505      	bpl.n	8007c06 <__sflush_r+0x46>
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	1ac0      	subs	r0, r0, r3
 8007bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c00:	b10b      	cbz	r3, 8007c06 <__sflush_r+0x46>
 8007c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c04:	1ac0      	subs	r0, r0, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c0c:	6a21      	ldr	r1, [r4, #32]
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b0      	blx	r6
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	d106      	bne.n	8007c26 <__sflush_r+0x66>
 8007c18:	6829      	ldr	r1, [r5, #0]
 8007c1a:	291d      	cmp	r1, #29
 8007c1c:	d84b      	bhi.n	8007cb6 <__sflush_r+0xf6>
 8007c1e:	4a2b      	ldr	r2, [pc, #172]	; (8007ccc <__sflush_r+0x10c>)
 8007c20:	40ca      	lsrs	r2, r1
 8007c22:	07d6      	lsls	r6, r2, #31
 8007c24:	d547      	bpl.n	8007cb6 <__sflush_r+0xf6>
 8007c26:	2200      	movs	r2, #0
 8007c28:	6062      	str	r2, [r4, #4]
 8007c2a:	04d9      	lsls	r1, r3, #19
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	d504      	bpl.n	8007c3c <__sflush_r+0x7c>
 8007c32:	1c42      	adds	r2, r0, #1
 8007c34:	d101      	bne.n	8007c3a <__sflush_r+0x7a>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b903      	cbnz	r3, 8007c3c <__sflush_r+0x7c>
 8007c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c3e:	602f      	str	r7, [r5, #0]
 8007c40:	2900      	cmp	r1, #0
 8007c42:	d0ca      	beq.n	8007bda <__sflush_r+0x1a>
 8007c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	d002      	beq.n	8007c52 <__sflush_r+0x92>
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f7ff fdab 	bl	80077a8 <_free_r>
 8007c52:	2000      	movs	r0, #0
 8007c54:	6360      	str	r0, [r4, #52]	; 0x34
 8007c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5a:	6a21      	ldr	r1, [r4, #32]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b0      	blx	r6
 8007c62:	1c41      	adds	r1, r0, #1
 8007c64:	d1c6      	bne.n	8007bf4 <__sflush_r+0x34>
 8007c66:	682b      	ldr	r3, [r5, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0c3      	beq.n	8007bf4 <__sflush_r+0x34>
 8007c6c:	2b1d      	cmp	r3, #29
 8007c6e:	d001      	beq.n	8007c74 <__sflush_r+0xb4>
 8007c70:	2b16      	cmp	r3, #22
 8007c72:	d101      	bne.n	8007c78 <__sflush_r+0xb8>
 8007c74:	602f      	str	r7, [r5, #0]
 8007c76:	e7b0      	b.n	8007bda <__sflush_r+0x1a>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c84:	690f      	ldr	r7, [r1, #16]
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	d0a7      	beq.n	8007bda <__sflush_r+0x1a>
 8007c8a:	0793      	lsls	r3, r2, #30
 8007c8c:	680e      	ldr	r6, [r1, #0]
 8007c8e:	bf08      	it	eq
 8007c90:	694b      	ldreq	r3, [r1, #20]
 8007c92:	600f      	str	r7, [r1, #0]
 8007c94:	bf18      	it	ne
 8007c96:	2300      	movne	r3, #0
 8007c98:	eba6 0807 	sub.w	r8, r6, r7
 8007c9c:	608b      	str	r3, [r1, #8]
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	dd9a      	ble.n	8007bda <__sflush_r+0x1a>
 8007ca4:	4643      	mov	r3, r8
 8007ca6:	463a      	mov	r2, r7
 8007ca8:	6a21      	ldr	r1, [r4, #32]
 8007caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b0      	blx	r6
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	dc07      	bgt.n	8007cc4 <__sflush_r+0x104>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	4407      	add	r7, r0
 8007cc6:	eba8 0800 	sub.w	r8, r8, r0
 8007cca:	e7e8      	b.n	8007c9e <__sflush_r+0xde>
 8007ccc:	20400001 	.word	0x20400001

08007cd0 <_fflush_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	690b      	ldr	r3, [r1, #16]
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	b1db      	cbz	r3, 8007d12 <_fflush_r+0x42>
 8007cda:	b118      	cbz	r0, 8007ce4 <_fflush_r+0x14>
 8007cdc:	6983      	ldr	r3, [r0, #24]
 8007cde:	b90b      	cbnz	r3, 8007ce4 <_fflush_r+0x14>
 8007ce0:	f000 f860 	bl	8007da4 <__sinit>
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <_fflush_r+0x48>)
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d109      	bne.n	8007cfe <_fflush_r+0x2e>
 8007cea:	686c      	ldr	r4, [r5, #4]
 8007cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf0:	b17b      	cbz	r3, 8007d12 <_fflush_r+0x42>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cfa:	f7ff bf61 	b.w	8007bc0 <__sflush_r>
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <_fflush_r+0x4c>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d101      	bne.n	8007d08 <_fflush_r+0x38>
 8007d04:	68ac      	ldr	r4, [r5, #8]
 8007d06:	e7f1      	b.n	8007cec <_fflush_r+0x1c>
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <_fflush_r+0x50>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	bf08      	it	eq
 8007d0e:	68ec      	ldreq	r4, [r5, #12]
 8007d10:	e7ec      	b.n	8007cec <_fflush_r+0x1c>
 8007d12:	2000      	movs	r0, #0
 8007d14:	bd38      	pop	{r3, r4, r5, pc}
 8007d16:	bf00      	nop
 8007d18:	080090dc 	.word	0x080090dc
 8007d1c:	080090fc 	.word	0x080090fc
 8007d20:	080090bc 	.word	0x080090bc

08007d24 <_cleanup_r>:
 8007d24:	4901      	ldr	r1, [pc, #4]	; (8007d2c <_cleanup_r+0x8>)
 8007d26:	f000 b8a9 	b.w	8007e7c <_fwalk_reent>
 8007d2a:	bf00      	nop
 8007d2c:	08007cd1 	.word	0x08007cd1

08007d30 <std.isra.0>:
 8007d30:	2300      	movs	r3, #0
 8007d32:	b510      	push	{r4, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	6003      	str	r3, [r0, #0]
 8007d38:	6043      	str	r3, [r0, #4]
 8007d3a:	6083      	str	r3, [r0, #8]
 8007d3c:	8181      	strh	r1, [r0, #12]
 8007d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d40:	81c2      	strh	r2, [r0, #14]
 8007d42:	6103      	str	r3, [r0, #16]
 8007d44:	6143      	str	r3, [r0, #20]
 8007d46:	6183      	str	r3, [r0, #24]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	305c      	adds	r0, #92	; 0x5c
 8007d4e:	f7ff fd22 	bl	8007796 <memset>
 8007d52:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <std.isra.0+0x38>)
 8007d54:	6263      	str	r3, [r4, #36]	; 0x24
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <std.isra.0+0x3c>)
 8007d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <std.isra.0+0x40>)
 8007d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <std.isra.0+0x44>)
 8007d60:	6224      	str	r4, [r4, #32]
 8007d62:	6323      	str	r3, [r4, #48]	; 0x30
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	0800859d 	.word	0x0800859d
 8007d6c:	080085bf 	.word	0x080085bf
 8007d70:	080085f7 	.word	0x080085f7
 8007d74:	0800861b 	.word	0x0800861b

08007d78 <__sfmoreglue>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	1e4a      	subs	r2, r1, #1
 8007d7c:	2568      	movs	r5, #104	; 0x68
 8007d7e:	4355      	muls	r5, r2
 8007d80:	460e      	mov	r6, r1
 8007d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d86:	f7ff fd5d 	bl	8007844 <_malloc_r>
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	b140      	cbz	r0, 8007da0 <__sfmoreglue+0x28>
 8007d8e:	2100      	movs	r1, #0
 8007d90:	e880 0042 	stmia.w	r0, {r1, r6}
 8007d94:	300c      	adds	r0, #12
 8007d96:	60a0      	str	r0, [r4, #8]
 8007d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d9c:	f7ff fcfb 	bl	8007796 <memset>
 8007da0:	4620      	mov	r0, r4
 8007da2:	bd70      	pop	{r4, r5, r6, pc}

08007da4 <__sinit>:
 8007da4:	6983      	ldr	r3, [r0, #24]
 8007da6:	b510      	push	{r4, lr}
 8007da8:	4604      	mov	r4, r0
 8007daa:	bb33      	cbnz	r3, 8007dfa <__sinit+0x56>
 8007dac:	6483      	str	r3, [r0, #72]	; 0x48
 8007dae:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007db0:	6503      	str	r3, [r0, #80]	; 0x50
 8007db2:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <__sinit+0x58>)
 8007db4:	4a12      	ldr	r2, [pc, #72]	; (8007e00 <__sinit+0x5c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6282      	str	r2, [r0, #40]	; 0x28
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	bf04      	itt	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	6183      	streq	r3, [r0, #24]
 8007dc2:	f000 f81f 	bl	8007e04 <__sfp>
 8007dc6:	6060      	str	r0, [r4, #4]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 f81b 	bl	8007e04 <__sfp>
 8007dce:	60a0      	str	r0, [r4, #8]
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 f817 	bl	8007e04 <__sfp>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	60e0      	str	r0, [r4, #12]
 8007dda:	2104      	movs	r1, #4
 8007ddc:	6860      	ldr	r0, [r4, #4]
 8007dde:	f7ff ffa7 	bl	8007d30 <std.isra.0>
 8007de2:	2201      	movs	r2, #1
 8007de4:	2109      	movs	r1, #9
 8007de6:	68a0      	ldr	r0, [r4, #8]
 8007de8:	f7ff ffa2 	bl	8007d30 <std.isra.0>
 8007dec:	2202      	movs	r2, #2
 8007dee:	2112      	movs	r1, #18
 8007df0:	68e0      	ldr	r0, [r4, #12]
 8007df2:	f7ff ff9d 	bl	8007d30 <std.isra.0>
 8007df6:	2301      	movs	r3, #1
 8007df8:	61a3      	str	r3, [r4, #24]
 8007dfa:	bd10      	pop	{r4, pc}
 8007dfc:	080090b8 	.word	0x080090b8
 8007e00:	08007d25 	.word	0x08007d25

08007e04 <__sfp>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <__sfp+0x74>)
 8007e08:	681e      	ldr	r6, [r3, #0]
 8007e0a:	69b3      	ldr	r3, [r6, #24]
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	b913      	cbnz	r3, 8007e16 <__sfp+0x12>
 8007e10:	4630      	mov	r0, r6
 8007e12:	f7ff ffc7 	bl	8007da4 <__sinit>
 8007e16:	3648      	adds	r6, #72	; 0x48
 8007e18:	68b4      	ldr	r4, [r6, #8]
 8007e1a:	6873      	ldr	r3, [r6, #4]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	d503      	bpl.n	8007e28 <__sfp+0x24>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	b133      	cbz	r3, 8007e32 <__sfp+0x2e>
 8007e24:	6836      	ldr	r6, [r6, #0]
 8007e26:	e7f7      	b.n	8007e18 <__sfp+0x14>
 8007e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e2c:	b16d      	cbz	r5, 8007e4a <__sfp+0x46>
 8007e2e:	3468      	adds	r4, #104	; 0x68
 8007e30:	e7f4      	b.n	8007e1c <__sfp+0x18>
 8007e32:	2104      	movs	r1, #4
 8007e34:	4638      	mov	r0, r7
 8007e36:	f7ff ff9f 	bl	8007d78 <__sfmoreglue>
 8007e3a:	6030      	str	r0, [r6, #0]
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d1f1      	bne.n	8007e24 <__sfp+0x20>
 8007e40:	230c      	movs	r3, #12
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4604      	mov	r4, r0
 8007e46:	4620      	mov	r0, r4
 8007e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e4e:	81e3      	strh	r3, [r4, #14]
 8007e50:	2301      	movs	r3, #1
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	6665      	str	r5, [r4, #100]	; 0x64
 8007e56:	6025      	str	r5, [r4, #0]
 8007e58:	60a5      	str	r5, [r4, #8]
 8007e5a:	6065      	str	r5, [r4, #4]
 8007e5c:	6125      	str	r5, [r4, #16]
 8007e5e:	6165      	str	r5, [r4, #20]
 8007e60:	61a5      	str	r5, [r4, #24]
 8007e62:	2208      	movs	r2, #8
 8007e64:	4629      	mov	r1, r5
 8007e66:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e6a:	f7ff fc94 	bl	8007796 <memset>
 8007e6e:	6365      	str	r5, [r4, #52]	; 0x34
 8007e70:	63a5      	str	r5, [r4, #56]	; 0x38
 8007e72:	64a5      	str	r5, [r4, #72]	; 0x48
 8007e74:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007e76:	e7e6      	b.n	8007e46 <__sfp+0x42>
 8007e78:	080090b8 	.word	0x080090b8

08007e7c <_fwalk_reent>:
 8007e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e80:	4680      	mov	r8, r0
 8007e82:	4689      	mov	r9, r1
 8007e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e88:	2600      	movs	r6, #0
 8007e8a:	b914      	cbnz	r4, 8007e92 <_fwalk_reent+0x16>
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e92:	68a5      	ldr	r5, [r4, #8]
 8007e94:	6867      	ldr	r7, [r4, #4]
 8007e96:	3f01      	subs	r7, #1
 8007e98:	d501      	bpl.n	8007e9e <_fwalk_reent+0x22>
 8007e9a:	6824      	ldr	r4, [r4, #0]
 8007e9c:	e7f5      	b.n	8007e8a <_fwalk_reent+0xe>
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d907      	bls.n	8007eb4 <_fwalk_reent+0x38>
 8007ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	d003      	beq.n	8007eb4 <_fwalk_reent+0x38>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4640      	mov	r0, r8
 8007eb0:	47c8      	blx	r9
 8007eb2:	4306      	orrs	r6, r0
 8007eb4:	3568      	adds	r5, #104	; 0x68
 8007eb6:	e7ee      	b.n	8007e96 <_fwalk_reent+0x1a>

08007eb8 <__swhatbuf_r>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	460e      	mov	r6, r1
 8007ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	b090      	sub	sp, #64	; 0x40
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	da07      	bge.n	8007eda <__swhatbuf_r+0x22>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	89b3      	ldrh	r3, [r6, #12]
 8007ed0:	061a      	lsls	r2, r3, #24
 8007ed2:	d410      	bmi.n	8007ef6 <__swhatbuf_r+0x3e>
 8007ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed8:	e00e      	b.n	8007ef8 <__swhatbuf_r+0x40>
 8007eda:	aa01      	add	r2, sp, #4
 8007edc:	f000 fbc4 	bl	8008668 <_fstat_r>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dbf2      	blt.n	8007eca <__swhatbuf_r+0x12>
 8007ee4:	9a02      	ldr	r2, [sp, #8]
 8007ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eee:	425a      	negs	r2, r3
 8007ef0:	415a      	adcs	r2, r3
 8007ef2:	602a      	str	r2, [r5, #0]
 8007ef4:	e7ee      	b.n	8007ed4 <__swhatbuf_r+0x1c>
 8007ef6:	2340      	movs	r3, #64	; 0x40
 8007ef8:	2000      	movs	r0, #0
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	b010      	add	sp, #64	; 0x40
 8007efe:	bd70      	pop	{r4, r5, r6, pc}

08007f00 <__smakebuf_r>:
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f04:	079d      	lsls	r5, r3, #30
 8007f06:	4606      	mov	r6, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	d507      	bpl.n	8007f1c <__smakebuf_r+0x1c>
 8007f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	2301      	movs	r3, #1
 8007f16:	6163      	str	r3, [r4, #20]
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	ab01      	add	r3, sp, #4
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f7ff ffca 	bl	8007eb8 <__swhatbuf_r>
 8007f24:	9900      	ldr	r1, [sp, #0]
 8007f26:	4605      	mov	r5, r0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff fc8b 	bl	8007844 <_malloc_r>
 8007f2e:	b948      	cbnz	r0, 8007f44 <__smakebuf_r+0x44>
 8007f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f34:	059a      	lsls	r2, r3, #22
 8007f36:	d4ef      	bmi.n	8007f18 <__smakebuf_r+0x18>
 8007f38:	f023 0303 	bic.w	r3, r3, #3
 8007f3c:	f043 0302 	orr.w	r3, r3, #2
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	e7e3      	b.n	8007f0c <__smakebuf_r+0xc>
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <__smakebuf_r+0x7c>)
 8007f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	6020      	str	r0, [r4, #0]
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	9b00      	ldr	r3, [sp, #0]
 8007f54:	6163      	str	r3, [r4, #20]
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	6120      	str	r0, [r4, #16]
 8007f5a:	b15b      	cbz	r3, 8007f74 <__smakebuf_r+0x74>
 8007f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 fb93 	bl	800868c <_isatty_r>
 8007f66:	b128      	cbz	r0, 8007f74 <__smakebuf_r+0x74>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	431d      	orrs	r5, r3
 8007f78:	81a5      	strh	r5, [r4, #12]
 8007f7a:	e7cd      	b.n	8007f18 <__smakebuf_r+0x18>
 8007f7c:	08007d25 	.word	0x08007d25

08007f80 <__malloc_lock>:
 8007f80:	4770      	bx	lr

08007f82 <__malloc_unlock>:
 8007f82:	4770      	bx	lr

08007f84 <__sfputc_r>:
 8007f84:	6893      	ldr	r3, [r2, #8]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	b410      	push	{r4}
 8007f8c:	6093      	str	r3, [r2, #8]
 8007f8e:	da09      	bge.n	8007fa4 <__sfputc_r+0x20>
 8007f90:	6994      	ldr	r4, [r2, #24]
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	db02      	blt.n	8007f9c <__sfputc_r+0x18>
 8007f96:	b2cb      	uxtb	r3, r1
 8007f98:	2b0a      	cmp	r3, #10
 8007f9a:	d103      	bne.n	8007fa4 <__sfputc_r+0x20>
 8007f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa0:	f7ff bd4e 	b.w	8007a40 <__swbuf_r>
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	1c58      	adds	r0, r3, #1
 8007fa8:	6010      	str	r0, [r2, #0]
 8007faa:	7019      	strb	r1, [r3, #0]
 8007fac:	b2c8      	uxtb	r0, r1
 8007fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <__sfputs_r>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460f      	mov	r7, r1
 8007fba:	4614      	mov	r4, r2
 8007fbc:	18d5      	adds	r5, r2, r3
 8007fbe:	42ac      	cmp	r4, r5
 8007fc0:	d101      	bne.n	8007fc6 <__sfputs_r+0x12>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e007      	b.n	8007fd6 <__sfputs_r+0x22>
 8007fc6:	463a      	mov	r2, r7
 8007fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ffd9 	bl	8007f84 <__sfputc_r>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	d1f3      	bne.n	8007fbe <__sfputs_r+0xa>
 8007fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fd8 <_vfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	b09d      	sub	sp, #116	; 0x74
 8007fde:	460c      	mov	r4, r1
 8007fe0:	4617      	mov	r7, r2
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	b118      	cbz	r0, 8007ff0 <_vfiprintf_r+0x18>
 8007fe8:	6983      	ldr	r3, [r0, #24]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x18>
 8007fec:	f7ff feda 	bl	8007da4 <__sinit>
 8007ff0:	4b7c      	ldr	r3, [pc, #496]	; (80081e4 <_vfiprintf_r+0x20c>)
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d157      	bne.n	80080a6 <_vfiprintf_r+0xce>
 8007ff6:	6874      	ldr	r4, [r6, #4]
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	0718      	lsls	r0, r3, #28
 8007ffc:	d55d      	bpl.n	80080ba <_vfiprintf_r+0xe2>
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d05a      	beq.n	80080ba <_vfiprintf_r+0xe2>
 8008004:	2300      	movs	r3, #0
 8008006:	9309      	str	r3, [sp, #36]	; 0x24
 8008008:	2320      	movs	r3, #32
 800800a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800800e:	2330      	movs	r3, #48	; 0x30
 8008010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008014:	f04f 0b01 	mov.w	fp, #1
 8008018:	46b8      	mov	r8, r7
 800801a:	4645      	mov	r5, r8
 800801c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d155      	bne.n	80080d0 <_vfiprintf_r+0xf8>
 8008024:	ebb8 0a07 	subs.w	sl, r8, r7
 8008028:	d00b      	beq.n	8008042 <_vfiprintf_r+0x6a>
 800802a:	4653      	mov	r3, sl
 800802c:	463a      	mov	r2, r7
 800802e:	4621      	mov	r1, r4
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff ffbf 	bl	8007fb4 <__sfputs_r>
 8008036:	3001      	adds	r0, #1
 8008038:	f000 80c4 	beq.w	80081c4 <_vfiprintf_r+0x1ec>
 800803c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803e:	4453      	add	r3, sl
 8008040:	9309      	str	r3, [sp, #36]	; 0x24
 8008042:	f898 3000 	ldrb.w	r3, [r8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 80bc 	beq.w	80081c4 <_vfiprintf_r+0x1ec>
 800804c:	2300      	movs	r3, #0
 800804e:	f04f 32ff 	mov.w	r2, #4294967295
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	9307      	str	r3, [sp, #28]
 8008056:	9205      	str	r2, [sp, #20]
 8008058:	9306      	str	r3, [sp, #24]
 800805a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800805e:	931a      	str	r3, [sp, #104]	; 0x68
 8008060:	2205      	movs	r2, #5
 8008062:	7829      	ldrb	r1, [r5, #0]
 8008064:	4860      	ldr	r0, [pc, #384]	; (80081e8 <_vfiprintf_r+0x210>)
 8008066:	f7f8 f8b3 	bl	80001d0 <memchr>
 800806a:	f105 0801 	add.w	r8, r5, #1
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	2800      	cmp	r0, #0
 8008072:	d131      	bne.n	80080d8 <_vfiprintf_r+0x100>
 8008074:	06d9      	lsls	r1, r3, #27
 8008076:	bf44      	itt	mi
 8008078:	2220      	movmi	r2, #32
 800807a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800807e:	071a      	lsls	r2, r3, #28
 8008080:	bf44      	itt	mi
 8008082:	222b      	movmi	r2, #43	; 0x2b
 8008084:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008088:	782a      	ldrb	r2, [r5, #0]
 800808a:	2a2a      	cmp	r2, #42	; 0x2a
 800808c:	d02c      	beq.n	80080e8 <_vfiprintf_r+0x110>
 800808e:	9a07      	ldr	r2, [sp, #28]
 8008090:	2100      	movs	r1, #0
 8008092:	200a      	movs	r0, #10
 8008094:	46a8      	mov	r8, r5
 8008096:	3501      	adds	r5, #1
 8008098:	f898 3000 	ldrb.w	r3, [r8]
 800809c:	3b30      	subs	r3, #48	; 0x30
 800809e:	2b09      	cmp	r3, #9
 80080a0:	d96d      	bls.n	800817e <_vfiprintf_r+0x1a6>
 80080a2:	b371      	cbz	r1, 8008102 <_vfiprintf_r+0x12a>
 80080a4:	e026      	b.n	80080f4 <_vfiprintf_r+0x11c>
 80080a6:	4b51      	ldr	r3, [pc, #324]	; (80081ec <_vfiprintf_r+0x214>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	d101      	bne.n	80080b0 <_vfiprintf_r+0xd8>
 80080ac:	68b4      	ldr	r4, [r6, #8]
 80080ae:	e7a3      	b.n	8007ff8 <_vfiprintf_r+0x20>
 80080b0:	4b4f      	ldr	r3, [pc, #316]	; (80081f0 <_vfiprintf_r+0x218>)
 80080b2:	429c      	cmp	r4, r3
 80080b4:	bf08      	it	eq
 80080b6:	68f4      	ldreq	r4, [r6, #12]
 80080b8:	e79e      	b.n	8007ff8 <_vfiprintf_r+0x20>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff fd11 	bl	8007ae4 <__swsetup_r>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d09e      	beq.n	8008004 <_vfiprintf_r+0x2c>
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ca:	b01d      	add	sp, #116	; 0x74
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	2b25      	cmp	r3, #37	; 0x25
 80080d2:	d0a7      	beq.n	8008024 <_vfiprintf_r+0x4c>
 80080d4:	46a8      	mov	r8, r5
 80080d6:	e7a0      	b.n	800801a <_vfiprintf_r+0x42>
 80080d8:	4a43      	ldr	r2, [pc, #268]	; (80081e8 <_vfiprintf_r+0x210>)
 80080da:	1a80      	subs	r0, r0, r2
 80080dc:	fa0b f000 	lsl.w	r0, fp, r0
 80080e0:	4318      	orrs	r0, r3
 80080e2:	9004      	str	r0, [sp, #16]
 80080e4:	4645      	mov	r5, r8
 80080e6:	e7bb      	b.n	8008060 <_vfiprintf_r+0x88>
 80080e8:	9a03      	ldr	r2, [sp, #12]
 80080ea:	1d11      	adds	r1, r2, #4
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	9103      	str	r1, [sp, #12]
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	db01      	blt.n	80080f8 <_vfiprintf_r+0x120>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e004      	b.n	8008102 <_vfiprintf_r+0x12a>
 80080f8:	4252      	negs	r2, r2
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	9207      	str	r2, [sp, #28]
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	f898 3000 	ldrb.w	r3, [r8]
 8008106:	2b2e      	cmp	r3, #46	; 0x2e
 8008108:	d110      	bne.n	800812c <_vfiprintf_r+0x154>
 800810a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800810e:	2b2a      	cmp	r3, #42	; 0x2a
 8008110:	f108 0101 	add.w	r1, r8, #1
 8008114:	d137      	bne.n	8008186 <_vfiprintf_r+0x1ae>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	9203      	str	r2, [sp, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfb8      	it	lt
 8008122:	f04f 33ff 	movlt.w	r3, #4294967295
 8008126:	f108 0802 	add.w	r8, r8, #2
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	4d31      	ldr	r5, [pc, #196]	; (80081f4 <_vfiprintf_r+0x21c>)
 800812e:	f898 1000 	ldrb.w	r1, [r8]
 8008132:	2203      	movs	r2, #3
 8008134:	4628      	mov	r0, r5
 8008136:	f7f8 f84b 	bl	80001d0 <memchr>
 800813a:	b140      	cbz	r0, 800814e <_vfiprintf_r+0x176>
 800813c:	2340      	movs	r3, #64	; 0x40
 800813e:	1b40      	subs	r0, r0, r5
 8008140:	fa03 f000 	lsl.w	r0, r3, r0
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	4303      	orrs	r3, r0
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	f108 0801 	add.w	r8, r8, #1
 800814e:	f898 1000 	ldrb.w	r1, [r8]
 8008152:	4829      	ldr	r0, [pc, #164]	; (80081f8 <_vfiprintf_r+0x220>)
 8008154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008158:	2206      	movs	r2, #6
 800815a:	f108 0701 	add.w	r7, r8, #1
 800815e:	f7f8 f837 	bl	80001d0 <memchr>
 8008162:	2800      	cmp	r0, #0
 8008164:	d034      	beq.n	80081d0 <_vfiprintf_r+0x1f8>
 8008166:	4b25      	ldr	r3, [pc, #148]	; (80081fc <_vfiprintf_r+0x224>)
 8008168:	bb03      	cbnz	r3, 80081ac <_vfiprintf_r+0x1d4>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	3307      	adds	r3, #7
 800816e:	f023 0307 	bic.w	r3, r3, #7
 8008172:	3308      	adds	r3, #8
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	444b      	add	r3, r9
 800817a:	9309      	str	r3, [sp, #36]	; 0x24
 800817c:	e74c      	b.n	8008018 <_vfiprintf_r+0x40>
 800817e:	fb00 3202 	mla	r2, r0, r2, r3
 8008182:	2101      	movs	r1, #1
 8008184:	e786      	b.n	8008094 <_vfiprintf_r+0xbc>
 8008186:	2300      	movs	r3, #0
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	4618      	mov	r0, r3
 800818c:	250a      	movs	r5, #10
 800818e:	4688      	mov	r8, r1
 8008190:	3101      	adds	r1, #1
 8008192:	f898 2000 	ldrb.w	r2, [r8]
 8008196:	3a30      	subs	r2, #48	; 0x30
 8008198:	2a09      	cmp	r2, #9
 800819a:	d903      	bls.n	80081a4 <_vfiprintf_r+0x1cc>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0c5      	beq.n	800812c <_vfiprintf_r+0x154>
 80081a0:	9005      	str	r0, [sp, #20]
 80081a2:	e7c3      	b.n	800812c <_vfiprintf_r+0x154>
 80081a4:	fb05 2000 	mla	r0, r5, r0, r2
 80081a8:	2301      	movs	r3, #1
 80081aa:	e7f0      	b.n	800818e <_vfiprintf_r+0x1b6>
 80081ac:	ab03      	add	r3, sp, #12
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4622      	mov	r2, r4
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <_vfiprintf_r+0x228>)
 80081b4:	a904      	add	r1, sp, #16
 80081b6:	4630      	mov	r0, r6
 80081b8:	f3af 8000 	nop.w
 80081bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081c0:	4681      	mov	r9, r0
 80081c2:	d1d8      	bne.n	8008176 <_vfiprintf_r+0x19e>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	065b      	lsls	r3, r3, #25
 80081c8:	f53f af7d 	bmi.w	80080c6 <_vfiprintf_r+0xee>
 80081cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ce:	e77c      	b.n	80080ca <_vfiprintf_r+0xf2>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4622      	mov	r2, r4
 80081d6:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <_vfiprintf_r+0x228>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f888 	bl	80082f0 <_printf_i>
 80081e0:	e7ec      	b.n	80081bc <_vfiprintf_r+0x1e4>
 80081e2:	bf00      	nop
 80081e4:	080090dc 	.word	0x080090dc
 80081e8:	0800911c 	.word	0x0800911c
 80081ec:	080090fc 	.word	0x080090fc
 80081f0:	080090bc 	.word	0x080090bc
 80081f4:	08009122 	.word	0x08009122
 80081f8:	08009126 	.word	0x08009126
 80081fc:	00000000 	.word	0x00000000
 8008200:	08007fb5 	.word	0x08007fb5

08008204 <_printf_common>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	4691      	mov	r9, r2
 800820a:	461f      	mov	r7, r3
 800820c:	688a      	ldr	r2, [r1, #8]
 800820e:	690b      	ldr	r3, [r1, #16]
 8008210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008214:	4293      	cmp	r3, r2
 8008216:	bfb8      	it	lt
 8008218:	4613      	movlt	r3, r2
 800821a:	f8c9 3000 	str.w	r3, [r9]
 800821e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008222:	4606      	mov	r6, r0
 8008224:	460c      	mov	r4, r1
 8008226:	b112      	cbz	r2, 800822e <_printf_common+0x2a>
 8008228:	3301      	adds	r3, #1
 800822a:	f8c9 3000 	str.w	r3, [r9]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	0699      	lsls	r1, r3, #26
 8008232:	bf42      	ittt	mi
 8008234:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008238:	3302      	addmi	r3, #2
 800823a:	f8c9 3000 	strmi.w	r3, [r9]
 800823e:	6825      	ldr	r5, [r4, #0]
 8008240:	f015 0506 	ands.w	r5, r5, #6
 8008244:	d107      	bne.n	8008256 <_printf_common+0x52>
 8008246:	f104 0a19 	add.w	sl, r4, #25
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	f8d9 2000 	ldr.w	r2, [r9]
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	429d      	cmp	r5, r3
 8008254:	db29      	blt.n	80082aa <_printf_common+0xa6>
 8008256:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	3300      	adds	r3, #0
 800825e:	bf18      	it	ne
 8008260:	2301      	movne	r3, #1
 8008262:	0692      	lsls	r2, r2, #26
 8008264:	d42e      	bmi.n	80082c4 <_printf_common+0xc0>
 8008266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800826a:	4639      	mov	r1, r7
 800826c:	4630      	mov	r0, r6
 800826e:	47c0      	blx	r8
 8008270:	3001      	adds	r0, #1
 8008272:	d021      	beq.n	80082b8 <_printf_common+0xb4>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	68e5      	ldr	r5, [r4, #12]
 8008278:	f8d9 2000 	ldr.w	r2, [r9]
 800827c:	f003 0306 	and.w	r3, r3, #6
 8008280:	2b04      	cmp	r3, #4
 8008282:	bf08      	it	eq
 8008284:	1aad      	subeq	r5, r5, r2
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	6922      	ldr	r2, [r4, #16]
 800828a:	bf0c      	ite	eq
 800828c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008290:	2500      	movne	r5, #0
 8008292:	4293      	cmp	r3, r2
 8008294:	bfc4      	itt	gt
 8008296:	1a9b      	subgt	r3, r3, r2
 8008298:	18ed      	addgt	r5, r5, r3
 800829a:	f04f 0900 	mov.w	r9, #0
 800829e:	341a      	adds	r4, #26
 80082a0:	454d      	cmp	r5, r9
 80082a2:	d11b      	bne.n	80082dc <_printf_common+0xd8>
 80082a4:	2000      	movs	r0, #0
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4639      	mov	r1, r7
 80082b0:	4630      	mov	r0, r6
 80082b2:	47c0      	blx	r8
 80082b4:	3001      	adds	r0, #1
 80082b6:	d103      	bne.n	80082c0 <_printf_common+0xbc>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7c2      	b.n	800824a <_printf_common+0x46>
 80082c4:	18e1      	adds	r1, r4, r3
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	2030      	movs	r0, #48	; 0x30
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ce:	4422      	add	r2, r4
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d8:	3302      	adds	r3, #2
 80082da:	e7c4      	b.n	8008266 <_printf_common+0x62>
 80082dc:	2301      	movs	r3, #1
 80082de:	4622      	mov	r2, r4
 80082e0:	4639      	mov	r1, r7
 80082e2:	4630      	mov	r0, r6
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0e6      	beq.n	80082b8 <_printf_common+0xb4>
 80082ea:	f109 0901 	add.w	r9, r9, #1
 80082ee:	e7d7      	b.n	80082a0 <_printf_common+0x9c>

080082f0 <_printf_i>:
 80082f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082f4:	4617      	mov	r7, r2
 80082f6:	7e0a      	ldrb	r2, [r1, #24]
 80082f8:	b085      	sub	sp, #20
 80082fa:	2a6e      	cmp	r2, #110	; 0x6e
 80082fc:	4698      	mov	r8, r3
 80082fe:	4606      	mov	r6, r0
 8008300:	460c      	mov	r4, r1
 8008302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008304:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008308:	f000 80bc 	beq.w	8008484 <_printf_i+0x194>
 800830c:	d81a      	bhi.n	8008344 <_printf_i+0x54>
 800830e:	2a63      	cmp	r2, #99	; 0x63
 8008310:	d02e      	beq.n	8008370 <_printf_i+0x80>
 8008312:	d80a      	bhi.n	800832a <_printf_i+0x3a>
 8008314:	2a00      	cmp	r2, #0
 8008316:	f000 80c8 	beq.w	80084aa <_printf_i+0x1ba>
 800831a:	2a58      	cmp	r2, #88	; 0x58
 800831c:	f000 808a 	beq.w	8008434 <_printf_i+0x144>
 8008320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008324:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008328:	e02a      	b.n	8008380 <_printf_i+0x90>
 800832a:	2a64      	cmp	r2, #100	; 0x64
 800832c:	d001      	beq.n	8008332 <_printf_i+0x42>
 800832e:	2a69      	cmp	r2, #105	; 0x69
 8008330:	d1f6      	bne.n	8008320 <_printf_i+0x30>
 8008332:	6821      	ldr	r1, [r4, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	f011 0f80 	tst.w	r1, #128	; 0x80
 800833a:	d023      	beq.n	8008384 <_printf_i+0x94>
 800833c:	1d11      	adds	r1, r2, #4
 800833e:	6019      	str	r1, [r3, #0]
 8008340:	6813      	ldr	r3, [r2, #0]
 8008342:	e027      	b.n	8008394 <_printf_i+0xa4>
 8008344:	2a73      	cmp	r2, #115	; 0x73
 8008346:	f000 80b4 	beq.w	80084b2 <_printf_i+0x1c2>
 800834a:	d808      	bhi.n	800835e <_printf_i+0x6e>
 800834c:	2a6f      	cmp	r2, #111	; 0x6f
 800834e:	d02a      	beq.n	80083a6 <_printf_i+0xb6>
 8008350:	2a70      	cmp	r2, #112	; 0x70
 8008352:	d1e5      	bne.n	8008320 <_printf_i+0x30>
 8008354:	680a      	ldr	r2, [r1, #0]
 8008356:	f042 0220 	orr.w	r2, r2, #32
 800835a:	600a      	str	r2, [r1, #0]
 800835c:	e003      	b.n	8008366 <_printf_i+0x76>
 800835e:	2a75      	cmp	r2, #117	; 0x75
 8008360:	d021      	beq.n	80083a6 <_printf_i+0xb6>
 8008362:	2a78      	cmp	r2, #120	; 0x78
 8008364:	d1dc      	bne.n	8008320 <_printf_i+0x30>
 8008366:	2278      	movs	r2, #120	; 0x78
 8008368:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800836c:	496e      	ldr	r1, [pc, #440]	; (8008528 <_printf_i+0x238>)
 800836e:	e064      	b.n	800843a <_printf_i+0x14a>
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008376:	1d11      	adds	r1, r2, #4
 8008378:	6019      	str	r1, [r3, #0]
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e0a3      	b.n	80084cc <_printf_i+0x1dc>
 8008384:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008388:	f102 0104 	add.w	r1, r2, #4
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	d0d7      	beq.n	8008340 <_printf_i+0x50>
 8008390:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008394:	2b00      	cmp	r3, #0
 8008396:	da03      	bge.n	80083a0 <_printf_i+0xb0>
 8008398:	222d      	movs	r2, #45	; 0x2d
 800839a:	425b      	negs	r3, r3
 800839c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80083a0:	4962      	ldr	r1, [pc, #392]	; (800852c <_printf_i+0x23c>)
 80083a2:	220a      	movs	r2, #10
 80083a4:	e017      	b.n	80083d6 <_printf_i+0xe6>
 80083a6:	6820      	ldr	r0, [r4, #0]
 80083a8:	6819      	ldr	r1, [r3, #0]
 80083aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80083ae:	d003      	beq.n	80083b8 <_printf_i+0xc8>
 80083b0:	1d08      	adds	r0, r1, #4
 80083b2:	6018      	str	r0, [r3, #0]
 80083b4:	680b      	ldr	r3, [r1, #0]
 80083b6:	e006      	b.n	80083c6 <_printf_i+0xd6>
 80083b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083bc:	f101 0004 	add.w	r0, r1, #4
 80083c0:	6018      	str	r0, [r3, #0]
 80083c2:	d0f7      	beq.n	80083b4 <_printf_i+0xc4>
 80083c4:	880b      	ldrh	r3, [r1, #0]
 80083c6:	4959      	ldr	r1, [pc, #356]	; (800852c <_printf_i+0x23c>)
 80083c8:	2a6f      	cmp	r2, #111	; 0x6f
 80083ca:	bf14      	ite	ne
 80083cc:	220a      	movne	r2, #10
 80083ce:	2208      	moveq	r2, #8
 80083d0:	2000      	movs	r0, #0
 80083d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80083d6:	6865      	ldr	r5, [r4, #4]
 80083d8:	60a5      	str	r5, [r4, #8]
 80083da:	2d00      	cmp	r5, #0
 80083dc:	f2c0 809c 	blt.w	8008518 <_printf_i+0x228>
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	f020 0004 	bic.w	r0, r0, #4
 80083e6:	6020      	str	r0, [r4, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d13f      	bne.n	800846c <_printf_i+0x17c>
 80083ec:	2d00      	cmp	r5, #0
 80083ee:	f040 8095 	bne.w	800851c <_printf_i+0x22c>
 80083f2:	4675      	mov	r5, lr
 80083f4:	2a08      	cmp	r2, #8
 80083f6:	d10b      	bne.n	8008410 <_printf_i+0x120>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d508      	bpl.n	8008410 <_printf_i+0x120>
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	6862      	ldr	r2, [r4, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	bfde      	ittt	le
 8008406:	2330      	movle	r3, #48	; 0x30
 8008408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800840c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008410:	ebae 0305 	sub.w	r3, lr, r5
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	f8cd 8000 	str.w	r8, [sp]
 800841a:	463b      	mov	r3, r7
 800841c:	aa03      	add	r2, sp, #12
 800841e:	4621      	mov	r1, r4
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff feef 	bl	8008204 <_printf_common>
 8008426:	3001      	adds	r0, #1
 8008428:	d155      	bne.n	80084d6 <_printf_i+0x1e6>
 800842a:	f04f 30ff 	mov.w	r0, #4294967295
 800842e:	b005      	add	sp, #20
 8008430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008434:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008438:	493c      	ldr	r1, [pc, #240]	; (800852c <_printf_i+0x23c>)
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008442:	f100 0504 	add.w	r5, r0, #4
 8008446:	601d      	str	r5, [r3, #0]
 8008448:	d001      	beq.n	800844e <_printf_i+0x15e>
 800844a:	6803      	ldr	r3, [r0, #0]
 800844c:	e002      	b.n	8008454 <_printf_i+0x164>
 800844e:	0655      	lsls	r5, r2, #25
 8008450:	d5fb      	bpl.n	800844a <_printf_i+0x15a>
 8008452:	8803      	ldrh	r3, [r0, #0]
 8008454:	07d0      	lsls	r0, r2, #31
 8008456:	bf44      	itt	mi
 8008458:	f042 0220 	orrmi.w	r2, r2, #32
 800845c:	6022      	strmi	r2, [r4, #0]
 800845e:	b91b      	cbnz	r3, 8008468 <_printf_i+0x178>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	f022 0220 	bic.w	r2, r2, #32
 8008466:	6022      	str	r2, [r4, #0]
 8008468:	2210      	movs	r2, #16
 800846a:	e7b1      	b.n	80083d0 <_printf_i+0xe0>
 800846c:	4675      	mov	r5, lr
 800846e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008472:	fb02 3310 	mls	r3, r2, r0, r3
 8008476:	5ccb      	ldrb	r3, [r1, r3]
 8008478:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800847c:	4603      	mov	r3, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	d1f5      	bne.n	800846e <_printf_i+0x17e>
 8008482:	e7b7      	b.n	80083f4 <_printf_i+0x104>
 8008484:	6808      	ldr	r0, [r1, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	6949      	ldr	r1, [r1, #20]
 800848a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800848e:	d004      	beq.n	800849a <_printf_i+0x1aa>
 8008490:	1d10      	adds	r0, r2, #4
 8008492:	6018      	str	r0, [r3, #0]
 8008494:	6813      	ldr	r3, [r2, #0]
 8008496:	6019      	str	r1, [r3, #0]
 8008498:	e007      	b.n	80084aa <_printf_i+0x1ba>
 800849a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800849e:	f102 0004 	add.w	r0, r2, #4
 80084a2:	6018      	str	r0, [r3, #0]
 80084a4:	6813      	ldr	r3, [r2, #0]
 80084a6:	d0f6      	beq.n	8008496 <_printf_i+0x1a6>
 80084a8:	8019      	strh	r1, [r3, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	4675      	mov	r5, lr
 80084b0:	e7b1      	b.n	8008416 <_printf_i+0x126>
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	1d11      	adds	r1, r2, #4
 80084b6:	6019      	str	r1, [r3, #0]
 80084b8:	6815      	ldr	r5, [r2, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	2100      	movs	r1, #0
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f7 fe86 	bl	80001d0 <memchr>
 80084c4:	b108      	cbz	r0, 80084ca <_printf_i+0x1da>
 80084c6:	1b40      	subs	r0, r0, r5
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	e79f      	b.n	8008416 <_printf_i+0x126>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	462a      	mov	r2, r5
 80084da:	4639      	mov	r1, r7
 80084dc:	4630      	mov	r0, r6
 80084de:	47c0      	blx	r8
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0a2      	beq.n	800842a <_printf_i+0x13a>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	079b      	lsls	r3, r3, #30
 80084e8:	d507      	bpl.n	80084fa <_printf_i+0x20a>
 80084ea:	2500      	movs	r5, #0
 80084ec:	f104 0919 	add.w	r9, r4, #25
 80084f0:	68e3      	ldr	r3, [r4, #12]
 80084f2:	9a03      	ldr	r2, [sp, #12]
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	429d      	cmp	r5, r3
 80084f8:	db05      	blt.n	8008506 <_printf_i+0x216>
 80084fa:	68e0      	ldr	r0, [r4, #12]
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	4298      	cmp	r0, r3
 8008500:	bfb8      	it	lt
 8008502:	4618      	movlt	r0, r3
 8008504:	e793      	b.n	800842e <_printf_i+0x13e>
 8008506:	2301      	movs	r3, #1
 8008508:	464a      	mov	r2, r9
 800850a:	4639      	mov	r1, r7
 800850c:	4630      	mov	r0, r6
 800850e:	47c0      	blx	r8
 8008510:	3001      	adds	r0, #1
 8008512:	d08a      	beq.n	800842a <_printf_i+0x13a>
 8008514:	3501      	adds	r5, #1
 8008516:	e7eb      	b.n	80084f0 <_printf_i+0x200>
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1a7      	bne.n	800846c <_printf_i+0x17c>
 800851c:	780b      	ldrb	r3, [r1, #0]
 800851e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008526:	e765      	b.n	80083f4 <_printf_i+0x104>
 8008528:	0800913e 	.word	0x0800913e
 800852c:	0800912d 	.word	0x0800912d

08008530 <_putc_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	460d      	mov	r5, r1
 8008534:	4614      	mov	r4, r2
 8008536:	4606      	mov	r6, r0
 8008538:	b118      	cbz	r0, 8008542 <_putc_r+0x12>
 800853a:	6983      	ldr	r3, [r0, #24]
 800853c:	b90b      	cbnz	r3, 8008542 <_putc_r+0x12>
 800853e:	f7ff fc31 	bl	8007da4 <__sinit>
 8008542:	4b13      	ldr	r3, [pc, #76]	; (8008590 <_putc_r+0x60>)
 8008544:	429c      	cmp	r4, r3
 8008546:	d112      	bne.n	800856e <_putc_r+0x3e>
 8008548:	6874      	ldr	r4, [r6, #4]
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	3b01      	subs	r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	60a3      	str	r3, [r4, #8]
 8008552:	da16      	bge.n	8008582 <_putc_r+0x52>
 8008554:	69a2      	ldr	r2, [r4, #24]
 8008556:	4293      	cmp	r3, r2
 8008558:	db02      	blt.n	8008560 <_putc_r+0x30>
 800855a:	b2eb      	uxtb	r3, r5
 800855c:	2b0a      	cmp	r3, #10
 800855e:	d110      	bne.n	8008582 <_putc_r+0x52>
 8008560:	4622      	mov	r2, r4
 8008562:	4629      	mov	r1, r5
 8008564:	4630      	mov	r0, r6
 8008566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800856a:	f7ff ba69 	b.w	8007a40 <__swbuf_r>
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <_putc_r+0x64>)
 8008570:	429c      	cmp	r4, r3
 8008572:	d101      	bne.n	8008578 <_putc_r+0x48>
 8008574:	68b4      	ldr	r4, [r6, #8]
 8008576:	e7e8      	b.n	800854a <_putc_r+0x1a>
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <_putc_r+0x68>)
 800857a:	429c      	cmp	r4, r3
 800857c:	bf08      	it	eq
 800857e:	68f4      	ldreq	r4, [r6, #12]
 8008580:	e7e3      	b.n	800854a <_putc_r+0x1a>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	6022      	str	r2, [r4, #0]
 8008588:	701d      	strb	r5, [r3, #0]
 800858a:	b2e8      	uxtb	r0, r5
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	bf00      	nop
 8008590:	080090dc 	.word	0x080090dc
 8008594:	080090fc 	.word	0x080090fc
 8008598:	080090bc 	.word	0x080090bc

0800859c <__sread>:
 800859c:	b510      	push	{r4, lr}
 800859e:	460c      	mov	r4, r1
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	f000 f894 	bl	80086d0 <_read_r>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	bfab      	itete	ge
 80085ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085ae:	89a3      	ldrhlt	r3, [r4, #12]
 80085b0:	181b      	addge	r3, r3, r0
 80085b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085b6:	bfac      	ite	ge
 80085b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ba:	81a3      	strhlt	r3, [r4, #12]
 80085bc:	bd10      	pop	{r4, pc}

080085be <__swrite>:
 80085be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c2:	461f      	mov	r7, r3
 80085c4:	898b      	ldrh	r3, [r1, #12]
 80085c6:	05db      	lsls	r3, r3, #23
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4616      	mov	r6, r2
 80085ce:	d505      	bpl.n	80085dc <__swrite+0x1e>
 80085d0:	2302      	movs	r3, #2
 80085d2:	2200      	movs	r2, #0
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	f000 f868 	bl	80086ac <_lseek_r>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e6:	81a3      	strh	r3, [r4, #12]
 80085e8:	4632      	mov	r2, r6
 80085ea:	463b      	mov	r3, r7
 80085ec:	4628      	mov	r0, r5
 80085ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f2:	f000 b817 	b.w	8008624 <_write_r>

080085f6 <__sseek>:
 80085f6:	b510      	push	{r4, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fe:	f000 f855 	bl	80086ac <_lseek_r>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	bf15      	itete	ne
 8008608:	6560      	strne	r0, [r4, #84]	; 0x54
 800860a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800860e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008612:	81a3      	strheq	r3, [r4, #12]
 8008614:	bf18      	it	ne
 8008616:	81a3      	strhne	r3, [r4, #12]
 8008618:	bd10      	pop	{r4, pc}

0800861a <__sclose>:
 800861a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861e:	f000 b813 	b.w	8008648 <_close_r>
	...

08008624 <_write_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4c07      	ldr	r4, [pc, #28]	; (8008644 <_write_r+0x20>)
 8008628:	4605      	mov	r5, r0
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	2200      	movs	r2, #0
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f7fe fe45 	bl	80072c2 <_write>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_write_r+0x1e>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	b103      	cbz	r3, 8008642 <_write_r+0x1e>
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20008250 	.word	0x20008250

08008648 <_close_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4c06      	ldr	r4, [pc, #24]	; (8008664 <_close_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4605      	mov	r5, r0
 8008650:	4608      	mov	r0, r1
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	f7fe fe78 	bl	8007348 <_close>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_close_r+0x1a>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	b103      	cbz	r3, 8008662 <_close_r+0x1a>
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	20008250 	.word	0x20008250

08008668 <_fstat_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4c07      	ldr	r4, [pc, #28]	; (8008688 <_fstat_r+0x20>)
 800866c:	2300      	movs	r3, #0
 800866e:	4605      	mov	r5, r0
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	f7fe fe6a 	bl	800734e <_fstat>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d102      	bne.n	8008684 <_fstat_r+0x1c>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	b103      	cbz	r3, 8008684 <_fstat_r+0x1c>
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	bd38      	pop	{r3, r4, r5, pc}
 8008686:	bf00      	nop
 8008688:	20008250 	.word	0x20008250

0800868c <_isatty_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4c06      	ldr	r4, [pc, #24]	; (80086a8 <_isatty_r+0x1c>)
 8008690:	2300      	movs	r3, #0
 8008692:	4605      	mov	r5, r0
 8008694:	4608      	mov	r0, r1
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	f7fe fe5e 	bl	8007358 <_isatty>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_isatty_r+0x1a>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_isatty_r+0x1a>
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20008250 	.word	0x20008250

080086ac <_lseek_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4c07      	ldr	r4, [pc, #28]	; (80086cc <_lseek_r+0x20>)
 80086b0:	4605      	mov	r5, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7fe fe4e 	bl	800735c <_lseek>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_lseek_r+0x1e>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_lseek_r+0x1e>
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20008250 	.word	0x20008250

080086d0 <_read_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4c07      	ldr	r4, [pc, #28]	; (80086f0 <_read_r+0x20>)
 80086d4:	4605      	mov	r5, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	6022      	str	r2, [r4, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7fe fde0 	bl	80072a4 <_read>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_read_r+0x1e>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_read_r+0x1e>
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20008250 	.word	0x20008250

080086f4 <_init>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	bf00      	nop
 80086f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fa:	bc08      	pop	{r3}
 80086fc:	469e      	mov	lr, r3
 80086fe:	4770      	bx	lr

08008700 <_fini>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr
